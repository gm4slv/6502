ca65 V2.18 - Debian 2.19-1
Main file   : beep_monitor_dev.s
Current file: beep_monitor_dev.s

000000r 1               ;;
000000r 1               ;; DEV updates:
000000r 1               ;;
000000r 1               ;;1) pre-load USER MEM @ user_ram
000000r 1               ;;
000000r 1               ;;2) set new VIAs for OUTPUT on both ports A & B
000000r 1               ;;
000000r 1               ;;3) TESTING new VIAS with flashing LEDs on all ports
000000r 1               ;;
000000r 1               ;;4) Add second LCD on VIA_2 PORTA_2 ?
000000r 1               ;;
000000r 1               ;;5) BEEP using VIA2 T1 on PORTB_2 bit 7
000000r 1               ;;
000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1  xx xx        BEEP_POINTER:     .res 2
000002r 1  xx xx        DUMP_POINTER:     .res 2
000004r 1  xx           FLAGS:            .res 1
000005r 1  xx           TOGGLE_TIME:      .res 1
000006r 1  xx           CLOCK_LAST:       .res 1
000007r 1  xx xx        MESSAGE_POINTER:  .res 2
000009r 1  xx xx xx xx  TICKS:            .res 4
00000Dr 1  xx           CENTISEC:         .res 1
00000Er 1  xx           HUNDRED_HRS:      .res 1
00000Fr 1  xx           TEN_HRS:          .res 1
000010r 1  xx           HRS:              .res 1
000011r 1  xx           TEN_MINUTES:      .res 1
000012r 1  xx           MINUTES:          .res 1
000013r 1  xx           TEN_SECONDS:      .res 1
000014r 1  xx           SECONDS:          .res 1
000015r 1  xx xx        MEM_POINTER:      .res 2
000017r 1  xx           LED2_LAST:        .res 1
000018r 1  xx           LED3_LAST:        .res 1
000019r 1  xx           LAST_KIT:         .res 1
00001Ar 1  xx           BEEP_ON_TIME:     .res 1
00001Br 1  xx           BEEP_DELAY_TIME:  .res 1 ; $01 = 1 tick ~10ms, $FF = 255 ticks ~2.5 seconds
00001Cr 1               
00001Cr 1               .bss
000000r 1               
000000r 1  xx           INKEY:            .res 1
000001r 1  xx xx xx xx  KEY_PRESS:        .res 4
000005r 1  xx xx        BYTE:             .res 2
000007r 1  xx           TENS:             .res 1
000008r 1  xx           HUNDREDS:         .res 1
000009r 1  xx xx        HEX:              .res 2
00000Br 1  xx xx        HEXB:             .res 2
00000Dr 1  xx           TEMP:             .res 1
00000Er 1  xx           TEMP2:            .res 1
00000Fr 1  xx           HI_DIGIT:         .res 1
000010r 1  xx           LO_DIGIT:         .res 1
000011r 1               
000011r 1               
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               ;;
000011r 1               ;;        INCLUDES
000011r 1               ;;
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               
000011r 1               
000011r 1               .include "../includes/ioports.inc"
000011r 2               
000011r 2                 .code
000000r 2               
000000r 2               ; VIA_1 Port addresses
000000r 2               VIA_1     = $6000
000000r 2               PORTB_1   = VIA_1
000000r 2               PORTA_1   = VIA_1 + 1
000000r 2               DDRB_1    = VIA_1 + 2
000000r 2               DDRA_1    = VIA_1 + 3
000000r 2               T1CL_1    = VIA_1 + 4
000000r 2               T1CH_1    = VIA_1 + 5
000000r 2               T1LL_1    = VIA_1 + 6
000000r 2               T1LH_1    = VIA_1 + 7
000000r 2               T2CL_1    = VIA_1 + 8
000000r 2               T2CH_1    = VIA_1 + 9
000000r 2               SR_1      = VIA_1 + 10
000000r 2               ACR_1     = VIA_1 + 11
000000r 2               PCR_1     = VIA_1 + 12
000000r 2               IFR_1     = VIA_1 + 13
000000r 2               IER_1     = VIA_1 + 14
000000r 2               PORTA_NO_HS_1 = VIA_1 + 15
000000r 2               
000000r 2               ; VIA_2 Port addresses
000000r 2               VIA_2     = $5000
000000r 2               PORTB_2   = VIA_2
000000r 2               PORTA_2   = VIA_2 + 1
000000r 2               DDRB_2    = VIA_2 + 2
000000r 2               DDRA_2    = VIA_2 + 3
000000r 2               T1CL_2    = VIA_2 + 4
000000r 2               T1CH_2    = VIA_2 + 5
000000r 2               T1LL_2    = VIA_2 + 6
000000r 2               T1LH_2    = VIA_2 + 7
000000r 2               T2CL_2    = VIA_2 + 8
000000r 2               T2CH_2    = VIA_2 + 9
000000r 2               SR_2      = VIA_2 + 10
000000r 2               ACR_2     = VIA_2 + 11
000000r 2               PCR_2     = VIA_2 + 12
000000r 2               IFR_2     = VIA_2 + 13
000000r 2               IER_2     = VIA_2 + 14
000000r 2               PORTA_NO_HS_2 = VIA_2 + 15
000000r 2               
000000r 2               ; VIA_3 Port addresses
000000r 2               VIA_3     = $4800
000000r 2               PORTB_3   = VIA_3
000000r 2               PORTA_3   = VIA_3 + 1
000000r 2               DDRB_3    = VIA_3 + 2
000000r 2               DDRA_3    = VIA_3 + 3
000000r 2               T1CL_3    = VIA_3 + 4
000000r 2               T1CH_3    = VIA_3 + 5
000000r 2               T1LL_3    = VIA_3 + 6
000000r 2               T1LH_3    = VIA_3 + 7
000000r 2               T2CL_3    = VIA_3 + 8
000000r 2               T2CH_3    = VIA_3 + 9
000000r 2               SR_3      = VIA_3 + 10
000000r 2               ACR_3     = VIA_3 + 11
000000r 2               PCR_3     = VIA_3 + 12
000000r 2               IFR_3     = VIA_3 + 13
000000r 2               IER_3     = VIA_3 + 14
000000r 2               PORTA_NO_HS_3 = VIA_3 + 15
000000r 2               
000000r 2               ; ACIA_1 Port Addresses
000000r 2               ACIA_1    = $4400
000000r 2               S_TXRX_1  = ACIA_1      ; TXD / RXD
000000r 2               S_STA_1   = ACIA_1 + 1  ; Status
000000r 2               S_COM_1   = ACIA_1 + 2  ; Command
000000r 2               S_CON_1   = ACIA_1 + 3  ; Control
000000r 2               
000000r 2               
000000r 2               via_1_init:
000000r 2               
000000r 2               
000000r 2               
000000r 2  A9 9A          lda #%10011010  ; CB2, CA1 active
000002r 2  8D 0E 60       sta IER_1
000005r 2               
000005r 2  A9 51          lda #%01010001  ;  CA1 active high-transition, CB2 low
000007r 2  8D 0C 60       sta PCR_1
00000Ar 2               
00000Ar 2  A9 7F          lda #%01111111 ; Set all pins on port B to output except BIT 7 which is used for "SHIFT/INSTRUCTION"  button
00000Cr 2  8D 02 60       sta DDRB_1
00000Fr 2  A9 F0          lda #%11110000 ; Set low-nibble pins on port A to input and high-nibble pins to output, for keypad
000011r 2  8D 03 60       sta DDRA_1
000014r 2               
000014r 2  60             rts
000015r 2               
000015r 2               via_2_init:
000015r 2               
000015r 2               ;; TIMER T1 is set up in functions.inc to act as source of beep tones
000015r 2               
000015r 2  A9 FF          lda #%11111111 ; set all pins on port A & B to output
000017r 2  8D 03 50       sta DDRA_2
00001Ar 2  8D 02 50       sta DDRB_2
00001Dr 2  A9 00          lda #%00000000
00001Fr 2  8D 0E 50       sta IER_2
000022r 2  60             rts
000023r 2               
000023r 2               via_3_init:
000023r 2               
000023r 2               ;; TIMER T1 used as TICK source for RTC - set for 10ms per tick
000023r 2               ;; $270E = 9998d = count 10,000 phi2 cycles @ 1MHz = 10ms per interrupt
000023r 2               
000023r 2  A9 40          lda #%01000000 ; DON'T use PB7 as a T1 pulse timer clock output (ACR b7 = 0)
000025r 2                                ; Use T1 Timer in continuous reset-interrupt mode (ACR b6 = 1)
000025r 2  8D 0B 48       sta ACR_3
000028r 2               
000028r 2                 ; set T1 delay for 10ms interrupts
000028r 2  A9 0E          lda #$0E
00002Ar 2  8D 04 48       sta T1CL_3
00002Dr 2  A9 27          lda #$27
00002Fr 2  8D 05 48       sta T1CH_3
000032r 2               
000032r 2  A9 C0          lda #%11000000  ; Interrupt / T1 interrupt active
000034r 2  8D 0E 48       sta IER_3
000037r 2               
000037r 2  A9 FF          lda #%11111111 ; set all pins on port A & B to output for now
000039r 2  8D 03 48       sta DDRA_3
00003Cr 2  8D 02 48       sta DDRB_3
00003Fr 2               
00003Fr 2  60             rts
000040r 2               
000040r 2               
000040r 2               
000040r 2               
000040r 1               .include "../includes/lcd.inc"
000040r 2               
000040r 2               .SEGMENT "DISPLAY"
000000r 2               
000000r 2               ;.code
000000r 2               
000000r 2               ; LCD Command masks
000000r 2               E  = %01000000
000000r 2               RW = %00100000
000000r 2               RS = %00010000
000000r 2               
000000r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 2               ;;
000000r 2               ;;
000000r 2               ;;                              LCD Functions
000000r 2               ;;
000000r 2               ;;
000000r 2               ;;
000000r 2               
000000r 2               lcd_start:
000000r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000002r 2  20 rr rr       jsr lcd_instruction
000005r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000007r 2  20 rr rr       jsr lcd_instruction
00000Ar 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
00000Cr 2  20 rr rr       jsr lcd_instruction
00000Fr 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000011r 2  20 rr rr       jsr lcd_instruction
000014r 2  20 rr rr       jsr lcd_entry_mode
000017r 2  20 rr rr       jsr lcd_cursor_off
00001Ar 2                 ;jsr lcd_clear
00001Ar 2                 ; CONSIDER CHANGE
00001Ar 2  4C rr rr       jmp lcd_clear
00001Dr 2                 ;rts
00001Dr 2               
00001Dr 2               lcd_entry_mode:
00001Dr 2  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
00001Fr 2                 ;jsr lcd_instruction
00001Fr 2                 ; CONSIDER CHANGE
00001Fr 2  4C rr rr       jmp lcd_instruction
000022r 2                 ;rts
000022r 2               
000022r 2               lcd_home:
000022r 2  A9 02          lda #%00000010 ; cursor HOME
000024r 2                 ; CONDSIDER CHANGE
000024r 2  4C rr rr       jmp lcd_instruction
000027r 2                 ;jsr lcd_instruction
000027r 2                 ;rts
000027r 2               
000027r 2               lcd_add0:
000027r 2  A9 80          lda #%10000000 ; back to zero position
000029r 2                 ; CONSIDER CHANGE
000029r 2  4C rr rr       jmp lcd_instruction
00002Cr 2                 ;jsr lcd_instruction
00002Cr 2                 ;rts
00002Cr 2               
00002Cr 2               lcd_clear:
00002Cr 2  A9 01          lda #%00000001 ; Clear display
00002Er 2  4C rr rr       jmp lcd_instruction
000031r 2                 ;jsr lcd_instruction
000031r 2                 ;rts
000031r 2               
000031r 2               lcd_cursor_off:
000031r 2  A9 0C          lda #%00001100 ; Display on; cursor off; blink off
000033r 2  4C rr rr       jmp lcd_instruction
000036r 2                 ;jsr lcd_instruction
000036r 2                 ;rts
000036r 2               
000036r 2               lcd_cursor_on:
000036r 2  A9 0F          lda #%00001111 ; Display on; cursor on; blink on
000038r 2  4C rr rr       jmp lcd_instruction
00003Br 2                 ;jsr lcd_instruction
00003Br 2                 ;rts
00003Br 2               
00003Br 2               lcd_line_1:
00003Br 2  A9 80          lda #($80)
00003Dr 2  4C rr rr       jmp lcd_instruction
000040r 2                 ;jsr lcd_instruction
000040r 2                 ;rts
000040r 2               
000040r 2               lcd_line_2:
000040r 2  A9 C0          lda #($80 + $40)
000042r 2  4C rr rr       jmp lcd_instruction
000045r 2                 ;jsr lcd_instruction
000045r 2                 ;rts
000045r 2               
000045r 2               lcd_line_3:
000045r 2  A9 94          lda #($80 + $14)
000047r 2  4C rr rr       jmp lcd_instruction
00004Ar 2                 ;jsr lcd_instruction
00004Ar 2                 ;rts
00004Ar 2               
00004Ar 2               lcd_line_4:
00004Ar 2  A9 D4          lda #($80 + $54)
00004Cr 2  4C rr rr       jmp lcd_instruction
00004Fr 2                 ;jsr lcd_instruction
00004Fr 2                 ;rts
00004Fr 2               
00004Fr 2               lcd_wait:
00004Fr 2  48             pha
000050r 2  A9 70          lda #%01110000  ; LCD data is input (don't change MSB BIT7, it has to stay ZERO for SHIFT Button input)
000052r 2  8D 02 60       sta DDRB_1
000055r 2               lcdbusy:
000055r 2  A9 20          lda #RW
000057r 2  8D 00 60       sta PORTB_1
00005Ar 2  A9 60          lda #(RW | E)
00005Cr 2  8D 00 60       sta PORTB_1
00005Fr 2  AD 00 60       lda PORTB_1     ; Read high nibble
000062r 2  48             pha             ; and put on stack since it has the busy flag
000063r 2  A9 20          lda #RW
000065r 2  8D 00 60       sta PORTB_1
000068r 2  A9 60          lda #(RW | E)
00006Ar 2  8D 00 60       sta PORTB_1
00006Dr 2  AD 00 60       lda PORTB_1       ; Read low nibble
000070r 2  68             pla             ; Get high nibble off stack
000071r 2  29 08          and #%00001000
000073r 2  D0 E0          bne lcdbusy
000075r 2               
000075r 2  A9 20          lda #RW
000077r 2  8D 00 60       sta PORTB_1
00007Ar 2  A9 7F          lda #%01111111  ; LCD data is output (don't change MSB BIT7, it has to stay ZERO for SHIFT Buttion input)
00007Cr 2  8D 02 60       sta DDRB_1
00007Fr 2  68             pla
000080r 2  60             rts
000081r 2               
000081r 2               lcd_init:
000081r 2  A9 02          lda #%00000010 ; Set 4-bit mode : DO ONCE AT POWER UP
000083r 2  8D 00 60       sta PORTB_1
000086r 2  09 40          ora #E
000088r 2  8D 00 60       sta PORTB_1
00008Br 2  29 0F          and #%00001111
00008Dr 2  8D 00 60       sta PORTB_1
000090r 2  60             rts
000091r 2               
000091r 2               lcd_instruction:
000091r 2  20 rr rr       jsr lcd_wait
000094r 2  48             pha
000095r 2  4A             lsr
000096r 2  4A             lsr
000097r 2  4A             lsr
000098r 2  4A             lsr            ; Send high 4 bits
000099r 2  8D 00 60       sta PORTB_1
00009Cr 2  09 40          ora #E         ; Set E bit to send instruction
00009Er 2  8D 00 60       sta PORTB_1
0000A1r 2  49 40          eor #E         ; Clear E bit
0000A3r 2  8D 00 60       sta PORTB_1
0000A6r 2  68             pla
0000A7r 2  29 0F          and #%00001111 ; Send low 4 bits
0000A9r 2  8D 00 60       sta PORTB_1
0000ACr 2  09 40          ora #E         ; Set E bit to send instruction
0000AEr 2  8D 00 60       sta PORTB_1
0000B1r 2  49 40          eor #E         ; Clear E bit
0000B3r 2  8D 00 60       sta PORTB_1
0000B6r 2  60             rts
0000B7r 2               
0000B7r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000B7r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000B7r 2               ;;
0000B7r 2               ;;
0000B7r 2               ;;                              LCD 2 Functions
0000B7r 2               ;;
0000B7r 2               ;;
0000B7r 2               ;;
0000B7r 2               
0000B7r 2               lcd_2_start:
0000B7r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
0000B9r 2  20 rr rr       jsr lcd_2_instruction
0000BCr 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
0000BEr 2  20 rr rr       jsr lcd_2_instruction
0000C1r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
0000C3r 2  20 rr rr       jsr lcd_2_instruction
0000C6r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
0000C8r 2  20 rr rr       jsr lcd_2_instruction
0000CBr 2  20 rr rr       jsr lcd_2_entry_mode
0000CEr 2  20 rr rr       jsr lcd_2_cursor_off
0000D1r 2  4C rr rr       jmp lcd_2_clear
0000D4r 2                 ;jsr lcd_2_clear
0000D4r 2                 ;rts
0000D4r 2               
0000D4r 2               lcd_2_entry_mode:
0000D4r 2  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
0000D6r 2  4C rr rr       jmp lcd_2_instruction
0000D9r 2                 ;jsr lcd_2_instruction
0000D9r 2                 ;rts
0000D9r 2               
0000D9r 2               lcd_2_home:
0000D9r 2  A9 02          lda #%00000010 ; cursor HOME
0000DBr 2  4C rr rr       jmp lcd_2_instruction
0000DEr 2                 ;jsr lcd_2_instruction
0000DEr 2                 ;rts
0000DEr 2               
0000DEr 2               lcd_2_add0:
0000DEr 2  A9 80          lda #%10000000 ; back to zero position
0000E0r 2  4C rr rr       jmp lcd_2_instruction
0000E3r 2                 ;jsr lcd_2_instruction
0000E3r 2                 ;rts
0000E3r 2               
0000E3r 2               lcd_2_clear:
0000E3r 2  A9 01          lda #%00000001 ; Clear display
0000E5r 2  4C rr rr       jmp lcd_2_instruction
0000E8r 2                 ;jsr lcd_2_instruction
0000E8r 2                 ;rts
0000E8r 2               
0000E8r 2               lcd_2_cursor_off:
0000E8r 2  A9 0C          lda #%00001100 ; Display on; cursor off; blink off
0000EAr 2  4C rr rr       jmp lcd_2_instruction
0000EDr 2                 ;jsr lcd_2_instruction
0000EDr 2                 ;rts
0000EDr 2               
0000EDr 2               lcd_2_cursor_on:
0000EDr 2  A9 0F          lda #%00001111 ; Display on; cursor on; blink on
0000EFr 2  4C rr rr       jmp lcd_2_instruction
0000F2r 2                 ;jsr lcd_2_instruction
0000F2r 2                 ;rts
0000F2r 2               
0000F2r 2               lcd_2_line_1:
0000F2r 2  A9 80          lda #($80)
0000F4r 2  4C rr rr       jmp lcd_2_instruction
0000F7r 2                 ;jsr lcd_2_instruction
0000F7r 2                 ;rts
0000F7r 2               
0000F7r 2               lcd_2_line_2:
0000F7r 2  A9 C0          lda #($80 + $40)
0000F9r 2  4C rr rr       jmp lcd_2_instruction
0000FCr 2                 ;jsr lcd_2_instruction
0000FCr 2                 ;rts
0000FCr 2               
0000FCr 2               lcd_2_wait:
0000FCr 2  48             pha
0000FDr 2  A9 70          lda #%01110000  ; LCD data is input (don't change MSB BIT7, it has to stay ZERO for SHIFT Button input)
0000FFr 2  8D 03 48       sta DDRA_3
000102r 2               
000102r 2               lcdbusy2:
000102r 2  A9 20          lda #RW
000104r 2  8D 01 48       sta PORTA_3
000107r 2  A9 60          lda #(RW | E)
000109r 2  8D 01 48       sta PORTA_3
00010Cr 2  AD 01 48       lda PORTA_3     ; Read high nibble
00010Fr 2  48             pha             ; and put on stack since it has the busy flag
000110r 2  A9 20          lda #RW
000112r 2  8D 01 48       sta PORTA_3
000115r 2  A9 60          lda #(RW | E)
000117r 2  8D 01 48       sta PORTA_3
00011Ar 2  AD 01 48       lda PORTA_3       ; Read low nibble
00011Dr 2  68             pla             ; Get high nibble off stack
00011Er 2  29 08          and #%00001000
000120r 2  D0 E0          bne lcdbusy2
000122r 2               
000122r 2  A9 20          lda #RW
000124r 2  8D 01 48       sta PORTA_3
000127r 2  A9 7F          lda #%01111111  ; LCD data is output (don't change MSB BIT7, it has to stay ZERO for SHIFT Buttion input)
000129r 2  8D 03 48       sta DDRA_3
00012Cr 2  68             pla
00012Dr 2  60             rts
00012Er 2               
00012Er 2               lcd_2_init:
00012Er 2  A9 02          lda #%00000010 ; Set 4-bit mode : DO ONCE AT POWER UP
000130r 2  8D 01 48       sta PORTA_3
000133r 2  09 40          ora #E
000135r 2  8D 01 48       sta PORTA_3
000138r 2  29 0F          and #%00001111
00013Ar 2  8D 01 48       sta PORTA_3
00013Dr 2  60             rts
00013Er 2               
00013Er 2               lcd_2_instruction:
00013Er 2  20 rr rr       jsr lcd_2_wait
000141r 2  48             pha
000142r 2  4A             lsr
000143r 2  4A             lsr
000144r 2  4A             lsr
000145r 2  4A             lsr            ; Send high 4 bits
000146r 2  8D 01 48       sta PORTA_3
000149r 2  09 40          ora #E         ; Set E bit to send instruction
00014Br 2  8D 01 48       sta PORTA_3
00014Er 2  49 40          eor #E         ; Clear E bit
000150r 2  8D 01 48       sta PORTA_3
000153r 2  68             pla
000154r 2  29 0F          and #%00001111 ; Send low 4 bits
000156r 2  8D 01 48       sta PORTA_3
000159r 2  09 40          ora #E         ; Set E bit to send instruction
00015Br 2  8D 01 48       sta PORTA_3
00015Er 2  49 40          eor #E         ; Clear E bit
000160r 2  8D 01 48       sta PORTA_3
000163r 2  60             rts
000164r 2               
000164r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000164r 2               ;;
000164r 2               ;;        PRINT Characters on LCD 2 - an ASCII value in Accumulator
000164r 2               ;;        is printed on the display
000164r 2               ;;
000164r 2               
000164r 2               print_2_char:
000164r 2  20 rr rr       jsr lcd_2_wait
000167r 2  48             pha
000168r 2  4A             lsr
000169r 2  4A             lsr
00016Ar 2  4A             lsr
00016Br 2  4A             lsr             ; Send high 4 bits
00016Cr 2  09 10          ora #RS         ; Set RS
00016Er 2  8D 01 48       sta PORTA_3
000171r 2  09 40          ora #E          ; Set E bit to send instruction
000173r 2  8D 01 48       sta PORTA_3
000176r 2  49 40          eor #E          ; Clear E bit
000178r 2  8D 01 48       sta PORTA_3
00017Br 2  68             pla
00017Cr 2  29 0F          and #%00001111  ; Send low 4 bits
00017Er 2  09 10          ora #RS         ; Set RS
000180r 2  8D 01 48       sta PORTA_3
000183r 2  09 40          ora #E          ; Set E bit to send instruction
000185r 2  8D 01 48       sta PORTA_3
000188r 2  49 40          eor #E          ; Clear E bit
00018Ar 2  8D 01 48       sta PORTA_3
00018Dr 2  60             rts
00018Er 2               
00018Er 2               
00018Er 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00018Er 2               ;;
00018Er 2               ;;        PRINT Characters on LCD - an ASCII value in Accumulator
00018Er 2               ;;        is printed on the display
00018Er 2               ;;
00018Er 2               
00018Er 2               print_char:
00018Er 2  20 rr rr       jsr lcd_wait
000191r 2  48             pha
000192r 2  4A             lsr
000193r 2  4A             lsr
000194r 2  4A             lsr
000195r 2  4A             lsr             ; Send high 4 bits
000196r 2  09 10          ora #RS         ; Set RS
000198r 2  8D 00 60       sta PORTB_1
00019Br 2  09 40          ora #E          ; Set E bit to send instruction
00019Dr 2  8D 00 60       sta PORTB_1
0001A0r 2  49 40          eor #E          ; Clear E bit
0001A2r 2  8D 00 60       sta PORTB_1
0001A5r 2  68             pla
0001A6r 2  29 0F          and #%00001111  ; Send low 4 bits
0001A8r 2  09 10          ora #RS         ; Set RS
0001AAr 2  8D 00 60       sta PORTB_1
0001ADr 2  09 40          ora #E          ; Set E bit to send instruction
0001AFr 2  8D 00 60       sta PORTB_1
0001B2r 2  49 40          eor #E          ; Clear E bit
0001B4r 2  8D 00 60       sta PORTB_1
0001B7r 2  60             rts
0001B8r 2               
0001B8r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001B8r 2               ;;
0001B8r 2               ;;            print on line 1 or line 2 of LCD 1 or 2
0001B8r 2               ;;
0001B8r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001B8r 2               
0001B8r 2               
0001B8r 2               
0001B8r 2               print1:
0001B8r 2  20 rr rr       jsr lcd_line_1
0001BBr 2  A0 00          ldy #0
0001BDr 2  4C rr rr       jmp line
0001C0r 2               print2:
0001C0r 2  20 rr rr       jsr lcd_line_2
0001C3r 2  A0 00          ldy #0
0001C5r 2  4C rr rr       jmp line
0001C8r 2               print3:
0001C8r 2  20 rr rr       jsr lcd_line_3
0001CBr 2  A0 00          ldy #0
0001CDr 2  4C rr rr       jmp line
0001D0r 2               print4:
0001D0r 2  20 rr rr       jsr lcd_line_4
0001D3r 2  A0 00          ldy #0
0001D5r 2  4C rr rr       jmp line
0001D8r 2               
0001D8r 2               print2_2:
0001D8r 2  20 rr rr       jsr lcd_2_line_2
0001DBr 2  A0 00          ldy #0
0001DDr 2  4C rr rr       jmp line2
0001E0r 2               
0001E0r 2               line:
0001E0r 2  B1 rr          lda (MESSAGE_POINTER),y
0001E2r 2  F0 07          beq @exit
0001E4r 2  20 rr rr       jsr print_char
0001E7r 2  C8             iny
0001E8r 2  4C rr rr       jmp line
0001EBr 2               @exit:
0001EBr 2  60             rts
0001ECr 2               
0001ECr 2               line2:
0001ECr 2  B1 rr          lda (MESSAGE_POINTER),y
0001EEr 2  F0 07          beq @exit
0001F0r 2  20 rr rr       jsr print_2_char
0001F3r 2  C8             iny
0001F4r 2  4C rr rr       jmp line2
0001F7r 2               @exit:
0001F7r 2  60             rts
0001F8r 2               
0001F8r 2               
0001F8r 2               
0001F8r 1               .include "../includes/getkey.inc"
0001F8r 2               
0001F8r 2                 .code
000040r 2               
000040r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000040r 2               ;;
000040r 2               ;;
000040r 2               ;;      READ THE 4x4 keypad using  VIA_1 PORTA
000040r 2               ;;
000040r 2               ;;      Accumulator holds the ASCII value of the pressed key when it returns
000040r 2               ;;
000040r 2               
000040r 2               get_key:
000040r 2               readKeypad:
000040r 2  A2 04          ldx #$04        ; Row 4 - counting down
000042r 2  A0 80          ldy #%10000000  ;
000044r 2               ScanRow:
000044r 2  8C 01 60       sty PORTA_1
000047r 2  AD 01 60       lda PORTA_1
00004Ar 2  29 0F          and #$0F  ; mask off keypad input - only low 4 (keypad column) bits are read
00004Cr 2  C9 00          cmp #$00
00004Er 2  D0 0B          bne Row_Found   ; non-zero means a row output has been connected via a switch to a column input
000050r 2  CA             dex             ; zero means it hasn't been found, so check next row down
000051r 2  98             tya
000052r 2  4A             lsr
000053r 2  A8             tay
000054r 2  C9 08          cmp #%00001000
000056r 2  D0 EC          bne ScanRow
000058r 2  A9 FF          lda #$ff
00005Ar 2  60             rts
00005Br 2               Row_Found:
00005Br 2  8E rr rr       stx TEMP ; store row
00005Er 2  A0 FF          ldy #$ff
000060r 2               FindCol:
000060r 2  C8             iny
000061r 2  4A             lsr
000062r 2  90 FC          bcc FindCol
000064r 2  98             tya
000065r 2  0A             asl
000066r 2  0A             asl  ; col * 4
000067r 2  18             clc
000068r 2  6D rr rr       adc TEMP ; add row
00006Br 2  AA             tax
00006Cr 2  BD rr rr       lda keypad_array,x
00006Fr 2  60             rts
000070r 2               
000070r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000070r 2               ;;
000070r 2               ;;       key = <INDEX> ; pressing a key returns a 4-bit number
000070r 2               ;;       calculated as (Column * 4 ) + Row, in the range
000070r 2               ;;       1 - 16 which acts as an index to a lookup-table.
000070r 2               ;;       The lookup table returns a byte value equal to the key's
000070r 2               ;;       numerical value
000070r 2               ;;       e.g.
000070r 2               ;;       button 1 returns byte $01 / 00000001
000070r 2               ;;       button F returns byte $0f / 00001111
000070r 2               ;;    ____________________________________________________
000070r 2               ;;   |     1 = <16> | 2 = <12> |    3 = <8> | A(10) = <4> |
000070r 2               ;;   |______________|__________|____________|_____________|
000070r 2               ;;   |     4 = <15> | 5 = <11> |    6 = <7> | B(11) = <3> |
000070r 2               ;;   |______________|__________|____________|_____________|
000070r 2               ;;   |     7 = <14> | 8 = <10> |    9 = <6> | C(12) = <2> |
000070r 2               ;;   |______________|__________|____________|_____________|
000070r 2               ;;   | E(14) = <13> | 0 = <9>  | F(15)= <5> | D(13) = <1> |
000070r 2               ;;   |______________|__________|____________|_____________|
000070r 2               ;;
000070r 2               ;;            Button  ..   D    C    B    A    F    9    6    3    0    8    5    2    E    7    4    1
000070r 2               ;;            <INDEX> 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16
000070r 2  00 0D 0C 0B  keypad_array: .byte $00, $0D, $0C, $0B, $0A, $0F, $09, $06, $03, $00, $08, $05, $02, $0E, $07, $04, $01
000074r 2  0A 0F 09 06  
000078r 2  03 00 08 05  
000081r 2               
000081r 2               
000081r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000081r 2               ;;
000081r 2               ;;  set ROW keypad outputs high as a source for triggering interrupt when a key is pressed
000081r 2               ;;
000081r 2               ;;
000081r 2               scan:
000081r 2  A0 F0          ldy #%11110000
000083r 2  8C 01 60       sty PORTA_1
000086r 2  60             rts
000087r 2               
000087r 2               
000087r 1               .include "../includes/functions.inc"
000087r 2               
000087r 2               
000087r 2                 .code
000087r 2               
000087r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000087r 2               ;;
000087r 2               ;;        Use T1 Timer in free-run mode to put pulse
000087r 2               ;;        train on PB7 at rate determined by
000087r 2               ;;        the chosen delay. Tone output is enabled by
000087r 2               ;;        setting bit7 of ACR register and disabled by
000087r 2               ;;        resetting it. This should really be done by or'ing
000087r 2               ;;        %10000000 with the current value of ACR, to preserve
000087r 2               ;;        the other bit-values. At the moment it's just a two
000087r 2               ;;        state setting: 11000000 = Tone On, 01000000 = Tone off.
000087r 2               ;;        bit6 of ACR sets T1 in free-run repeat mode and stays set
000087r 2               ;;
000087r 2               
000087r 2               ;; T1 Timer values:
000087r 2               
000087r 2               ;; (Phi2 / (2 * f) ) - 2
000087r 2               ;;
000087r 2               ;;  Phi2 = 1MHz = 1,000,000
000087r 2               ;;
000087r 2               ;;    f  = count => Hex    => Counter Low : Counter High
000087r 2               ;; =========================================================
000087r 2               ;;  50Hz = 9998d => $270E  => T1CL = $0E  : T1CH = $27
000087r 2               ;; 100Hz = 4998d => $1386  => T1CL = $86  : T1CH = $13
000087r 2               ;; 200Hz = 2498d => $09C2  => T1CL = $C2  : T1CH = $09
000087r 2               ;; 500Hz =  998d => $03E6  => T1CL = $E6  : T1CH = $03
000087r 2               ;; 800Hz =  623d => $026F  => T1CL = $6F  : T1CH = $02
000087r 2               ;; 1kHz  =  498d => $01F2  => T1CL = $F2  : T1CH = $01
000087r 2               ;; 2kHz  =  248d => $00F8  => T1CL = $F8  : T1CH = $00
000087r 2               ;;
000087r 2               ;; USING VIA_2 for the beep Timer/output
000087r 2               ;;
000087r 2               ;; DO NOT CONFIGURE T1 TIMER settings in ioports.inc
000087r 2               ;; They are set here whenever the beep is needed
000087r 2               ;;
000087r 2               
000087r 2               count_50 = $270E
000087r 2               count_100 = $1386
000087r 2               count_200 = $09C2
000087r 2               count_500 = $03E6
000087r 2               count_800 = $026F
000087r 2               count_1k = $01F2
000087r 2               count_2k = $00F8
000087r 2               
000087r 2               ;;               50Hz, 100Hz, 200Hz, 500Hz, 800Hz, 1kHz, 2kHz
000087r 2  0E 27 86 13  beepList: .word $270E, $1386, $09C2, $03E6, $026F, $01F2, $00F8
00008Br 2  C2 09 E6 03  
00008Fr 2  6F 02 F2 01  
000095r 2               
000095r 2               ;; Load A with the required index and call beep_from_list
000095r 2               
000095r 2               beep_from_list:
000095r 2               
000095r 2  0A             asl
000096r 2  A8             tay
000097r 2  B9 rr rr       lda beepList,y
00009Ar 2  8D 04 50       sta T1CL_2
00009Dr 2  C8             iny
00009Er 2  B9 rr rr       lda beepList,y
0000A1r 2  8D 05 50       sta T1CH_2
0000A4r 2               
0000A4r 2  A9 C0          lda #%11000000
0000A6r 2  8D 0B 50       sta ACR_2
0000A9r 2                 ;jsr beep_on
0000A9r 2                 ; CONSIDER Change:
0000A9r 2                 ;
0000A9r 2                 ; jsr beep_on
0000A9r 2                 ; rts
0000A9r 2                 ;
0000A9r 2                 ; becomes
0000A9r 2                 ;
0000A9r 2  4C rr rr       jmp beep_on
0000ACr 2                 ;rts
0000ACr 2               
0000ACr 2               beep:
0000ACr 2               
0000ACr 2               ;; 800Hz keybeep
0000ACr 2               
0000ACr 2  A9 6F          lda #<count_800
0000AEr 2  8D 04 50       sta T1CL_2
0000B1r 2  A9 02          lda #>count_800
0000B3r 2  8D 05 50       sta T1CH_2
0000B6r 2                 ;jsr beep_on
0000B6r 2                 ; CONSIDER Change:
0000B6r 2                 ;
0000B6r 2                 ; jsr beep_on
0000B6r 2                 ; rts
0000B6r 2                 ;
0000B6r 2                 ; becomes
0000B6r 2                 ;
0000B6r 2  4C rr rr       jmp beep_on
0000B9r 2               
0000B9r 2                 ;rts
0000B9r 2               
0000B9r 2               beep_on:
0000B9r 2  A5 rr            lda TICKS
0000BBr 2  85 rr            sta BEEP_ON_TIME
0000BDr 2  A9 C0            lda #%11000000
0000BFr 2  8D 0B 50         sta ACR_2
0000C2r 2  F7 rr            smb7 FLAGS
0000C4r 2  60               rts
0000C5r 2               
0000C5r 2               beep_off:
0000C5r 2  77 rr          rmb7 FLAGS
0000C7r 2  A9 40          lda #%01000000
0000C9r 2  8D 0B 50       sta ACR_2
0000CCr 2  A9 0A          lda #$0A              ; restore standard 0.1s Beep length in case the caller had set a
0000CEr 2  85 rr          sta BEEP_DELAY_TIME   ; new BEEP_DELAY_TIME
0000D0r 2               
0000D0r 2  60             rts
0000D1r 2               
0000D1r 2               beep_from_pointer:  ; put the 2 bytes for the required count into BEEP_POINTER and BEEP_POINTER + 1 and then
0000D1r 2                                   ; call beep_from_pointer
0000D1r 2               
0000D1r 2               
0000D1r 2  A5 rr          lda BEEP_POINTER
0000D3r 2  8D 04 50       sta T1CL_2
0000D6r 2  A5 rr          lda BEEP_POINTER + 1
0000D8r 2  8D 05 50       sta T1CH_2
0000DBr 2               
0000DBr 2                 ;jsr beep_on
0000DBr 2                 ; CONSIDER Change:
0000DBr 2                 ;
0000DBr 2                 ; jsr beep_on
0000DBr 2                 ; rts
0000DBr 2                 ;
0000DBr 2                 ; becomes
0000DBr 2                 ;
0000DBr 2  4C rr rr       jmp beep_on
0000DEr 2               
0000DEr 2                 ;rts
0000DEr 2               
0000DEr 2               beep2: ; high/low beep for boot-up success notification
0000DEr 2               
0000DEr 2               ; 1kHz
0000DEr 2  A9 F2          lda #<count_1k
0000E0r 2  8D 04 50       sta T1CL_2
0000E3r 2  A9 01          lda #>count_1k
0000E5r 2  8D 05 50       sta T1CH_2
0000E8r 2               
0000E8r 2  A9 C0          lda #%11000000
0000EAr 2  8D 0B 50       sta ACR_2
0000EDr 2               
0000EDr 2  20 rr rr       jsr beep_delay
0000F0r 2               
0000F0r 2               ; 800Hz
0000F0r 2  A9 6F          lda #<count_800
0000F2r 2  8D 04 50       sta T1CL_2
0000F5r 2  A9 02          lda #>count_800
0000F7r 2  8D 05 50       sta T1CH_2
0000FAr 2               
0000FAr 2  A9 40          lda #%01000000
0000FCr 2  8D 0B 50       sta ACR_2
0000FFr 2  60             rts
000100r 2               
000100r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000100r 2               ;;
000100r 2               ;;      basic loop delay to make the beep
000100r 2               ;;
000100r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000100r 2               
000100r 2               beep_delay:
000100r 2  A2 FF          ldx #$ff
000102r 2  A0 38          ldy #$38  ; <= set here to adjust the beep length
000104r 2               @loop:
000104r 2  EA             nop
000105r 2  CA             dex
000106r 2  D0 FC          bne @loop
000108r 2  88             dey
000109r 2  D0 F9          bne @loop
00010Br 2  60             rts
00010Cr 2               
00010Cr 2               
00010Cr 2               
00010Cr 2               
00010Cr 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00010Cr 2               ;;
00010Cr 2               ;;          convert an 8-bit binary number from Accumulator, in range 00000000 -> 11111111 ($00 to $FF)
00010Cr 2               ;;          to its HEX number encode as ASCII -  using a simple lookup table. Store each digit in RAM. Accumulator
00010Cr 2               ;;          holds the last/low digit on return.
00010Cr 2               ;;
00010Cr 2               
00010Cr 2               
00010Cr 2               bintohex:
00010Cr 2  48             pha
00010Dr 2  4A             lsr
00010Er 2  4A             lsr
00010Fr 2  4A             lsr
000110r 2  4A             lsr
000111r 2  AA             tax
000112r 2  BD rr rr       lda hexascii,x
000115r 2  8D rr rr       sta HI_DIGIT
000118r 2  68             pla
000119r 2  29 0F          and #$0f
00011Br 2  AA             tax
00011Cr 2  BD rr rr       lda hexascii,x
00011Fr 2  8D rr rr       sta LO_DIGIT
000122r 2  60             rts
000123r 2               
000123r 2  30 31 32 33  hexascii: .byte "0123456789ABCDEF"
000127r 2  34 35 36 37  
00012Br 2  38 39 41 42  
000133r 2               
000133r 2               
000133r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000133r 2               ;;
000133r 2               ;;    convert a binary (hex) value in Accumulator into
000133r 2               ;;    its ASCII equivalent character in decimal 0-99 and print it
000133r 2               ;;    this converts hex/binary numbers from the RTC into human readable
000133r 2               ;;    decimal for display on clock
000133r 2               
000133r 2               
000133r 2               bintoascii:
000133r 2               
000133r 2  C9 0A          cmp #10
000135r 2  30 0F          bmi single_figure
000137r 2  0A             asl
000138r 2  AA             tax
000139r 2  BD rr rr       lda binascii,x
00013Cr 2  20 rr rr       jsr print_char
00013Fr 2               
00013Fr 2  E8             inx
000140r 2               
000140r 2  BD rr rr       lda binascii,x
000143r 2                 ;jsr print_char
000143r 2                 ; CONSIDER CHANGE
000143r 2  4C rr rr       jmp print_char
000146r 2                 ;rts
000146r 2               
000146r 2               single_figure:
000146r 2  0A             asl
000147r 2  AA             tax
000148r 2  E8             inx
000149r 2  BD rr rr       lda binascii,x
00014Cr 2                 ;jsr print_char
00014Cr 2                 ;CONSIDER CHANGE
00014Cr 2  4C rr rr       jmp print_char
00014Fr 2                 ;rts
00014Fr 2               
00014Fr 2               bintoascii_2:
00014Fr 2               
00014Fr 2  C9 0A          cmp #10
000151r 2  30 0F          bmi single_figure_2
000153r 2  0A             asl
000154r 2  AA             tax
000155r 2  BD rr rr       lda binascii,x
000158r 2  20 rr rr       jsr print_2_char
00015Br 2               
00015Br 2  E8             inx
00015Cr 2               
00015Cr 2  BD rr rr       lda binascii,x
00015Fr 2                 ;jsr print_2_char
00015Fr 2                 ; CONSIDER CHANGE
00015Fr 2  4C rr rr       jmp print_2_char
000162r 2                 ;rts
000162r 2               
000162r 2               single_figure_2:
000162r 2  0A             asl
000163r 2  AA             tax
000164r 2  E8             inx
000165r 2  BD rr rr       lda binascii,x
000168r 2                 ;jsr print_2_char
000168r 2                 ; CONSIDER CHANGE
000168r 2  4C rr rr       jmp print_2_char
00016Br 2                 ;rts
00016Br 2               
00016Br 2               
00016Br 2  30 30 30 31  binascii: .byte "00010203040506070809"
00016Fr 2  30 32 30 33  
000173r 2  30 34 30 35  
00017Fr 2  31 30 31 31            .byte "10111213141516171819"
000183r 2  31 32 31 33  
000187r 2  31 34 31 35  
000193r 2  32 30 32 31            .byte "20212223242526272829"
000197r 2  32 32 32 33  
00019Br 2  32 34 32 35  
0001A7r 2  33 30 33 31            .byte "30313233343536373839"
0001ABr 2  33 32 33 33  
0001AFr 2  33 34 33 35  
0001BBr 2  34 30 34 31            .byte "40414243444546474849"
0001BFr 2  34 32 34 33  
0001C3r 2  34 34 34 35  
0001CFr 2  35 30 35 31            .byte "50515253545556575859"
0001D3r 2  35 32 35 33  
0001D7r 2  35 34 35 35  
0001E3r 2  36 30 36 31            .byte "60616263646566676869"
0001E7r 2  36 32 36 33  
0001EBr 2  36 34 36 35  
0001F7r 2  37 30 37 31            .byte "70717273747576777879"
0001FBr 2  37 32 37 33  
0001FFr 2  37 34 37 35  
00020Br 2  38 30 38 31            .byte "80818283848586878889"
00020Fr 2  38 32 38 33  
000213r 2  38 34 38 35  
00021Fr 2  39 30 39 31            .byte "90919293949596979899"
000223r 2  39 32 39 33  
000227r 2  39 34 39 35  
000233r 2               
000233r 2               
000233r 2               
000233r 2               
000233r 2               
000233r 1               .include "../includes/rtc.inc"
000233r 2               
000233r 2               
000233r 2               
000233r 2               
000233r 2                 .code
000233r 2               
000233r 2               
000233r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000233r 2               ;;
000233r 2               ;;                          RTC / Jiffy Tick
000233r 2               ;;
000233r 2               
000233r 2               
000233r 2               
000233r 2               rtc:
000233r 2               
000233r 2               
000233r 2               ;;  RTC stores ticks at 10ms intervals into a 4-byte (32 bit) value
000233r 2               ;;
000233r 2               ;;  as each byte rolls over the next one is incremented
000233r 2               ;;  on a tick that doesn't roll over the TIME OF DAY
000233r 2               ;;  is updated
000233r 2               
000233r 2  E6 rr          inc TICKS
000235r 2  D0 0A          bne inc_MET
000237r 2  E6 rr          inc TICKS + 1
000239r 2  D0 06          bne inc_MET
00023Br 2  E6 rr          inc TICKS + 2
00023Dr 2  D0 02          bne inc_MET
00023Fr 2  E6 rr          inc TICKS + 3
000241r 2               
000241r 2               ;;
000241r 2               ;;  Every time it's called we increment the "hundredths of a second" byte
000241r 2               ;;
000241r 2               ;;  When there's been 100 x 10ms (i.e. 1 second) we increment the seconds
000241r 2               ;;
000241r 2               ;; We keep the times in single digits, SECONDS, TEN_SECONDS, MINUTES,
000241r 2               ;; TEN_MINUTES etc.... to make it easy to display
000241r 2               ;; The values are stored in RAM as binary values, and need to be converted to
000241r 2               ;; ASCII characters when they are displayed on LCD
000241r 2               ;;
000241r 2               ;;  The basis of this routine comes from http://wilsonminesco.com/6502interrupts/#2.1
000241r 2               ;;
000241r 2               inc_MET:
000241r 2  E6 rr          inc CENTISEC
000243r 2  A5 rr          lda CENTISEC
000245r 2  C9 64          cmp #100
000247r 2  30 40          bmi end_MET
000249r 2  64 rr          stz CENTISEC
00024Br 2               
00024Br 2  E6 rr          inc SECONDS
00024Dr 2  A5 rr          lda SECONDS
00024Fr 2  C9 0A          cmp #10
000251r 2  30 36          bmi end_MET
000253r 2  64 rr          stz SECONDS
000255r 2  E6 rr          inc TEN_SECONDS
000257r 2               
000257r 2  A5 rr          lda TEN_SECONDS
000259r 2  C9 06          cmp #6
00025Br 2  30 2C          bmi end_MET
00025Dr 2  64 rr          stz TEN_SECONDS
00025Fr 2               
00025Fr 2  E6 rr          inc MINUTES
000261r 2  A5 rr          lda MINUTES
000263r 2  C9 0A          cmp #10
000265r 2  30 22          bmi end_MET
000267r 2  64 rr          stz MINUTES
000269r 2               
000269r 2  E6 rr          inc TEN_MINUTES
00026Br 2  A5 rr          lda TEN_MINUTES
00026Dr 2  C9 06          cmp #6
00026Fr 2  30 18          bmi end_MET
000271r 2  64 rr          stz TEN_MINUTES
000273r 2               
000273r 2  E6 rr          inc HRS
000275r 2  A5 rr          lda HRS
000277r 2  C9 0A          cmp #10
000279r 2  30 0E          bmi end_MET
00027Br 2  64 rr          stz HRS
00027Dr 2               
00027Dr 2  E6 rr          inc TEN_HRS
00027Fr 2  A5 rr          lda TEN_HRS
000281r 2  C9 0A          cmp #10
000283r 2  30 04          bmi end_MET
000285r 2  64 rr          stz TEN_HRS
000287r 2               
000287r 2  E6 rr          inc HUNDRED_HRS
000289r 2               
000289r 2               end_MET:
000289r 2  60             rts
00028Ar 2               
00028Ar 2               
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00028Ar 1               ;;
00028Ar 1               ;;         START HERE
00028Ar 1               ;;
00028Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00028Ar 1               
00028Ar 1               .code
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               
00028Ar 1               reset:
00028Ar 1               
00028Ar 1               
00028Ar 1  A2 FF          ldx #$ff
00028Cr 1  9A             txs
00028Dr 1  58             cli      ; interrupts ON
00028Er 1               
00028Er 1                 ;; IOPORTS
00028Er 1  20 rr rr       jsr via_1_init ; set-up VIA_1 for LCD/Keypad
000291r 1  20 rr rr       jsr via_2_init ; set-up VIA_2 for general I/O
000294r 1  20 rr rr       jsr via_3_init ; set-up VIA_3 for general I/O
000297r 1               
000297r 1                 ;; LCD
000297r 1  20 rr rr       jsr lcd_start ; set-up various features of lcd
00029Ar 1  20 rr rr       jsr lcd_2_start ; set-up various features of lcd
00029Dr 1               
00029Dr 1               
00029Dr 1               init_variables:
00029Dr 1               
00029Dr 1  64 rr          stz TICKS
00029Fr 1  64 rr          stz TICKS + 1
0002A1r 1  64 rr          stz TICKS + 2
0002A3r 1  64 rr          stz TICKS + 3
0002A5r 1  64 rr          stz DUMP_POINTER
0002A7r 1  64 rr          stz DUMP_POINTER + 1
0002A9r 1  64 rr          stz MESSAGE_POINTER
0002ABr 1  64 rr          stz MESSAGE_POINTER + 1
0002ADr 1  A9 3F          lda #$3F
0002AFr 1  85 rr          sta BEEP_POINTER
0002B1r 1  A9 03          lda #$03
0002B3r 1  85 rr          sta BEEP_POINTER + 1
0002B5r 1  A9 0A          lda #$0A              ; standard BEEP = 10 ticks, ~100mS
0002B7r 1  85 rr          sta BEEP_DELAY_TIME
0002B9r 1  64 rr          stz TOGGLE_TIME
0002BBr 1  64 rr          stz CLOCK_LAST
0002BDr 1  64 rr          stz LED2_LAST
0002BFr 1  64 rr          stz LED3_LAST
0002C1r 1  64 rr          stz CENTISEC
0002C3r 1  64 rr          stz FLAGS
0002C5r 1  64 rr          stz SECONDS
0002C7r 1  64 rr          stz TEN_SECONDS
0002C9r 1  64 rr          stz MINUTES
0002CBr 1  64 rr          stz HRS
0002CDr 1  64 rr          stz TEN_HRS
0002CFr 1  64 rr          stz TEN_MINUTES
0002D1r 1  64 rr          stz HUNDRED_HRS
0002D3r 1  9C rr rr       stz TEMP
0002D6r 1  9C rr rr       stz TEMP2
0002D9r 1  9C rr rr       stz TENS
0002DCr 1  64 rr          stz MEM_POINTER
0002DEr 1  64 rr          stz MEM_POINTER + 1
0002E0r 1  9C rr rr       stz HI_DIGIT
0002E3r 1  9C rr rr       stz LO_DIGIT
0002E6r 1  A9 10          lda #$10
0002E8r 1  85 rr          sta LAST_KIT
0002EAr 1               
0002EAr 1  A9 rr          lda #<title
0002ECr 1  85 rr          sta MESSAGE_POINTER
0002EEr 1  A9 rr          lda #>title
0002F0r 1  85 rr          sta MESSAGE_POINTER + 1
0002F2r 1  20 rr rr       jsr print1
0002F5r 1               
0002F5r 1               
0002F5r 1               memory_test:
0002F5r 1               
0002F5r 1  A9 rr          lda #<mem_start_msg
0002F7r 1  85 rr          sta MESSAGE_POINTER
0002F9r 1  A9 rr          lda #>mem_start_msg
0002FBr 1  85 rr          sta MESSAGE_POINTER + 1
0002FDr 1  20 rr rr       jsr print2
000300r 1               
000300r 1               ;; test then clear RAM between
000300r 1               ;; $0200 - $3FFF - avoids the ZP and STACK areas
000300r 1               
000300r 1  A9 02          lda #$02            ; start at $0200
000302r 1  85 rr          sta MEM_POINTER + 1
000304r 1  A0 00          ldy #$00
000306r 1               loop_ram:
000306r 1  A9 AA          lda #$AA              ; test with 10101010
000308r 1  91 rr          sta (MEM_POINTER),y   ; write test value to RAM
00030Ar 1  A9 FF          lda #$FF              ; remove test value from A
00030Cr 1  B1 rr          lda (MEM_POINTER),y   ; read RAM contents into A
00030Er 1  C9 AA          cmp #$AA              ; compare to expected value
000310r 1  D0 4E          bne mem_fail_1
000312r 1  A9 55          lda #$55              ; repeat test with 01010101
000314r 1  91 rr          sta (MEM_POINTER),y
000316r 1  A9 FF          lda #$FF
000318r 1  B1 rr          lda (MEM_POINTER),y
00031Ar 1  C9 55          cmp #$55
00031Cr 1  D0 59          bne mem_fail_2
00031Er 1  A9 00          lda #$00              ; clear RAM to all zeros
000320r 1  91 rr          sta (MEM_POINTER),y
000322r 1  C8             iny
000323r 1  F0 03          beq next_page
000325r 1  4C rr rr       jmp loop_ram
000328r 1               next_page:
000328r 1  A5 rr          lda MEM_POINTER + 1
00032Ar 1  1A             inc
00032Br 1  C9 40          cmp #$40
00032Dr 1  F0 05          beq done_ram
00032Fr 1  85 rr          sta MEM_POINTER + 1
000331r 1  4C rr rr       jmp loop_ram
000334r 1               
000334r 1               done_ram:
000334r 1               
000334r 1  20 rr rr       jsr beep2
000337r 1  A9 rr          lda #<mem_pass_msg
000339r 1  85 rr          sta MESSAGE_POINTER
00033Br 1  A9 rr          lda #>mem_pass_msg
00033Dr 1  85 rr          sta MESSAGE_POINTER + 1
00033Fr 1                 ;jsr lcd_clear
00033Fr 1  20 rr rr       jsr print3
000342r 1  D7 rr          smb5 FLAGS
000344r 1  A9 rr          lda #<start_msg
000346r 1  85 rr          sta MESSAGE_POINTER
000348r 1  A9 rr          lda #>start_msg
00034Ar 1  85 rr          sta MESSAGE_POINTER + 1
00034Cr 1  20 rr rr       jsr print4
00034Fr 1  20 rr rr       jsr lcd_2_clear
000352r 1  A9 rr          lda #<emt
000354r 1  85 rr          sta MESSAGE_POINTER
000356r 1  A9 rr          lda #>emt
000358r 1  85 rr          sta MESSAGE_POINTER + 1
00035Ar 1  20 rr rr       jsr print2_2
00035Dr 1  4C rr rr       jmp user_ram
000360r 1               
000360r 1               mem_fail_1:
000360r 1  20 rr rr       jsr beep
000363r 1  20 rr rr       jsr beep2
000366r 1  20 rr rr       jsr beep
000369r 1  A9 rr          lda #<mem_fail_msg_1
00036Br 1  85 rr          sta MESSAGE_POINTER
00036Dr 1  A9 rr          lda #>mem_fail_msg_1
00036Fr 1  85 rr          sta MESSAGE_POINTER + 1
000371r 1  20 rr rr       jsr print3
000374r 1  4C rr rr       jmp loop
000377r 1               
000377r 1               mem_fail_2:
000377r 1  20 rr rr       jsr beep
00037Ar 1  20 rr rr       jsr beep2
00037Dr 1  20 rr rr       jsr beep
000380r 1  A9 rr          lda #<mem_fail_msg_2
000382r 1  85 rr          sta MESSAGE_POINTER
000384r 1  A9 rr          lda #>mem_fail_msg_2
000386r 1  85 rr          sta MESSAGE_POINTER + 1
000388r 1  20 rr rr       jsr print3
00038Br 1  4C rr rr       jmp loop
00038Er 1               
00038Er 1               
00038Er 1               
00038Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00038Er 1               ;;
00038Er 1               ;;  load the User RAM area $3F00 with the bytes
00038Er 1               ;;  set in "userProg" - currently a small routine that
00038Er 1               ;;  changed the contents of MESSAGE_POINTER (+1) to point
00038Er 1               ;;  at $2000 instead. Then a string "userPrompt" is stored
00038Er 1               ;;  at $2000. Running the user sub-routine (<shift>5) will now show
00038Er 1               ;;  the "userPrompt" string on line4 of the main LCD
00038Er 1               ;;  The user prog at $3F00 can be edited at will - it also has the
00038Er 1               ;;  location of "print4" automatically inserted.
00038Er 1               ;;
00038Er 1               
00038Er 1               ;; Put a sample program into "User Ram" at $3F00
00038Er 1               user_ram:
00038Er 1  A0 00          ldy #$00
000390r 1               @loop:
000390r 1  B9 rr rr       lda userProg,y
000393r 1  F0 07          beq @exit
000395r 1  99 00 3F       sta $3F00,y
000398r 1  C8             iny
000399r 1  4C rr rr       jmp @loop
00039Cr 1               @exit:
00039Cr 1               
00039Cr 1               ;; Put a sample text string in "User Text" @ $2000
00039Cr 1               prompt:
00039Cr 1  A0 00          ldy #$00
00039Er 1               @loop:
00039Er 1  B9 rr rr       lda userPrompt,y
0003A1r 1  F0 07          beq @exit
0003A3r 1  99 00 20       sta $2000,y
0003A6r 1  C8             iny
0003A7r 1  4C rr rr       jmp @loop
0003AAr 1               @exit:
0003AAr 1               
0003AAr 1               
0003AAr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003AAr 1               ;;
0003AAr 1               ;;                 Main Loop
0003AAr 1               ;;
0003AAr 1               
0003AAr 1               
0003AAr 1               loop:
0003AAr 1               
0003AAr 1  CB             wai
0003ABr 1  20 rr rr       jsr check_flags
0003AEr 1  20 rr rr       jsr clock_via_3
0003B1r 1  4C rr rr       jmp loop
0003B4r 1               
0003B4r 1               
0003B4r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003B4r 1               ;;
0003B4r 1               ;;                  FUNCTIONS
0003B4r 1               ;;
0003B4r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003B4r 1               
0003B4r 1               
0003B4r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003B4r 1               ;;
0003B4r 1               ;;     FLAGS - for control of background tasks
0003B4r 1               ;;
0003B4r 1               ;;   bit7   | bit6   | bit5   |  bit4 | bit3 | bit2 | bit1 | bit0
0003B4r 1               ;; =========|========|========|=======|======|======|======|===========
0003B4r 1               ;;   beep   |        | clock  |       |      | kitt |      | mem block
0003B4r 1               ;;   active |        | active |       |      | leds |      | update view
0003B4r 1               
0003B4r 1               
0003B4r 1               check_flags:
0003B4r 1               
0003B4r 1               flag_zero:
0003B4r 1  0F rr 03       bbr0 FLAGS, flag_two
0003B7r 1  20 rr rr       jsr update_block_address
0003BAr 1               flag_two:
0003BAr 1  2F rr 03       bbr2 FLAGS, flag_five
0003BDr 1  20 rr rr       jsr kit_led_via_2
0003C0r 1               flag_five:
0003C0r 1  5F rr 03       bbr5 FLAGS, flag_seven
0003C3r 1  20 rr rr       jsr clock_time
0003C6r 1               flag_seven:
0003C6r 1  7F rr 03       bbr7 FLAGS, flag_three
0003C9r 1  20 rr rr       jsr check_beep
0003CCr 1               flag_three:
0003CCr 1  60             rts
0003CDr 1               
0003CDr 1               ;;;;;;;;;;
0003CDr 1               ;;;;;;;;;;
0003CDr 1               ;;;
0003CDr 1               check_beep:
0003CDr 1  38             sec
0003CEr 1  A5 rr          lda TICKS
0003D0r 1  E5 rr          sbc BEEP_ON_TIME
0003D2r 1  C5 rr          cmp BEEP_DELAY_TIME
0003D4r 1  90 03          bcc @exit
0003D6r 1  20 rr rr       jsr beep_off
0003D9r 1               @exit:
0003D9r 1  60             rts
0003DAr 1               
0003DAr 1               kit_led_via_2:
0003DAr 1               
0003DAr 1  38             sec
0003DBr 1  A5 rr          lda TICKS
0003DDr 1  E5 rr          sbc LED3_LAST
0003DFr 1  C9 0A          cmp #10
0003E1r 1  90 15          bcc exit_kit_leds
0003E3r 1  A4 rr          ldy LAST_KIT
0003E5r 1  B9 rr rr       lda kitLeds,y
0003E8r 1  8D 01 50       sta PORTA_2
0003EBr 1  88             dey
0003ECr 1  D0 04          bne @exit
0003EEr 1  A0 10          ldy #$10
0003F0r 1  84 rr          sty LAST_KIT
0003F2r 1               @exit:
0003F2r 1  84 rr          sty LAST_KIT
0003F4r 1  A5 rr          lda TICKS
0003F6r 1  85 rr          sta LED3_LAST
0003F8r 1               exit_kit_leds:
0003F8r 1  60             rts
0003F9r 1               
0003F9r 1               clock_via_3:
0003F9r 1  38             sec
0003FAr 1  A5 rr          lda TICKS
0003FCr 1  E5 rr          sbc LED2_LAST
0003FEr 1  C9 64          cmp #100
000400r 1  90 0F          bcc exit_clock_via_3
000402r 1  A5 rr          lda TEN_SECONDS
000404r 1  0A             asl
000405r 1  0A             asl
000406r 1  0A             asl
000407r 1  0A             asl
000408r 1  05 rr          ora SECONDS
00040Ar 1  8D 00 48       sta PORTB_3
00040Dr 1               
00040Dr 1                 ;lda TEN_MINUTES
00040Dr 1                 ;asl
00040Dr 1                 ;asl
00040Dr 1                 ;asl
00040Dr 1                 ;asl
00040Dr 1                 ;ora MINUTES
00040Dr 1                 ;sta PORTB_2
00040Dr 1               
00040Dr 1               @exit:
00040Dr 1  A5 rr          lda TICKS
00040Fr 1  85 rr          sta LED2_LAST
000411r 1               exit_clock_via_3:
000411r 1  60             rts
000412r 1               
000412r 1               
000412r 1               update_block_address:
000412r 1  20 rr rr       jsr lcd_line_2
000415r 1  38             sec
000416r 1  A5 rr          lda TICKS
000418r 1  E5 rr          sbc TOGGLE_TIME
00041Ar 1  C9 64          cmp #$64
00041Cr 1  90 07          bcc @exit
00041Er 1  20 rr rr       jsr block_address
000421r 1  A5 rr          lda TICKS
000423r 1  85 rr          sta TOGGLE_TIME
000425r 1               @exit:
000425r 1  60             rts
000426r 1               
000426r 1               clock_time:
000426r 1  38             sec
000427r 1  A5 rr          lda TICKS
000429r 1  E5 rr          sbc CLOCK_LAST
00042Br 1  C9 32          cmp #50
00042Dr 1  90 3C          bcc @exit
00042Fr 1  20 rr rr       jsr lcd_2_cursor_off
000432r 1  20 rr rr       jsr lcd_2_line_1
000435r 1  A5 rr          lda HUNDRED_HRS
000437r 1  20 rr rr       jsr bintoascii_2
00043Ar 1  A5 rr          lda TEN_HRS
00043Cr 1  20 rr rr       jsr bintoascii_2
00043Fr 1  A5 rr          lda HRS
000441r 1  20 rr rr       jsr bintoascii_2
000444r 1  A9 3A          lda #':'
000446r 1  20 rr rr       jsr print_2_char
000449r 1  A5 rr          lda TEN_MINUTES
00044Br 1  20 rr rr       jsr bintoascii_2
00044Er 1  A5 rr          lda MINUTES
000450r 1  20 rr rr       jsr bintoascii_2
000453r 1  A9 3A          lda #':'
000455r 1  20 rr rr       jsr print_2_char
000458r 1  A5 rr          lda TEN_SECONDS
00045Ar 1  20 rr rr       jsr bintoascii_2
00045Dr 1  A5 rr          lda SECONDS
00045Fr 1  20 rr rr       jsr bintoascii_2
000462r 1  A9 20          lda #' '
000464r 1  20 rr rr       jsr print_2_char
000467r 1  A5 rr          lda TICKS
000469r 1  85 rr          sta CLOCK_LAST
00046Br 1               @exit:
00046Br 1  60             rts
00046Cr 1               
00046Cr 1               
00046Cr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00046Cr 1               ;;
00046Cr 1               ;;      update screen when new memory location is selected
00046Cr 1               ;;
00046Cr 1               ;;
00046Cr 1               new_address:
00046Cr 1  20 rr rr       jsr lcd_clear
00046Fr 1  20 rr rr       jsr lcd_cursor_on
000472r 1  A9 rr          lda #<new_address_msg
000474r 1  85 rr          sta MESSAGE_POINTER
000476r 1  A9 rr          lda #>new_address_msg
000478r 1  85 rr          sta MESSAGE_POINTER + 1
00047Ar 1  20 rr rr       jsr print1
00047Dr 1  20 rr rr       jsr lcd_line_2
000480r 1               print_address:
000480r 1  A9 24          lda #'$'
000482r 1  20 rr rr       jsr print_char
000485r 1  A5 rr          lda DUMP_POINTER + 1
000487r 1  20 rr rr       jsr bintohex
00048Ar 1  AD rr rr       lda HI_DIGIT
00048Dr 1  20 rr rr       jsr print_char
000490r 1  AD rr rr       lda LO_DIGIT
000493r 1  20 rr rr       jsr print_char
000496r 1  A5 rr          lda DUMP_POINTER
000498r 1  20 rr rr       jsr bintohex
00049Br 1  AD rr rr       lda HI_DIGIT
00049Er 1  20 rr rr       jsr print_char
0004A1r 1  AD rr rr       lda LO_DIGIT
0004A4r 1  20 rr rr       jsr print_char
0004A7r 1  A9 20          lda #' '
0004A9r 1  20 rr rr       jsr print_char
0004ACr 1  A0 00          ldy #$00
0004AEr 1  B1 rr          lda (DUMP_POINTER),y
0004B0r 1  20 rr rr       jsr bintohex
0004B3r 1  AD rr rr       lda HI_DIGIT
0004B6r 1  20 rr rr       jsr print_char
0004B9r 1  AD rr rr       lda LO_DIGIT
0004BCr 1  20 rr rr       jsr print_char
0004BFr 1  A9 20          lda #' '
0004C1r 1  20 rr rr       jsr print_char
0004C4r 1  B1 rr          lda (DUMP_POINTER),y
0004C6r 1  20 rr rr       jsr print_char
0004C9r 1  A9 rr          lda #<splash
0004CBr 1  85 rr          sta MESSAGE_POINTER
0004CDr 1  A9 rr          lda #>splash
0004CFr 1  85 rr          sta MESSAGE_POINTER + 1
0004D1r 1  20 rr rr       jsr print3   ; add cursor after re-writing the address/data line
0004D4r 1  60             rts
0004D5r 1               
0004D5r 1               
0004D5r 1               
0004D5r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004D5r 1               ;;
0004D5r 1               ;;      display 8 bytes of data for a "block" of memory
0004D5r 1               ;;
0004D5r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004D5r 1               
0004D5r 1               block_address:
0004D5r 1               
0004D5r 1  20 rr rr       jsr lcd_clear
0004D8r 1  20 rr rr       jsr lcd_cursor_off
0004DBr 1  A9 rr          lda #<block_address_msg
0004DDr 1  85 rr          sta MESSAGE_POINTER
0004DFr 1  A9 rr          lda #>block_address_msg
0004E1r 1  85 rr          sta MESSAGE_POINTER + 1
0004E3r 1  20 rr rr       jsr print1
0004E6r 1  20 rr rr       jsr lcd_line_2
0004E9r 1  A0 00          ldy #$00
0004EBr 1  A9 24          lda #'$'
0004EDr 1  20 rr rr       jsr print_char
0004F0r 1  A5 rr          lda DUMP_POINTER + 1
0004F2r 1  20 rr rr       jsr bintohex
0004F5r 1  AD rr rr       lda HI_DIGIT
0004F8r 1  20 rr rr       jsr print_char
0004FBr 1  AD rr rr       lda LO_DIGIT
0004FEr 1  20 rr rr       jsr print_char
000501r 1  A5 rr          lda DUMP_POINTER
000503r 1  20 rr rr       jsr bintohex
000506r 1  AD rr rr       lda HI_DIGIT
000509r 1  20 rr rr       jsr print_char
00050Cr 1  AD rr rr       lda LO_DIGIT
00050Fr 1  20 rr rr       jsr print_char
000512r 1  20 rr rr       jsr lcd_line_3
000515r 1               loop1:
000515r 1  B1 rr          lda (DUMP_POINTER),y
000517r 1  20 rr rr       jsr bintohex
00051Ar 1  AD rr rr       lda HI_DIGIT
00051Dr 1  20 rr rr       jsr print_char
000520r 1  AD rr rr       lda LO_DIGIT
000523r 1  20 rr rr       jsr print_char
000526r 1  B1 rr          lda (DUMP_POINTER),y
000528r 1  C8             iny
000529r 1  C0 08          cpy #$08
00052Br 1  D0 E8          bne loop1
00052Dr 1  A9 20          lda #' '
00052Fr 1  20 rr rr       jsr print_char
000532r 1  A9 48          lda #'H'
000534r 1  20 rr rr       jsr print_char
000537r 1  A9 65          lda #'e'
000539r 1  20 rr rr       jsr print_char
00053Cr 1  A9 78          lda #'x'
00053Er 1  20 rr rr       jsr print_char
000541r 1  20 rr rr       jsr lcd_line_4
000544r 1  A0 00          ldy #$00
000546r 1               loop2:
000546r 1  A9 20          lda #$20
000548r 1  20 rr rr       jsr print_char
00054Br 1  B1 rr          lda (DUMP_POINTER),y
00054Dr 1  20 rr rr       jsr print_char
000550r 1  C8             iny
000551r 1  C0 08          cpy #$08
000553r 1  D0 F1          bne loop2
000555r 1  A9 20          lda #' '
000557r 1  20 rr rr       jsr print_char
00055Ar 1  A9 43          lda #'C'
00055Cr 1  20 rr rr       jsr print_char
00055Fr 1  A9 68          lda #'h'
000561r 1  20 rr rr       jsr print_char
000564r 1  A9 72          lda #'r'
000566r 1  20 rr rr       jsr print_char
000569r 1  60             rts
00056Ar 1               
00056Ar 1               
00056Ar 1               
00056Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00056Ar 1               ;;
00056Ar 1               ;;      Monitor function - decrement the selected address
00056Ar 1               ;;
00056Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00056Ar 1               
00056Ar 1               decrement_address:
00056Ar 1               
00056Ar 1  38             sec
00056Br 1  A5 rr          lda DUMP_POINTER
00056Dr 1  E9 01          sbc #$01
00056Fr 1  85 rr          sta DUMP_POINTER
000571r 1  8D rr rr       sta BYTE
000574r 1  A5 rr          lda DUMP_POINTER + 1
000576r 1  E9 00          sbc #$00
000578r 1  85 rr          sta DUMP_POINTER + 1
00057Ar 1  8D rr rr       sta BYTE + 1
00057Dr 1  60             rts
00057Er 1               
00057Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00057Er 1               ;;
00057Er 1               ;;      Monitor function - increment the selected address
00057Er 1               ;;
00057Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00057Er 1               
00057Er 1               increment_address:
00057Er 1               
00057Er 1  18             clc
00057Fr 1  A5 rr          lda DUMP_POINTER
000581r 1  69 01          adc #$01
000583r 1  85 rr          sta DUMP_POINTER
000585r 1  8D rr rr       sta BYTE
000588r 1  A5 rr          lda DUMP_POINTER + 1
00058Ar 1  69 00          adc #$00
00058Cr 1  85 rr          sta DUMP_POINTER + 1
00058Er 1  8D rr rr       sta BYTE + 1
000591r 1  60             rts
000592r 1               
000592r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000592r 1               ;;
000592r 1               ;;      Monitor function - increment the selected block of  addresses by 8
000592r 1               ;;
000592r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000592r 1               
000592r 1               increment_block:
000592r 1               
000592r 1  18             clc
000593r 1  A5 rr          lda DUMP_POINTER
000595r 1  69 08          adc #$08
000597r 1  85 rr          sta DUMP_POINTER
000599r 1  8D rr rr       sta BYTE
00059Cr 1  A5 rr          lda DUMP_POINTER + 1
00059Er 1  69 00          adc #$00
0005A0r 1  85 rr          sta DUMP_POINTER + 1
0005A2r 1  8D rr rr       sta BYTE + 1
0005A5r 1  60             rts
0005A6r 1               
0005A6r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A6r 1               ;;
0005A6r 1               ;;      Monitor function - decrement the selected block of  addresses by 8
0005A6r 1               ;;
0005A6r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A6r 1               
0005A6r 1               decrement_block:
0005A6r 1               
0005A6r 1  38             sec
0005A7r 1  A5 rr          lda DUMP_POINTER
0005A9r 1  E9 08          sbc #$08
0005ABr 1  85 rr          sta DUMP_POINTER
0005ADr 1  8D rr rr       sta BYTE
0005B0r 1  A5 rr          lda DUMP_POINTER + 1
0005B2r 1  E9 00          sbc #$00
0005B4r 1  85 rr          sta DUMP_POINTER + 1
0005B6r 1  8D rr rr       sta BYTE + 1
0005B9r 1  60             rts
0005BAr 1               
0005BAr 1               
0005BAr 1               
0005BAr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005BAr 1               ;;
0005BAr 1               ;; use last 4 key presses (as hex bytes) to fill two BYTES
0005BAr 1               ;;
0005BAr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005BAr 1               
0005BAr 1               keys_byte:
0005BAr 1               
0005BAr 1  AD rr rr       lda KEY_PRESS + 1
0005BDr 1  0A             asl
0005BEr 1  0A             asl
0005BFr 1  0A             asl
0005C0r 1  0A             asl
0005C1r 1  8D rr rr       sta BYTE
0005C4r 1  AD rr rr       lda KEY_PRESS
0005C7r 1  0D rr rr       ora BYTE
0005CAr 1  8D rr rr       sta BYTE
0005CDr 1  AD rr rr       lda KEY_PRESS + 3
0005D0r 1  0A             asl
0005D1r 1  0A             asl
0005D2r 1  0A             asl
0005D3r 1  0A             asl
0005D4r 1  8D rr rr       sta BYTE + 1
0005D7r 1  AD rr rr       lda KEY_PRESS + 2
0005DAr 1  0D rr rr       ora BYTE + 1
0005DDr 1  8D rr rr       sta BYTE + 1
0005E0r 1  60             rts
0005E1r 1               
0005E1r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005E1r 1               ;;
0005E1r 1               ;;    toggle the display/update of Clock on each appropriate keypress
0005E1r 1               ;;
0005E1r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005E1r 1               
0005E1r 1               show_clock:
0005E1r 1               
0005E1r 1  DF rr 10       bbs5 FLAGS, reset_bit5
0005E4r 1  D7 rr          smb5 FLAGS
0005E6r 1  A9 rr          lda #<emt
0005E8r 1  85 rr          sta MESSAGE_POINTER
0005EAr 1  A9 rr          lda #>emt
0005ECr 1  85 rr          sta MESSAGE_POINTER + 1
0005EEr 1  20 rr rr       jsr print2_2
0005F1r 1  4C rr rr       jmp exit_show_clock
0005F4r 1               reset_bit5:
0005F4r 1  57 rr          rmb5 FLAGS
0005F6r 1  A9 rr          lda #<pause_msg
0005F8r 1  85 rr          sta MESSAGE_POINTER
0005FAr 1  A9 rr          lda #>pause_msg
0005FCr 1  85 rr          sta MESSAGE_POINTER + 1
0005FEr 1  20 rr rr       jsr print2_2
000601r 1               
000601r 1               exit_show_clock:
000601r 1  60             rts
000602r 1               
000602r 1               
000602r 1               
000602r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000602r 1               ;;
000602r 1               ;;    toggle the automatic update view of the "8-byte memory block"
000602r 1               ;;
000602r 1               
000602r 1               show_block:
000602r 1               
000602r 1  8F rr 05       bbs0 FLAGS, reset_bit0
000605r 1  87 rr          smb0 FLAGS
000607r 1  4C rr rr       jmp exit_show_block
00060Ar 1               reset_bit0:
00060Ar 1  07 rr          rmb0 FLAGS
00060Cr 1               exit_show_block:
00060Cr 1  60             rts
00060Dr 1               
00060Dr 1               
00060Dr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00060Dr 1               ;;
00060Dr 1               ;;     toggle the scanning LED routine on VIA_3 Port B
00060Dr 1               ;;
00060Dr 1               
00060Dr 1               show_kitt:
00060Dr 1               
00060Dr 1  AF rr 05       bbs2 FLAGS, reset_bit2
000610r 1  A7 rr          smb2 FLAGS
000612r 1  4C rr rr       jmp exit_show_kitt
000615r 1               reset_bit2:
000615r 1  27 rr          rmb2 FLAGS
000617r 1               exit_show_kitt:
000617r 1  60             rts
000618r 1               
000618r 1               
000618r 1               
000618r 1               
000618r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000618r 1               ;;
000618r 1               ;;                     INTERRUPT HANDLERS
000618r 1               ;;
000618r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000618r 1               
000618r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000618r 1               ;;
000618r 1               ;;         reset & restart timer
000618r 1               ;;
000618r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000618r 1               
000618r 1               
000618r 1               reset_met:
000618r 1  64 rr          stz HUNDRED_HRS
00061Ar 1  64 rr          stz TEN_HRS
00061Cr 1  64 rr          stz TEN_MINUTES
00061Er 1  64 rr          stz TEN_SECONDS
000620r 1  64 rr          stz HRS
000622r 1  64 rr          stz MINUTES
000624r 1  64 rr          stz SECONDS
000626r 1  60             rts
000627r 1               
000627r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000627r 1               ;;
000627r 1               ;;                CB : TEST FUNCTIONS
000627r 1               ;;
000627r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000627r 1               cb1_handler:
000627r 1               
000627r 1                 ;lda #$04
000627r 1  A9 05          lda #$05
000629r 1  85 rr          sta BEEP_DELAY_TIME
00062Br 1                 ;jsr beep_from_pointer
00062Br 1               
00062Br 1                 ; CONSIDER Change:
00062Br 1                 ;
00062Br 1                 ; jsr beep_from_pointer
00062Br 1                 ; rts
00062Br 1                 ;
00062Br 1                 ; becomes
00062Br 1                 ;
00062Br 1  4C rr rr       jmp beep_from_pointer
00062Er 1               
00062Er 1                 ;rts
00062Er 1               
00062Er 1               cb2_handler:
00062Er 1  A9 14          lda #$14
000630r 1  85 rr          sta BEEP_DELAY_TIME
000632r 1  A9 02          lda #$02 ; tone # = 100Hz
000634r 1                 ;jsr beep_from_list
000634r 1                 ; CONSIDER Change:
000634r 1                 ;
000634r 1                 ; jsr beep_from-list
000634r 1                 ; rts
000634r 1                 ;
000634r 1                 ; becomes
000634r 1                 ;
000634r 1  4C rr rr       jmp beep_from_list
000637r 1               
000637r 1                 ;rts
000637r 1               
000637r 1               
000637r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000637r 1               ;;
000637r 1               ;;                    MONITOR / KEYPAD
000637r 1               ;;
000637r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000637r 1               
000637r 1               keypad_handler:
000637r 1               
000637r 1  20 rr rr       jsr get_key     ; READs from PORTA which also re-sets VIA's Interrupt flag
00063Ar 1  8D rr rr       sta INKEY       ; put the byte value of input into RAM ( $00 )
00063Dr 1  AD 00 60       lda PORTB_1       ; check for SHIFT/INSTRUCTION button, 0=pressed, 1=not pressed
000640r 1  29 80          and #%10000000    ; zero (eq) when button pressed -> check_keypress, otherwise it's not zero, jmp to handle_new_char
000642r 1  F0 03          beq check_keypress ; done this way to get around the limit in size of branch jumps....
000644r 1  4C rr rr       jmp handle_new_char
000647r 1               
000647r 1               check_keypress:
000647r 1               
000647r 1  AD rr rr       lda INKEY
00064Ar 1               
00064Ar 1               ; choose action of "SHIFTed" key-press
00064Ar 1               
00064Ar 1               check_a:
00064Ar 1               
00064Ar 1  C9 0A          cmp #$0A
00064Cr 1                 ; move up one memory address and display contents
00064Cr 1  D0 09          bne check_b
00064Er 1  20 rr rr       jsr increment_address
000651r 1  20 rr rr       jsr new_address
000654r 1  4C rr rr       jmp exit_key_irq
000657r 1               
000657r 1               check_b:
000657r 1               
000657r 1  C9 0B          cmp #$0B
000659r 1                 ; move down one memory address and display contents
000659r 1  D0 09          bne check_c
00065Br 1  20 rr rr       jsr decrement_address
00065Er 1  20 rr rr       jsr new_address
000661r 1  4C rr rr       jmp exit_key_irq
000664r 1               
000664r 1               check_c:
000664r 1               
000664r 1  C9 0C          cmp #$0C
000666r 1                 ; return to MONITOR
000666r 1  D0 13          bne check_d
000668r 1  07 rr          rmb0 FLAGS
00066Ar 1  20 rr rr       jsr lcd_clear
00066Dr 1  A9 rr          lda #<splash
00066Fr 1  85 rr          sta MESSAGE_POINTER
000671r 1  A9 rr          lda #>splash
000673r 1  85 rr          sta MESSAGE_POINTER + 1
000675r 1  20 rr rr       jsr new_address
000678r 1  4C rr rr       jmp exit_key_irq
00067Br 1               
00067Br 1               check_d:
00067Br 1               
00067Br 1  C9 0D          cmp #$0D
00067Dr 1                 ; move monitor to entered 4-digit memory address
00067Dr 1  D0 10          bne check_e
00067Fr 1  AD rr rr       lda BYTE
000682r 1  85 rr          sta DUMP_POINTER
000684r 1  AD rr rr       lda BYTE + 1
000687r 1  85 rr          sta DUMP_POINTER + 1
000689r 1  20 rr rr       jsr new_address
00068Cr 1  4C rr rr       jmp exit_key_irq
00068Fr 1               
00068Fr 1               check_e:
00068Fr 1               
00068Fr 1  C9 0E          cmp #$0E
000691r 1                 ; insert (POKE) byte of data in to current memory address, then increment to next address
000691r 1  D0 10          bne check_f
000693r 1  AD rr rr       lda BYTE
000696r 1  A0 00          ldy #$00
000698r 1  91 rr          sta (DUMP_POINTER),y
00069Ar 1  20 rr rr       jsr new_address
00069Dr 1  20 rr rr       jsr beep
0006A0r 1  4C rr rr       jmp exit_key_irq
0006A3r 1               
0006A3r 1               check_f:
0006A3r 1               
0006A3r 1  C9 0F          cmp #$0F
0006A5r 1                 ; show 8-byte wide block of memory
0006A5r 1  D0 12          bne check_1
0006A7r 1  A0 00          ldy #$00
0006A9r 1  AD rr rr       lda BYTE
0006ACr 1  85 rr          sta DUMP_POINTER
0006AEr 1  AD rr rr       lda BYTE + 1
0006B1r 1  85 rr          sta DUMP_POINTER + 1
0006B3r 1  20 rr rr       jsr block_address
0006B6r 1  4C rr rr       jmp exit_key_irq
0006B9r 1               
0006B9r 1               check_1:
0006B9r 1               
0006B9r 1  C9 01          cmp #$01
0006BBr 1                 ; pause time display (clock still running)
0006BBr 1  D0 09          bne check_2
0006BDr 1  20 rr rr       jsr beep
0006C0r 1  20 rr rr       jsr show_clock
0006C3r 1  4C rr rr       jmp exit_key_irq
0006C6r 1               
0006C6r 1               check_2:
0006C6r 1               
0006C6r 1  C9 02          cmp #$02
0006C8r 1                 ; reset_clock
0006C8r 1  D0 09          bne check_3
0006CAr 1  20 rr rr       jsr beep
0006CDr 1  20 rr rr       jsr reset_met
0006D0r 1  4C rr rr       jmp exit_key_irq
0006D3r 1               
0006D3r 1               check_3:
0006D3r 1               
0006D3r 1  C9 03          cmp #$03
0006D5r 1  D0 0B          bne check_6
0006D7r 1  A0 00          ldy #$00
0006D9r 1  20 rr rr       jsr increment_block
0006DCr 1  20 rr rr       jsr block_address
0006DFr 1  4C rr rr       jmp exit_key_irq
0006E2r 1               
0006E2r 1               check_6:
0006E2r 1               
0006E2r 1  C9 06          cmp #$06
0006E4r 1  D0 0B          bne check_9
0006E6r 1  A0 00          ldy #$00
0006E8r 1  20 rr rr       jsr decrement_block
0006EBr 1  20 rr rr       jsr block_address
0006EEr 1  4C rr rr       jmp exit_key_irq
0006F1r 1               
0006F1r 1               check_9:
0006F1r 1               
0006F1r 1  C9 09          cmp #$09
0006F3r 1  D0 06          bne check_4
0006F5r 1  20 rr rr       jsr show_block
0006F8r 1  4C rr rr       jmp exit_key_irq
0006FBr 1               
0006FBr 1               check_4:
0006FBr 1               
0006FBr 1  C9 04          cmp #$04
0006FDr 1  D0 09          bne check_5
0006FFr 1  20 rr rr       jsr beep
000702r 1  20 rr rr       jsr show_kitt
000705r 1  4C rr rr       jmp exit_key_irq
000708r 1               
000708r 1               check_5:
000708r 1               
000708r 1  C9 05          cmp #$05
00070Ar 1  D0 2A          bne exit_key_irq
00070Cr 1  20 rr rr       jsr beep
00070Fr 1  20 00 3F       jsr $3F00
000712r 1  4C rr rr       jmp exit_key_irq
000715r 1               
000715r 1               
000715r 1               handle_new_char:
000715r 1               
000715r 1  AD rr rr       lda KEY_PRESS + 2
000718r 1  8D rr rr       sta KEY_PRESS + 3
00071Br 1  AD rr rr       lda KEY_PRESS + 1
00071Er 1  8D rr rr       sta KEY_PRESS + 2
000721r 1  AD rr rr       lda KEY_PRESS
000724r 1  8D rr rr       sta KEY_PRESS + 1
000727r 1  AD rr rr       lda INKEY       ; get the new keypress value and...
00072Ar 1  8D rr rr       sta KEY_PRESS
00072Dr 1  20 rr rr       jsr bintohex
000730r 1  20 rr rr       jsr print_char  ; and print it on LCD
000733r 1  20 rr rr       jsr keys_byte
000736r 1               
000736r 1               exit_key_irq:
000736r 1               
000736r 1                 ;jsr scan  ; re-enable keypad
000736r 1                 ; CONSIDER Change:
000736r 1                 ;
000736r 1                 ; jsr scan
000736r 1                 ; rts
000736r 1                 ;
000736r 1                 ; becomes
000736r 1                 ;
000736r 1  4C rr rr       jmp scan
000739r 1                 ;rts
000739r 1               
000739r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000739r 1               
000739r 1               nmi:
000739r 1  48             pha
00073Ar 1  DA             phx
00073Br 1  5A             phy
00073Cr 1               
00073Cr 1  2C 04 48       bit T1CL_3      ; reset interrupt flag
00073Fr 1  20 rr rr       jsr rtc
000742r 1  4C rr rr       jmp exit_nmi
000745r 1               
000745r 1               exit_nmi:
000745r 1  7A             ply
000746r 1  FA             plx
000747r 1  68             pla
000748r 1  40             rti
000749r 1               
000749r 1  40             rti
00074Ar 1               
00074Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00074Ar 1               ;;
00074Ar 1               ;;    interrupt is triggered by HIGH edge on VIA CA1 pin
00074Ar 1               ;;     PORTA low nibble (keypad columns) inputs are diode ORed to CA1
00074Ar 1               ;;
00074Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00074Ar 1               
00074Ar 1               irq:
00074Ar 1               
00074Ar 1               ; put registers on the stack while handling the IRQ
00074Ar 1               
00074Ar 1  48             pha
00074Br 1  DA             phx
00074Cr 1  5A             phy
00074Dr 1               
00074Dr 1               ;  find responsible hardware
00074Dr 1               
00074Dr 1               ;  Is it VIA_1?
00074Dr 1               
00074Dr 1  AD 0D 60       lda IFR_1       ; if IFR_1 has Bit7 set (ie sign=NEGATIVE) then it IS the source of the interrupt
000750r 1  10 25          bpl next_device ; if it's not set (ie sign=POSITIVE) then branch to test the next possible device
000752r 1               
000752r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000752r 1               ;;
000752r 1               ;; IFR Flags
000752r 1               ;; B7  B6  B5  B4  B3  B2  B1  B0
000752r 1               ;; IRQ TI1 TI2 CB1 CB2 SR CA1 CA2
000752r 1               ;;
000752r 1               ;; Interrupt source is found by sequentially shifting IFR bit left to put bit-of-interest into the CARRY place
000752r 1               ;; and then branching based on whether CARRY is SET or not
000752r 1               ;;
000752r 1               ;; Only add tests for IRQ sources in use, and adjust the ASLs in each test as necessary
000752r 1               ;;
000752r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000752r 1               
000752r 1               test_cb1:
000752r 1  0A             asl
000753r 1  0A             asl
000754r 1  0A             asl
000755r 1  0A             asl
000756r 1  90 09          bcc test_cb2
000758r 1  2C 00 60       bit PORTB_1
00075Br 1  20 rr rr       jsr cb1_handler
00075Er 1  4C rr rr       jmp exit_irq
000761r 1               
000761r 1               test_cb2:
000761r 1  0A             asl
000762r 1  90 09          bcc test_ca1
000764r 1  2C 00 60       bit PORTB_1
000767r 1  20 rr rr       jsr cb2_handler
00076Ar 1  4C rr rr       jmp exit_irq
00076Dr 1               
00076Dr 1               test_ca1:
00076Dr 1               
00076Dr 1  0A             asl           ; shift CA1 bit into the CARRY bit & test
00076Er 1  0A             asl
00076Fr 1  90 06          bcc exit_irq        ; carry clear = leave
000771r 1  20 rr rr       jsr keypad_handler  ; carry not clear = handle the CA1 interrupt (keypad)
000774r 1  4C rr rr       jmp exit_irq
000777r 1               
000777r 1               
000777r 1               next_device:
000777r 1               
000777r 1               exit_irq:
000777r 1               
000777r 1  7A             ply
000778r 1  FA             plx
000779r 1  68             pla
00077Ar 1  40             rti
00077Br 1               
00077Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00077Br 1               ;;
00077Br 1               ;;      String and data byte variables
00077Br 1               ;;
00077Br 1               ;;
00077Br 1               ;;
00077Br 1               
00077Br 1  4D 61 72 6B  pause_msg: .asciiz "Mark Time     "
00077Fr 1  20 54 69 6D  
000783r 1  65 20 20 20  
00078Ar 1  3C 73 68 69  start_msg: .asciiz "<shift>+C to start"
00078Er 1  66 74 3E 2B  
000792r 1  43 20 74 6F  
00079Dr 1  56 69 65 77  new_address_msg: .asciiz "View/Edit Memory"
0007A1r 1  2F 45 64 69  
0007A5r 1  74 20 4D 65  
0007AEr 1  38 20 42 79  block_address_msg: .asciiz "8 Byte view"
0007B2r 1  74 65 20 76  
0007B6r 1  69 65 77 00  
0007BAr 1  2E 2E 2E 53  title: .asciiz "...Shed Brain v1..."
0007BEr 1  68 65 64 20  
0007C2r 1  42 72 61 69  
0007CEr 1  53 68 65 64  emt: .asciiz "Shed Time  MET"
0007D2r 1  20 54 69 6D  
0007D6r 1  65 20 20 4D  
0007DDr 1  73 68 65 64  splash: .asciiz "shed> "
0007E1r 1  3E 20 00     
0007E4r 1  42 65 67 69  mem_start_msg: .asciiz "Begin RAM Test"
0007E8r 1  6E 20 52 41  
0007ECr 1  4D 20 54 65  
0007F3r 1  52 41 4D 20  mem_pass_msg: .asciiz "RAM Test Pass"
0007F7r 1  54 65 73 74  
0007FBr 1  20 50 61 73  
000801r 1  52 41 4D 20  mem_fail_msg_1: .asciiz "RAM Test 1 Fail"
000805r 1  54 65 73 74  
000809r 1  20 31 20 46  
000811r 1  52 41 4D 20  mem_fail_msg_2: .asciiz "RAM Test 2 Fail"
000815r 1  54 65 73 74  
000819r 1  20 32 20 46  
000821r 1               
000821r 1  54 68 69 73  userPrompt: .asciiz "This is shed! "
000825r 1  20 69 73 20  
000829r 1  73 68 65 64  
000830r 1               
000830r 1  64 rr A9 20  userProg: .byte $64, MESSAGE_POINTER, $A9, $20, $85, MESSAGE_POINTER + 1, $20, <print4, >print4, $60, $00
000834r 1  85 rr 20 rr  
000838r 1  rr 60 00     
00083Br 1               
00083Br 1  01 03 06 0C  kitLeds: .byte $01, $03, $06, $0C, $18, $30, $60, $C0, $80, $C0, $60, $30, $18, $0C, $06, $03, $01
00083Fr 1  18 30 60 C0  
000843r 1  80 C0 60 30  
00084Cr 1               
00084Cr 1               
00084Cr 1               ; Reset/IRQ vectors
00084Cr 1               
00084Cr 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr          .word nmi
000002r 1  rr rr          .word reset
000004r 1  rr rr          .word irq
000004r 1               
