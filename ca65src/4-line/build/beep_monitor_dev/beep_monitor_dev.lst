ca65 V2.18 - Debian 2.19-1
Main file   : beep_monitor_dev.s
Current file: beep_monitor_dev.s

000000r 1               ;;
000000r 1               ;; DEV updates:
000000r 1               ;;
000000r 1               ;;1) pre-load USER MEM @ user_ram
000000r 1               ;;
000000r 1               ;;2) set new VIAs for OUTPUT on both ports A & B
000000r 1               ;;
000000r 1               ;;3) TESTING new VIAS with flashing LEDs on all ports
000000r 1               ;;
000000r 1               ;;4) Add second LCD on VIA_2 PORTA_2 ?
000000r 1               ;;
000000r 1               ;;5) BEEP using VIA2 T1 on PORTB_2 bit 7
000000r 1               ;;
000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1  xx xx        BEEP_POINTER:     .res 2
000002r 1  xx xx        DUMP_POINTER:     .res 2
000004r 1  xx           FLAGS:            .res 1
000005r 1  xx           TOGGLE_TIME:      .res 1
000006r 1  xx           CLOCK_LAST:       .res 1
000007r 1  xx xx        MESSAGE_POINTER:  .res 2
000009r 1  xx xx xx xx  TICKS:            .res 4
00000Dr 1  xx           CENTISEC:         .res 1
00000Er 1  xx           HUNDRED_HRS:      .res 1
00000Fr 1  xx           TEN_HRS:          .res 1
000010r 1  xx           HRS:              .res 1
000011r 1  xx           TEN_MINUTES:      .res 1
000012r 1  xx           MINUTES:          .res 1
000013r 1  xx           TEN_SECONDS:      .res 1
000014r 1  xx           SECONDS:          .res 1
000015r 1  xx xx        MEM_POINTER:      .res 2
000017r 1  xx           LED2_LAST:        .res 1
000018r 1  xx           LED3_LAST:        .res 1
000019r 1  xx           LAST_KIT:         .res 1
00001Ar 1  xx           BEEP_ON_TIME:     .res 1
00001Br 1  xx           BEEP_DELAY_TIME:  .res 1 ; $01 = 1 tick ~10ms, $FF = 255 ticks ~2.5 seconds
00001Cr 1               
00001Cr 1               .bss
000000r 1               
000000r 1  xx           INKEY:            .res 1
000001r 1  xx xx xx xx  KEY_PRESS:        .res 4
000005r 1  xx xx        BYTE:             .res 2
000007r 1  xx           TENS:             .res 1
000008r 1  xx           HUNDREDS:         .res 1
000009r 1  xx xx        HEX:              .res 2
00000Br 1  xx xx        HEXB:             .res 2
00000Dr 1  xx           TEMP:             .res 1
00000Er 1  xx           TEMP2:            .res 1
00000Fr 1  xx           HI_DIGIT:         .res 1
000010r 1  xx           LO_DIGIT:         .res 1
000011r 1               
000011r 1               
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               ;;
000011r 1               ;;        INCLUDES
000011r 1               ;;
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               
000011r 1               
000011r 1               .include "../includes/ioports.inc"
000011r 2               
000011r 2                 .code
000000r 2               
000000r 2               ; VIA_1 Port addresses
000000r 2               VIA_1     = $6000
000000r 2               PORTB_1   = VIA_1
000000r 2               PORTA_1   = VIA_1 + 1
000000r 2               DDRB_1    = VIA_1 + 2
000000r 2               DDRA_1    = VIA_1 + 3
000000r 2               T1CL_1    = VIA_1 + 4
000000r 2               T1CH_1    = VIA_1 + 5
000000r 2               T1LL_1    = VIA_1 + 6
000000r 2               T1LH_1    = VIA_1 + 7
000000r 2               T2CL_1    = VIA_1 + 8
000000r 2               T2CH_1    = VIA_1 + 9
000000r 2               SR_1      = VIA_1 + 10
000000r 2               ACR_1     = VIA_1 + 11
000000r 2               PCR_1     = VIA_1 + 12
000000r 2               IFR_1     = VIA_1 + 13
000000r 2               IER_1     = VIA_1 + 14
000000r 2               PORTA_NO_HS_1 = VIA_1 + 15
000000r 2               
000000r 2               ; VIA_2 Port addresses
000000r 2               VIA_2     = $5000
000000r 2               PORTB_2   = VIA_2
000000r 2               PORTA_2   = VIA_2 + 1
000000r 2               DDRB_2    = VIA_2 + 2
000000r 2               DDRA_2    = VIA_2 + 3
000000r 2               T1CL_2    = VIA_2 + 4
000000r 2               T1CH_2    = VIA_2 + 5
000000r 2               T1LL_2    = VIA_2 + 6
000000r 2               T1LH_2    = VIA_2 + 7
000000r 2               T2CL_2    = VIA_2 + 8
000000r 2               T2CH_2    = VIA_2 + 9
000000r 2               SR_2      = VIA_2 + 10
000000r 2               ACR_2     = VIA_2 + 11
000000r 2               PCR_2     = VIA_2 + 12
000000r 2               IFR_2     = VIA_2 + 13
000000r 2               IER_2     = VIA_2 + 14
000000r 2               PORTA_NO_HS_2 = VIA_2 + 15
000000r 2               
000000r 2               ; VIA_3 Port addresses
000000r 2               VIA_3     = $4800
000000r 2               PORTB_3   = VIA_3
000000r 2               PORTA_3   = VIA_3 + 1
000000r 2               DDRB_3    = VIA_3 + 2
000000r 2               DDRA_3    = VIA_3 + 3
000000r 2               T1CL_3    = VIA_3 + 4
000000r 2               T1CH_3    = VIA_3 + 5
000000r 2               T1LL_3    = VIA_3 + 6
000000r 2               T1LH_3    = VIA_3 + 7
000000r 2               T2CL_3    = VIA_3 + 8
000000r 2               T2CH_3    = VIA_3 + 9
000000r 2               SR_3      = VIA_3 + 10
000000r 2               ACR_3     = VIA_3 + 11
000000r 2               PCR_3     = VIA_3 + 12
000000r 2               IFR_3     = VIA_3 + 13
000000r 2               IER_3     = VIA_3 + 14
000000r 2               PORTA_NO_HS_3 = VIA_3 + 15
000000r 2               
000000r 2               ; ACIA_1 Port Addresses
000000r 2               ACIA_1    = $4400
000000r 2               S_TXRX_1  = ACIA_1      ; TXD / RXD
000000r 2               S_STA_1   = ACIA_1 + 1  ; Status
000000r 2               S_COM_1   = ACIA_1 + 2  ; Command
000000r 2               S_CON_1   = ACIA_1 + 3  ; Control
000000r 2               
000000r 2               
000000r 2               via_1_init:
000000r 2               
000000r 2               
000000r 2               
000000r 2  A9 9A          lda #%10011010  ; CB2, CA1 active
000002r 2  8D 0E 60       sta IER_1
000005r 2               
000005r 2  A9 51          lda #%01010001  ;  CA1 active high-transition, CB2 low
000007r 2  8D 0C 60       sta PCR_1
00000Ar 2               
00000Ar 2  A9 7F          lda #%01111111 ; Set all pins on port B to output except BIT 7 which is used for "SHIFT/INSTRUCTION"  button
00000Cr 2  8D 02 60       sta DDRB_1
00000Fr 2  A9 F0          lda #%11110000 ; Set low-nibble pins on port A to input and high-nibble pins to output, for keypad
000011r 2  8D 03 60       sta DDRA_1
000014r 2               
000014r 2  60             rts
000015r 2               
000015r 2               via_2_init:
000015r 2               
000015r 2               ;; TIMER T1 is set up in functions.inc to act as source of beep tones
000015r 2               
000015r 2  A9 FF          lda #%11111111 ; set all pins on port A & B to output
000017r 2  8D 03 50       sta DDRA_2
00001Ar 2  8D 02 50       sta DDRB_2
00001Dr 2  A9 00          lda #%00000000
00001Fr 2  8D 0E 50       sta IER_2
000022r 2  60             rts
000023r 2               
000023r 2               via_3_init:
000023r 2               
000023r 2               ;; TIMER T1 used as TICK source for RTC - set for 10ms per tick
000023r 2               ;; $270E = 9998d = count 10,000 phi2 cycles @ 1MHz = 10ms per interrupt
000023r 2               
000023r 2  A9 40          lda #%01000000 ; DON'T use PB7 as a T1 pulse timer clock output (ACR b7 = 0)
000025r 2                                ; Use T1 Timer in continuous reset-interrupt mode (ACR b6 = 1)
000025r 2  8D 0B 48       sta ACR_3
000028r 2               
000028r 2                 ; set T1 delay for 10ms interrupts
000028r 2  A9 0E          lda #$0E
00002Ar 2  8D 04 48       sta T1CL_3
00002Dr 2  A9 27          lda #$27
00002Fr 2  8D 05 48       sta T1CH_3
000032r 2               
000032r 2  A9 C0          lda #%11000000  ; Interrupt / T1 interrupt active
000034r 2  8D 0E 48       sta IER_3
000037r 2               
000037r 2  A9 FF          lda #%11111111 ; set all pins on port A & B to output for now
000039r 2  8D 03 48       sta DDRA_3
00003Cr 2  8D 02 48       sta DDRB_3
00003Fr 2               
00003Fr 2  60             rts
000040r 2               
000040r 2               
000040r 2               
000040r 2               
000040r 1               .include "../includes/lcd.inc"
000040r 2               
000040r 2               
000040r 2                 .code
000040r 2               
000040r 2               ; LCD Command masks
000040r 2               E  = %01000000
000040r 2               RW = %00100000
000040r 2               RS = %00010000
000040r 2               
000040r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000040r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000040r 2               ;;
000040r 2               ;;
000040r 2               ;;                              LCD Functions
000040r 2               ;;
000040r 2               ;;
000040r 2               ;;
000040r 2               
000040r 2               lcd_start:
000040r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000042r 2  20 rr rr       jsr lcd_instruction
000045r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000047r 2  20 rr rr       jsr lcd_instruction
00004Ar 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
00004Cr 2  20 rr rr       jsr lcd_instruction
00004Fr 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000051r 2  20 rr rr       jsr lcd_instruction
000054r 2  20 rr rr       jsr lcd_entry_mode
000057r 2  20 rr rr       jsr lcd_cursor_off
00005Ar 2                 ;jsr lcd_clear
00005Ar 2                 ; CONSIDER CHANGE
00005Ar 2  4C rr rr       jmp lcd_clear
00005Dr 2                 ;rts
00005Dr 2               
00005Dr 2               lcd_entry_mode:
00005Dr 2  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
00005Fr 2                 ;jsr lcd_instruction
00005Fr 2                 ; CONSIDER CHANGE
00005Fr 2  4C rr rr       jmp lcd_instruction
000062r 2                 ;rts
000062r 2               
000062r 2               lcd_home:
000062r 2  A9 02          lda #%00000010 ; cursor HOME
000064r 2                 ; CONDSIDER CHANGE
000064r 2  4C rr rr       jmp lcd_instruction
000067r 2                 ;jsr lcd_instruction
000067r 2                 ;rts
000067r 2               
000067r 2               lcd_add0:
000067r 2  A9 80          lda #%10000000 ; back to zero position
000069r 2                 ; CONSIDER CHANGE
000069r 2  4C rr rr       jmp lcd_instruction
00006Cr 2                 ;jsr lcd_instruction
00006Cr 2                 ;rts
00006Cr 2               
00006Cr 2               lcd_clear:
00006Cr 2  A9 01          lda #%00000001 ; Clear display
00006Er 2  4C rr rr       jmp lcd_instruction
000071r 2                 ;jsr lcd_instruction
000071r 2                 ;rts
000071r 2               
000071r 2               lcd_cursor_off:
000071r 2  A9 0C          lda #%00001100 ; Display on; cursor off; blink off
000073r 2  4C rr rr       jmp lcd_instruction
000076r 2                 ;jsr lcd_instruction
000076r 2                 ;rts
000076r 2               
000076r 2               lcd_cursor_on:
000076r 2  A9 0F          lda #%00001111 ; Display on; cursor on; blink on
000078r 2  4C rr rr       jmp lcd_instruction
00007Br 2                 ;jsr lcd_instruction
00007Br 2                 ;rts
00007Br 2               
00007Br 2               lcd_line_1:
00007Br 2  A9 80          lda #($80)
00007Dr 2  4C rr rr       jmp lcd_instruction
000080r 2                 ;jsr lcd_instruction
000080r 2                 ;rts
000080r 2               
000080r 2               lcd_line_2:
000080r 2  A9 C0          lda #($80 + $40)
000082r 2  4C rr rr       jmp lcd_instruction
000085r 2                 ;jsr lcd_instruction
000085r 2                 ;rts
000085r 2               
000085r 2               lcd_line_3:
000085r 2  A9 94          lda #($80 + $14)
000087r 2  4C rr rr       jmp lcd_instruction
00008Ar 2                 ;jsr lcd_instruction
00008Ar 2                 ;rts
00008Ar 2               
00008Ar 2               lcd_line_4:
00008Ar 2  A9 D4          lda #($80 + $54)
00008Cr 2  4C rr rr       jmp lcd_instruction
00008Fr 2                 ;jsr lcd_instruction
00008Fr 2                 ;rts
00008Fr 2               
00008Fr 2               lcd_wait:
00008Fr 2  48             pha
000090r 2  A9 70          lda #%01110000  ; LCD data is input (don't change MSB BIT7, it has to stay ZERO for SHIFT Button input)
000092r 2  8D 02 60       sta DDRB_1
000095r 2               lcdbusy:
000095r 2  A9 20          lda #RW
000097r 2  8D 00 60       sta PORTB_1
00009Ar 2  A9 60          lda #(RW | E)
00009Cr 2  8D 00 60       sta PORTB_1
00009Fr 2  AD 00 60       lda PORTB_1     ; Read high nibble
0000A2r 2  48             pha             ; and put on stack since it has the busy flag
0000A3r 2  A9 20          lda #RW
0000A5r 2  8D 00 60       sta PORTB_1
0000A8r 2  A9 60          lda #(RW | E)
0000AAr 2  8D 00 60       sta PORTB_1
0000ADr 2  AD 00 60       lda PORTB_1       ; Read low nibble
0000B0r 2  68             pla             ; Get high nibble off stack
0000B1r 2  29 08          and #%00001000
0000B3r 2  D0 E0          bne lcdbusy
0000B5r 2               
0000B5r 2  A9 20          lda #RW
0000B7r 2  8D 00 60       sta PORTB_1
0000BAr 2  A9 7F          lda #%01111111  ; LCD data is output (don't change MSB BIT7, it has to stay ZERO for SHIFT Buttion input)
0000BCr 2  8D 02 60       sta DDRB_1
0000BFr 2  68             pla
0000C0r 2  60             rts
0000C1r 2               
0000C1r 2               lcd_init:
0000C1r 2  A9 02          lda #%00000010 ; Set 4-bit mode : DO ONCE AT POWER UP
0000C3r 2  8D 00 60       sta PORTB_1
0000C6r 2  09 40          ora #E
0000C8r 2  8D 00 60       sta PORTB_1
0000CBr 2  29 0F          and #%00001111
0000CDr 2  8D 00 60       sta PORTB_1
0000D0r 2  60             rts
0000D1r 2               
0000D1r 2               lcd_instruction:
0000D1r 2  20 rr rr       jsr lcd_wait
0000D4r 2  48             pha
0000D5r 2  4A             lsr
0000D6r 2  4A             lsr
0000D7r 2  4A             lsr
0000D8r 2  4A             lsr            ; Send high 4 bits
0000D9r 2  8D 00 60       sta PORTB_1
0000DCr 2  09 40          ora #E         ; Set E bit to send instruction
0000DEr 2  8D 00 60       sta PORTB_1
0000E1r 2  49 40          eor #E         ; Clear E bit
0000E3r 2  8D 00 60       sta PORTB_1
0000E6r 2  68             pla
0000E7r 2  29 0F          and #%00001111 ; Send low 4 bits
0000E9r 2  8D 00 60       sta PORTB_1
0000ECr 2  09 40          ora #E         ; Set E bit to send instruction
0000EEr 2  8D 00 60       sta PORTB_1
0000F1r 2  49 40          eor #E         ; Clear E bit
0000F3r 2  8D 00 60       sta PORTB_1
0000F6r 2  60             rts
0000F7r 2               
0000F7r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000F7r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000F7r 2               ;;
0000F7r 2               ;;
0000F7r 2               ;;                              LCD 2 Functions
0000F7r 2               ;;
0000F7r 2               ;;
0000F7r 2               ;;
0000F7r 2               
0000F7r 2               lcd_2_start:
0000F7r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
0000F9r 2  20 rr rr       jsr lcd_2_instruction
0000FCr 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
0000FEr 2  20 rr rr       jsr lcd_2_instruction
000101r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000103r 2  20 rr rr       jsr lcd_2_instruction
000106r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000108r 2  20 rr rr       jsr lcd_2_instruction
00010Br 2  20 rr rr       jsr lcd_2_entry_mode
00010Er 2  20 rr rr       jsr lcd_2_cursor_off
000111r 2  4C rr rr       jmp lcd_2_clear
000114r 2                 ;jsr lcd_2_clear
000114r 2                 ;rts
000114r 2               
000114r 2               lcd_2_entry_mode:
000114r 2  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
000116r 2  4C rr rr       jmp lcd_2_instruction
000119r 2                 ;jsr lcd_2_instruction
000119r 2                 ;rts
000119r 2               
000119r 2               lcd_2_home:
000119r 2  A9 02          lda #%00000010 ; cursor HOME
00011Br 2  4C rr rr       jmp lcd_2_instruction
00011Er 2                 ;jsr lcd_2_instruction
00011Er 2                 ;rts
00011Er 2               
00011Er 2               lcd_2_add0:
00011Er 2  A9 80          lda #%10000000 ; back to zero position
000120r 2  4C rr rr       jmp lcd_2_instruction
000123r 2                 ;jsr lcd_2_instruction
000123r 2                 ;rts
000123r 2               
000123r 2               lcd_2_clear:
000123r 2  A9 01          lda #%00000001 ; Clear display
000125r 2  4C rr rr       jmp lcd_2_instruction
000128r 2                 ;jsr lcd_2_instruction
000128r 2                 ;rts
000128r 2               
000128r 2               lcd_2_cursor_off:
000128r 2  A9 0C          lda #%00001100 ; Display on; cursor off; blink off
00012Ar 2  4C rr rr       jmp lcd_2_instruction
00012Dr 2                 ;jsr lcd_2_instruction
00012Dr 2                 ;rts
00012Dr 2               
00012Dr 2               lcd_2_cursor_on:
00012Dr 2  A9 0F          lda #%00001111 ; Display on; cursor on; blink on
00012Fr 2  4C rr rr       jmp lcd_2_instruction
000132r 2                 ;jsr lcd_2_instruction
000132r 2                 ;rts
000132r 2               
000132r 2               lcd_2_line_1:
000132r 2  A9 80          lda #($80)
000134r 2  4C rr rr       jmp lcd_2_instruction
000137r 2                 ;jsr lcd_2_instruction
000137r 2                 ;rts
000137r 2               
000137r 2               lcd_2_line_2:
000137r 2  A9 C0          lda #($80 + $40)
000139r 2  4C rr rr       jmp lcd_2_instruction
00013Cr 2                 ;jsr lcd_2_instruction
00013Cr 2                 ;rts
00013Cr 2               
00013Cr 2               lcd_2_wait:
00013Cr 2  48             pha
00013Dr 2  A9 70          lda #%01110000  ; LCD data is input (don't change MSB BIT7, it has to stay ZERO for SHIFT Button input)
00013Fr 2  8D 03 48       sta DDRA_3
000142r 2               
000142r 2               lcdbusy2:
000142r 2  A9 20          lda #RW
000144r 2  8D 01 48       sta PORTA_3
000147r 2  A9 60          lda #(RW | E)
000149r 2  8D 01 48       sta PORTA_3
00014Cr 2  AD 01 48       lda PORTA_3     ; Read high nibble
00014Fr 2  48             pha             ; and put on stack since it has the busy flag
000150r 2  A9 20          lda #RW
000152r 2  8D 01 48       sta PORTA_3
000155r 2  A9 60          lda #(RW | E)
000157r 2  8D 01 48       sta PORTA_3
00015Ar 2  AD 01 48       lda PORTA_3       ; Read low nibble
00015Dr 2  68             pla             ; Get high nibble off stack
00015Er 2  29 08          and #%00001000
000160r 2  D0 E0          bne lcdbusy2
000162r 2               
000162r 2  A9 20          lda #RW
000164r 2  8D 01 48       sta PORTA_3
000167r 2  A9 7F          lda #%01111111  ; LCD data is output (don't change MSB BIT7, it has to stay ZERO for SHIFT Buttion input)
000169r 2  8D 03 48       sta DDRA_3
00016Cr 2  68             pla
00016Dr 2  60             rts
00016Er 2               
00016Er 2               lcd_2_init:
00016Er 2  A9 02          lda #%00000010 ; Set 4-bit mode : DO ONCE AT POWER UP
000170r 2  8D 01 48       sta PORTA_3
000173r 2  09 40          ora #E
000175r 2  8D 01 48       sta PORTA_3
000178r 2  29 0F          and #%00001111
00017Ar 2  8D 01 48       sta PORTA_3
00017Dr 2  60             rts
00017Er 2               
00017Er 2               lcd_2_instruction:
00017Er 2  20 rr rr       jsr lcd_2_wait
000181r 2  48             pha
000182r 2  4A             lsr
000183r 2  4A             lsr
000184r 2  4A             lsr
000185r 2  4A             lsr            ; Send high 4 bits
000186r 2  8D 01 48       sta PORTA_3
000189r 2  09 40          ora #E         ; Set E bit to send instruction
00018Br 2  8D 01 48       sta PORTA_3
00018Er 2  49 40          eor #E         ; Clear E bit
000190r 2  8D 01 48       sta PORTA_3
000193r 2  68             pla
000194r 2  29 0F          and #%00001111 ; Send low 4 bits
000196r 2  8D 01 48       sta PORTA_3
000199r 2  09 40          ora #E         ; Set E bit to send instruction
00019Br 2  8D 01 48       sta PORTA_3
00019Er 2  49 40          eor #E         ; Clear E bit
0001A0r 2  8D 01 48       sta PORTA_3
0001A3r 2  60             rts
0001A4r 2               
0001A4r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001A4r 2               ;;
0001A4r 2               ;;        PRINT Characters on LCD 2 - an ASCII value in Accumulator
0001A4r 2               ;;        is printed on the display
0001A4r 2               ;;
0001A4r 2               
0001A4r 2               print_2_char:
0001A4r 2  20 rr rr       jsr lcd_2_wait
0001A7r 2  48             pha
0001A8r 2  4A             lsr
0001A9r 2  4A             lsr
0001AAr 2  4A             lsr
0001ABr 2  4A             lsr             ; Send high 4 bits
0001ACr 2  09 10          ora #RS         ; Set RS
0001AEr 2  8D 01 48       sta PORTA_3
0001B1r 2  09 40          ora #E          ; Set E bit to send instruction
0001B3r 2  8D 01 48       sta PORTA_3
0001B6r 2  49 40          eor #E          ; Clear E bit
0001B8r 2  8D 01 48       sta PORTA_3
0001BBr 2  68             pla
0001BCr 2  29 0F          and #%00001111  ; Send low 4 bits
0001BEr 2  09 10          ora #RS         ; Set RS
0001C0r 2  8D 01 48       sta PORTA_3
0001C3r 2  09 40          ora #E          ; Set E bit to send instruction
0001C5r 2  8D 01 48       sta PORTA_3
0001C8r 2  49 40          eor #E          ; Clear E bit
0001CAr 2  8D 01 48       sta PORTA_3
0001CDr 2  60             rts
0001CEr 2               
0001CEr 2               
0001CEr 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001CEr 2               ;;
0001CEr 2               ;;        PRINT Characters on LCD - an ASCII value in Accumulator
0001CEr 2               ;;        is printed on the display
0001CEr 2               ;;
0001CEr 2               
0001CEr 2               print_char:
0001CEr 2  20 rr rr       jsr lcd_wait
0001D1r 2  48             pha
0001D2r 2  4A             lsr
0001D3r 2  4A             lsr
0001D4r 2  4A             lsr
0001D5r 2  4A             lsr             ; Send high 4 bits
0001D6r 2  09 10          ora #RS         ; Set RS
0001D8r 2  8D 00 60       sta PORTB_1
0001DBr 2  09 40          ora #E          ; Set E bit to send instruction
0001DDr 2  8D 00 60       sta PORTB_1
0001E0r 2  49 40          eor #E          ; Clear E bit
0001E2r 2  8D 00 60       sta PORTB_1
0001E5r 2  68             pla
0001E6r 2  29 0F          and #%00001111  ; Send low 4 bits
0001E8r 2  09 10          ora #RS         ; Set RS
0001EAr 2  8D 00 60       sta PORTB_1
0001EDr 2  09 40          ora #E          ; Set E bit to send instruction
0001EFr 2  8D 00 60       sta PORTB_1
0001F2r 2  49 40          eor #E          ; Clear E bit
0001F4r 2  8D 00 60       sta PORTB_1
0001F7r 2  60             rts
0001F8r 2               
0001F8r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001F8r 2               ;;
0001F8r 2               ;;            print on line 1 or line 2 of LCD 1 or 2
0001F8r 2               ;;
0001F8r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001F8r 2               
0001F8r 2               
0001F8r 2               
0001F8r 2               print1:
0001F8r 2  20 rr rr       jsr lcd_line_1
0001FBr 2  A0 00          ldy #0
0001FDr 2  4C rr rr       jmp line
000200r 2               print2:
000200r 2  20 rr rr       jsr lcd_line_2
000203r 2  A0 00          ldy #0
000205r 2  4C rr rr       jmp line
000208r 2               print3:
000208r 2  20 rr rr       jsr lcd_line_3
00020Br 2  A0 00          ldy #0
00020Dr 2  4C rr rr       jmp line
000210r 2               print4:
000210r 2  20 rr rr       jsr lcd_line_4
000213r 2  A0 00          ldy #0
000215r 2  4C rr rr       jmp line
000218r 2               
000218r 2               print2_2:
000218r 2  20 rr rr       jsr lcd_2_line_2
00021Br 2  A0 00          ldy #0
00021Dr 2  4C rr rr       jmp line2
000220r 2               
000220r 2               line:
000220r 2  B1 rr          lda (MESSAGE_POINTER),y
000222r 2  F0 07          beq @exit
000224r 2  20 rr rr       jsr print_char
000227r 2  C8             iny
000228r 2  4C rr rr       jmp line
00022Br 2               @exit:
00022Br 2  60             rts
00022Cr 2               
00022Cr 2               line2:
00022Cr 2  B1 rr          lda (MESSAGE_POINTER),y
00022Er 2  F0 07          beq @exit
000230r 2  20 rr rr       jsr print_2_char
000233r 2  C8             iny
000234r 2  4C rr rr       jmp line2
000237r 2               @exit:
000237r 2  60             rts
000238r 2               
000238r 2               
000238r 2               
000238r 1               .include "../includes/getkey.inc"
000238r 2               
000238r 2                 .code
000238r 2               
000238r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000238r 2               ;;
000238r 2               ;;
000238r 2               ;;      READ THE 4x4 keypad using  VIA_1 PORTA
000238r 2               ;;
000238r 2               ;;      Accumulator holds the ASCII value of the pressed key when it returns
000238r 2               ;;
000238r 2               
000238r 2               get_key:
000238r 2               readKeypad:
000238r 2  A2 04          ldx #$04        ; Row 4 - counting down
00023Ar 2  A0 80          ldy #%10000000  ;
00023Cr 2               ScanRow:
00023Cr 2  8C 01 60       sty PORTA_1
00023Fr 2  AD 01 60       lda PORTA_1
000242r 2  29 0F          and #$0F  ; mask off keypad input - only low 4 (keypad column) bits are read
000244r 2  C9 00          cmp #$00
000246r 2  D0 0B          bne Row_Found   ; non-zero means a row output has been connected via a switch to a column input
000248r 2  CA             dex             ; zero means it hasn't been found, so check next row down
000249r 2  98             tya
00024Ar 2  4A             lsr
00024Br 2  A8             tay
00024Cr 2  C9 08          cmp #%00001000
00024Er 2  D0 EC          bne ScanRow
000250r 2  A9 FF          lda #$ff
000252r 2  60             rts
000253r 2               Row_Found:
000253r 2  8E rr rr       stx TEMP ; store row
000256r 2  A0 FF          ldy #$ff
000258r 2               FindCol:
000258r 2  C8             iny
000259r 2  4A             lsr
00025Ar 2  90 FC          bcc FindCol
00025Cr 2  98             tya
00025Dr 2  0A             asl
00025Er 2  0A             asl  ; col * 4
00025Fr 2  18             clc
000260r 2  6D rr rr       adc TEMP ; add row
000263r 2  AA             tax
000264r 2  BD rr rr       lda keypad_array,x
000267r 2  60             rts
000268r 2               
000268r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000268r 2               ;;
000268r 2               ;;       key = <INDEX> ; pressing a key returns a 4-bit number
000268r 2               ;;       calculated as (Column * 4 ) + Row, in the range
000268r 2               ;;       1 - 16 which acts as an index to a lookup-table.
000268r 2               ;;       The lookup table returns a byte value equal to the key's
000268r 2               ;;       numerical value
000268r 2               ;;       e.g.
000268r 2               ;;       button 1 returns byte $01 / 00000001
000268r 2               ;;       button F returns byte $0f / 00001111
000268r 2               ;;    ____________________________________________________
000268r 2               ;;   |     1 = <16> | 2 = <12> |    3 = <8> | A(10) = <4> |
000268r 2               ;;   |______________|__________|____________|_____________|
000268r 2               ;;   |     4 = <15> | 5 = <11> |    6 = <7> | B(11) = <3> |
000268r 2               ;;   |______________|__________|____________|_____________|
000268r 2               ;;   |     7 = <14> | 8 = <10> |    9 = <6> | C(12) = <2> |
000268r 2               ;;   |______________|__________|____________|_____________|
000268r 2               ;;   | E(14) = <13> | 0 = <9>  | F(15)= <5> | D(13) = <1> |
000268r 2               ;;   |______________|__________|____________|_____________|
000268r 2               ;;
000268r 2               ;;            Button  ..   D    C    B    A    F    9    6    3    0    8    5    2    E    7    4    1
000268r 2               ;;            <INDEX> 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16
000268r 2  00 0D 0C 0B  keypad_array: .byte $00, $0D, $0C, $0B, $0A, $0F, $09, $06, $03, $00, $08, $05, $02, $0E, $07, $04, $01
00026Cr 2  0A 0F 09 06  
000270r 2  03 00 08 05  
000279r 2               
000279r 2               
000279r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000279r 2               ;;
000279r 2               ;;  set ROW keypad outputs high as a source for triggering interrupt when a key is pressed
000279r 2               ;;
000279r 2               ;;
000279r 2               scan:
000279r 2  A0 F0          ldy #%11110000
00027Br 2  8C 01 60       sty PORTA_1
00027Er 2  60             rts
00027Fr 2               
00027Fr 2               
00027Fr 1               .include "../includes/functions.inc"
00027Fr 2               
00027Fr 2               
00027Fr 2                 .code
00027Fr 2               
00027Fr 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00027Fr 2               ;;
00027Fr 2               ;;        Use T1 Timer in free-run mode to put pulse
00027Fr 2               ;;        train on PB7 at rate determined by
00027Fr 2               ;;        the chosen delay. Tone output is enabled by
00027Fr 2               ;;        setting bit7 of ACR register and disabled by
00027Fr 2               ;;        resetting it. This should really be done by or'ing
00027Fr 2               ;;        %10000000 with the current value of ACR, to preserve
00027Fr 2               ;;        the other bit-values. At the moment it's just a two
00027Fr 2               ;;        state setting: 11000000 = Tone On, 01000000 = Tone off.
00027Fr 2               ;;        bit6 of ACR sets T1 in free-run repeat mode and stays set
00027Fr 2               ;;
00027Fr 2               
00027Fr 2               ;; T1 Timer values:
00027Fr 2               
00027Fr 2               ;; (Phi2 / (2 * f) ) - 2
00027Fr 2               ;;
00027Fr 2               ;;  Phi2 = 1MHz = 1,000,000
00027Fr 2               ;;
00027Fr 2               ;;    f  = count => Hex    => Counter Low : Counter High
00027Fr 2               ;; =========================================================
00027Fr 2               ;;  50Hz = 9998d => $270E  => T1CL = $0E  : T1CH = $27
00027Fr 2               ;; 100Hz = 4998d => $1386  => T1CL = $86  : T1CH = $13
00027Fr 2               ;; 200Hz = 2498d => $09C2  => T1CL = $C2  : T1CH = $09
00027Fr 2               ;; 500Hz =  998d => $03E6  => T1CL = $E6  : T1CH = $03
00027Fr 2               ;; 800Hz =  623d => $026F  => T1CL = $6F  : T1CH = $02
00027Fr 2               ;; 1kHz  =  498d => $01F2  => T1CL = $F2  : T1CH = $01
00027Fr 2               ;; 2kHz  =  248d => $00F8  => T1CL = $F8  : T1CH = $00
00027Fr 2               ;;
00027Fr 2               ;; USING VIA_2 for the beep Timer/output
00027Fr 2               ;;
00027Fr 2               ;; DO NOT CONFIGURE T1 TIMER settings in ioports.inc
00027Fr 2               ;; They are set here whenever the beep is needed
00027Fr 2               ;;
00027Fr 2               
00027Fr 2               count_50 = $270E
00027Fr 2               count_100 = $1386
00027Fr 2               count_200 = $09C2
00027Fr 2               count_500 = $03E6
00027Fr 2               count_800 = $026F
00027Fr 2               count_1k = $01F2
00027Fr 2               count_2k = $00F8
00027Fr 2               
00027Fr 2               ;;               50Hz, 100Hz, 200Hz, 500Hz, 800Hz, 1kHz, 2kHz
00027Fr 2  0E 27 86 13  beepList: .word $270E, $1386, $09C2, $03E6, $026F, $01F2, $00F8
000283r 2  C2 09 E6 03  
000287r 2  6F 02 F2 01  
00028Dr 2               
00028Dr 2               ;; Load A with the required index and call beep_from_list
00028Dr 2               
00028Dr 2               beep_from_list:
00028Dr 2               
00028Dr 2  0A             asl
00028Er 2  A8             tay
00028Fr 2  B9 rr rr       lda beepList,y
000292r 2  8D 04 50       sta T1CL_2
000295r 2  C8             iny
000296r 2  B9 rr rr       lda beepList,y
000299r 2  8D 05 50       sta T1CH_2
00029Cr 2               
00029Cr 2  A9 C0          lda #%11000000
00029Er 2  8D 0B 50       sta ACR_2
0002A1r 2                 ;jsr beep_on
0002A1r 2                 ; CONSIDER Change:
0002A1r 2                 ;
0002A1r 2                 ; jsr beep_on
0002A1r 2                 ; rts
0002A1r 2                 ;
0002A1r 2                 ; becomes
0002A1r 2                 ;
0002A1r 2  4C rr rr       jmp beep_on
0002A4r 2                 ;rts
0002A4r 2               
0002A4r 2               beep:
0002A4r 2               
0002A4r 2               ;; 800Hz keybeep
0002A4r 2               
0002A4r 2  A9 6F          lda #<count_800
0002A6r 2  8D 04 50       sta T1CL_2
0002A9r 2  A9 02          lda #>count_800
0002ABr 2  8D 05 50       sta T1CH_2
0002AEr 2                 ;jsr beep_on
0002AEr 2                 ; CONSIDER Change:
0002AEr 2                 ;
0002AEr 2                 ; jsr beep_on
0002AEr 2                 ; rts
0002AEr 2                 ;
0002AEr 2                 ; becomes
0002AEr 2                 ;
0002AEr 2  4C rr rr       jmp beep_on
0002B1r 2               
0002B1r 2                 ;rts
0002B1r 2               
0002B1r 2               beep_on:
0002B1r 2  A5 rr            lda TICKS
0002B3r 2  85 rr            sta BEEP_ON_TIME
0002B5r 2  A9 C0            lda #%11000000
0002B7r 2  8D 0B 50         sta ACR_2
0002BAr 2  F7 rr            smb7 FLAGS
0002BCr 2  60               rts
0002BDr 2               
0002BDr 2               beep_off:
0002BDr 2  77 rr          rmb7 FLAGS
0002BFr 2  A9 40          lda #%01000000
0002C1r 2  8D 0B 50       sta ACR_2
0002C4r 2  A9 0A          lda #$0A              ; restore standard 0.1s Beep length in case the caller had set a
0002C6r 2  85 rr          sta BEEP_DELAY_TIME   ; new BEEP_DELAY_TIME
0002C8r 2               
0002C8r 2  60             rts
0002C9r 2               
0002C9r 2               beep_from_pointer:  ; put the 2 bytes for the required count into BEEP_POINTER and BEEP_POINTER + 1 and then
0002C9r 2                                   ; call beep_from_pointer
0002C9r 2               
0002C9r 2               
0002C9r 2  A5 rr          lda BEEP_POINTER
0002CBr 2  8D 04 50       sta T1CL_2
0002CEr 2  A5 rr          lda BEEP_POINTER + 1
0002D0r 2  8D 05 50       sta T1CH_2
0002D3r 2               
0002D3r 2                 ;jsr beep_on
0002D3r 2                 ; CONSIDER Change:
0002D3r 2                 ;
0002D3r 2                 ; jsr beep_on
0002D3r 2                 ; rts
0002D3r 2                 ;
0002D3r 2                 ; becomes
0002D3r 2                 ;
0002D3r 2  4C rr rr       jmp beep_on
0002D6r 2               
0002D6r 2                 ;rts
0002D6r 2               
0002D6r 2               beep2: ; high/low beep for boot-up success notification
0002D6r 2               
0002D6r 2               ; 1kHz
0002D6r 2  A9 F2          lda #<count_1k
0002D8r 2  8D 04 50       sta T1CL_2
0002DBr 2  A9 01          lda #>count_1k
0002DDr 2  8D 05 50       sta T1CH_2
0002E0r 2               
0002E0r 2  A9 C0          lda #%11000000
0002E2r 2  8D 0B 50       sta ACR_2
0002E5r 2               
0002E5r 2  20 rr rr       jsr beep_delay
0002E8r 2               
0002E8r 2               ; 800Hz
0002E8r 2  A9 6F          lda #<count_800
0002EAr 2  8D 04 50       sta T1CL_2
0002EDr 2  A9 02          lda #>count_800
0002EFr 2  8D 05 50       sta T1CH_2
0002F2r 2               
0002F2r 2  A9 40          lda #%01000000
0002F4r 2  8D 0B 50       sta ACR_2
0002F7r 2  60             rts
0002F8r 2               
0002F8r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002F8r 2               ;;
0002F8r 2               ;;      basic loop delay to make the beep
0002F8r 2               ;;
0002F8r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002F8r 2               
0002F8r 2               beep_delay:
0002F8r 2  A2 FF          ldx #$ff
0002FAr 2  A0 38          ldy #$38  ; <= set here to adjust the beep length
0002FCr 2               @loop:
0002FCr 2  EA             nop
0002FDr 2  CA             dex
0002FEr 2  D0 FC          bne @loop
000300r 2  88             dey
000301r 2  D0 F9          bne @loop
000303r 2  60             rts
000304r 2               
000304r 2               
000304r 2               
000304r 2               
000304r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000304r 2               ;;
000304r 2               ;;          convert an 8-bit binary number from Accumulator, in range 00000000 -> 11111111 ($00 to $FF)
000304r 2               ;;          to its HEX number encode as ASCII -  using a simple lookup table. Store each digit in RAM. Accumulator
000304r 2               ;;          holds the last/low digit on return.
000304r 2               ;;
000304r 2               
000304r 2               
000304r 2               bintohex:
000304r 2  48             pha
000305r 2  4A             lsr
000306r 2  4A             lsr
000307r 2  4A             lsr
000308r 2  4A             lsr
000309r 2  AA             tax
00030Ar 2  BD rr rr       lda hexascii,x
00030Dr 2  8D rr rr       sta HI_DIGIT
000310r 2  68             pla
000311r 2  29 0F          and #$0f
000313r 2  AA             tax
000314r 2  BD rr rr       lda hexascii,x
000317r 2  8D rr rr       sta LO_DIGIT
00031Ar 2  60             rts
00031Br 2               
00031Br 2  30 31 32 33  hexascii: .byte "0123456789ABCDEF"
00031Fr 2  34 35 36 37  
000323r 2  38 39 41 42  
00032Br 2               
00032Br 2               
00032Br 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00032Br 2               ;;
00032Br 2               ;;    convert a binary (hex) value in Accumulator into
00032Br 2               ;;    its ASCII equivalent character in decimal 0-99 and print it
00032Br 2               ;;    this converts hex/binary numbers from the RTC into human readable
00032Br 2               ;;    decimal for display on clock
00032Br 2               
00032Br 2               
00032Br 2               bintoascii:
00032Br 2               
00032Br 2  C9 0A          cmp #10
00032Dr 2  30 0F          bmi single_figure
00032Fr 2  0A             asl
000330r 2  AA             tax
000331r 2  BD rr rr       lda binascii,x
000334r 2  20 rr rr       jsr print_char
000337r 2               
000337r 2  E8             inx
000338r 2               
000338r 2  BD rr rr       lda binascii,x
00033Br 2                 ;jsr print_char
00033Br 2                 ; CONSIDER CHANGE
00033Br 2  4C rr rr       jmp print_char
00033Er 2                 ;rts
00033Er 2               
00033Er 2               single_figure:
00033Er 2  0A             asl
00033Fr 2  AA             tax
000340r 2  E8             inx
000341r 2  BD rr rr       lda binascii,x
000344r 2                 ;jsr print_char
000344r 2                 ;CONSIDER CHANGE
000344r 2  4C rr rr       jmp print_char
000347r 2                 ;rts
000347r 2               
000347r 2               bintoascii_2:
000347r 2               
000347r 2  C9 0A          cmp #10
000349r 2  30 0F          bmi single_figure_2
00034Br 2  0A             asl
00034Cr 2  AA             tax
00034Dr 2  BD rr rr       lda binascii,x
000350r 2  20 rr rr       jsr print_2_char
000353r 2               
000353r 2  E8             inx
000354r 2               
000354r 2  BD rr rr       lda binascii,x
000357r 2                 ;jsr print_2_char
000357r 2                 ; CONSIDER CHANGE
000357r 2  4C rr rr       jmp print_2_char
00035Ar 2                 ;rts
00035Ar 2               
00035Ar 2               single_figure_2:
00035Ar 2  0A             asl
00035Br 2  AA             tax
00035Cr 2  E8             inx
00035Dr 2  BD rr rr       lda binascii,x
000360r 2                 ;jsr print_2_char
000360r 2                 ; CONSIDER CHANGE
000360r 2  4C rr rr       jmp print_2_char
000363r 2                 ;rts
000363r 2               
000363r 2               
000363r 2  30 30 30 31  binascii: .byte "00010203040506070809"
000367r 2  30 32 30 33  
00036Br 2  30 34 30 35  
000377r 2  31 30 31 31            .byte "10111213141516171819"
00037Br 2  31 32 31 33  
00037Fr 2  31 34 31 35  
00038Br 2  32 30 32 31            .byte "20212223242526272829"
00038Fr 2  32 32 32 33  
000393r 2  32 34 32 35  
00039Fr 2  33 30 33 31            .byte "30313233343536373839"
0003A3r 2  33 32 33 33  
0003A7r 2  33 34 33 35  
0003B3r 2  34 30 34 31            .byte "40414243444546474849"
0003B7r 2  34 32 34 33  
0003BBr 2  34 34 34 35  
0003C7r 2  35 30 35 31            .byte "50515253545556575859"
0003CBr 2  35 32 35 33  
0003CFr 2  35 34 35 35  
0003DBr 2  36 30 36 31            .byte "60616263646566676869"
0003DFr 2  36 32 36 33  
0003E3r 2  36 34 36 35  
0003EFr 2  37 30 37 31            .byte "70717273747576777879"
0003F3r 2  37 32 37 33  
0003F7r 2  37 34 37 35  
000403r 2  38 30 38 31            .byte "80818283848586878889"
000407r 2  38 32 38 33  
00040Br 2  38 34 38 35  
000417r 2  39 30 39 31            .byte "90919293949596979899"
00041Br 2  39 32 39 33  
00041Fr 2  39 34 39 35  
00042Br 2               
00042Br 2               
00042Br 2               
00042Br 2               
00042Br 2               
00042Br 1               .include "../includes/rtc.inc"
00042Br 2               
00042Br 2               
00042Br 2               
00042Br 2               
00042Br 2                 .code
00042Br 2               
00042Br 2               
00042Br 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00042Br 2               ;;
00042Br 2               ;;                          RTC / Jiffy Tick
00042Br 2               ;;
00042Br 2               
00042Br 2               
00042Br 2               
00042Br 2               rtc:
00042Br 2               
00042Br 2               
00042Br 2               ;;  RTC stores ticks at 10ms intervals into a 4-byte (32 bit) value
00042Br 2               ;;
00042Br 2               ;;  as each byte rolls over the next one is incremented
00042Br 2               ;;  on a tick that doesn't roll over the TIME OF DAY
00042Br 2               ;;  is updated
00042Br 2               
00042Br 2  E6 rr          inc TICKS
00042Dr 2  D0 0A          bne inc_MET
00042Fr 2  E6 rr          inc TICKS + 1
000431r 2  D0 06          bne inc_MET
000433r 2  E6 rr          inc TICKS + 2
000435r 2  D0 02          bne inc_MET
000437r 2  E6 rr          inc TICKS + 3
000439r 2               
000439r 2               ;;
000439r 2               ;;  Every time it's called we increment the "hundredths of a second" byte
000439r 2               ;;
000439r 2               ;;  When there's been 100 x 10ms (i.e. 1 second) we increment the seconds
000439r 2               ;;
000439r 2               ;; We keep the times in single digits, SECONDS, TEN_SECONDS, MINUTES,
000439r 2               ;; TEN_MINUTES etc.... to make it easy to display
000439r 2               ;; The values are stored in RAM as binary values, and need to be converted to
000439r 2               ;; ASCII characters when they are displayed on LCD
000439r 2               ;;
000439r 2               ;;  The basis of this routine comes from http://wilsonminesco.com/6502interrupts/#2.1
000439r 2               ;;
000439r 2               inc_MET:
000439r 2  E6 rr          inc CENTISEC
00043Br 2  A5 rr          lda CENTISEC
00043Dr 2  C9 64          cmp #100
00043Fr 2  30 40          bmi end_MET
000441r 2  64 rr          stz CENTISEC
000443r 2               
000443r 2  E6 rr          inc SECONDS
000445r 2  A5 rr          lda SECONDS
000447r 2  C9 0A          cmp #10
000449r 2  30 36          bmi end_MET
00044Br 2  64 rr          stz SECONDS
00044Dr 2  E6 rr          inc TEN_SECONDS
00044Fr 2               
00044Fr 2  A5 rr          lda TEN_SECONDS
000451r 2  C9 06          cmp #6
000453r 2  30 2C          bmi end_MET
000455r 2  64 rr          stz TEN_SECONDS
000457r 2               
000457r 2  E6 rr          inc MINUTES
000459r 2  A5 rr          lda MINUTES
00045Br 2  C9 0A          cmp #10
00045Dr 2  30 22          bmi end_MET
00045Fr 2  64 rr          stz MINUTES
000461r 2               
000461r 2  E6 rr          inc TEN_MINUTES
000463r 2  A5 rr          lda TEN_MINUTES
000465r 2  C9 06          cmp #6
000467r 2  30 18          bmi end_MET
000469r 2  64 rr          stz TEN_MINUTES
00046Br 2               
00046Br 2  E6 rr          inc HRS
00046Dr 2  A5 rr          lda HRS
00046Fr 2  C9 0A          cmp #10
000471r 2  30 0E          bmi end_MET
000473r 2  64 rr          stz HRS
000475r 2               
000475r 2  E6 rr          inc TEN_HRS
000477r 2  A5 rr          lda TEN_HRS
000479r 2  C9 0A          cmp #10
00047Br 2  30 04          bmi end_MET
00047Dr 2  64 rr          stz TEN_HRS
00047Fr 2               
00047Fr 2  E6 rr          inc HUNDRED_HRS
000481r 2               
000481r 2               end_MET:
000481r 2  60             rts
000482r 2               
000482r 2               
000482r 1               
000482r 1               
000482r 1               
000482r 1               
000482r 1               
000482r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000482r 1               ;;
000482r 1               ;;         START HERE
000482r 1               ;;
000482r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000482r 1               
000482r 1               .code
000482r 1               
000482r 1               
000482r 1               
000482r 1               
000482r 1               
000482r 1               
000482r 1               reset:
000482r 1               
000482r 1               
000482r 1  A2 FF          ldx #$ff
000484r 1  9A             txs
000485r 1  58             cli      ; interrupts ON
000486r 1               
000486r 1                 ;; IOPORTS
000486r 1  20 rr rr       jsr via_1_init ; set-up VIA_1 for LCD/Keypad
000489r 1  20 rr rr       jsr via_2_init ; set-up VIA_2 for general I/O
00048Cr 1  20 rr rr       jsr via_3_init ; set-up VIA_3 for general I/O
00048Fr 1               
00048Fr 1                 ;; LCD
00048Fr 1  20 rr rr       jsr lcd_start ; set-up various features of lcd
000492r 1  20 rr rr       jsr lcd_2_start ; set-up various features of lcd
000495r 1               
000495r 1               
000495r 1               init_variables:
000495r 1               
000495r 1  64 rr          stz TICKS
000497r 1  64 rr          stz TICKS + 1
000499r 1  64 rr          stz TICKS + 2
00049Br 1  64 rr          stz TICKS + 3
00049Dr 1  64 rr          stz DUMP_POINTER
00049Fr 1  64 rr          stz DUMP_POINTER + 1
0004A1r 1  64 rr          stz MESSAGE_POINTER
0004A3r 1  64 rr          stz MESSAGE_POINTER + 1
0004A5r 1  A9 3F          lda #$3F
0004A7r 1  85 rr          sta BEEP_POINTER
0004A9r 1  A9 03          lda #$03
0004ABr 1  85 rr          sta BEEP_POINTER + 1
0004ADr 1  A9 0A          lda #$0A              ; standard BEEP = 10 ticks, ~100mS
0004AFr 1  85 rr          sta BEEP_DELAY_TIME
0004B1r 1  64 rr          stz TOGGLE_TIME
0004B3r 1  64 rr          stz CLOCK_LAST
0004B5r 1  64 rr          stz LED2_LAST
0004B7r 1  64 rr          stz LED3_LAST
0004B9r 1  64 rr          stz CENTISEC
0004BBr 1  64 rr          stz FLAGS
0004BDr 1  64 rr          stz SECONDS
0004BFr 1  64 rr          stz TEN_SECONDS
0004C1r 1  64 rr          stz MINUTES
0004C3r 1  64 rr          stz HRS
0004C5r 1  64 rr          stz TEN_HRS
0004C7r 1  64 rr          stz TEN_MINUTES
0004C9r 1  64 rr          stz HUNDRED_HRS
0004CBr 1  9C rr rr       stz TEMP
0004CEr 1  9C rr rr       stz TEMP2
0004D1r 1  9C rr rr       stz TENS
0004D4r 1  64 rr          stz MEM_POINTER
0004D6r 1  64 rr          stz MEM_POINTER + 1
0004D8r 1  9C rr rr       stz HI_DIGIT
0004DBr 1  9C rr rr       stz LO_DIGIT
0004DEr 1  A9 10          lda #$10
0004E0r 1  85 rr          sta LAST_KIT
0004E2r 1               
0004E2r 1  A9 rr          lda #<title
0004E4r 1  85 rr          sta MESSAGE_POINTER
0004E6r 1  A9 rr          lda #>title
0004E8r 1  85 rr          sta MESSAGE_POINTER + 1
0004EAr 1  20 rr rr       jsr print1
0004EDr 1               
0004EDr 1               
0004EDr 1               memory_test:
0004EDr 1               
0004EDr 1  A9 rr          lda #<mem_start_msg
0004EFr 1  85 rr          sta MESSAGE_POINTER
0004F1r 1  A9 rr          lda #>mem_start_msg
0004F3r 1  85 rr          sta MESSAGE_POINTER + 1
0004F5r 1  20 rr rr       jsr print2
0004F8r 1               
0004F8r 1               ;; test then clear RAM between
0004F8r 1               ;; $0200 - $3FFF - avoids the ZP and STACK areas
0004F8r 1               
0004F8r 1  A9 02          lda #$02            ; start at $0200
0004FAr 1  85 rr          sta MEM_POINTER + 1
0004FCr 1  A0 00          ldy #$00
0004FEr 1               loop_ram:
0004FEr 1  A9 AA          lda #$AA              ; test with 10101010
000500r 1  91 rr          sta (MEM_POINTER),y   ; write test value to RAM
000502r 1  A9 FF          lda #$FF              ; remove test value from A
000504r 1  B1 rr          lda (MEM_POINTER),y   ; read RAM contents into A
000506r 1  C9 AA          cmp #$AA              ; compare to expected value
000508r 1  D0 4E          bne mem_fail_1
00050Ar 1  A9 55          lda #$55              ; repeat test with 01010101
00050Cr 1  91 rr          sta (MEM_POINTER),y
00050Er 1  A9 FF          lda #$FF
000510r 1  B1 rr          lda (MEM_POINTER),y
000512r 1  C9 55          cmp #$55
000514r 1  D0 59          bne mem_fail_2
000516r 1  A9 00          lda #$00              ; clear RAM to all zeros
000518r 1  91 rr          sta (MEM_POINTER),y
00051Ar 1  C8             iny
00051Br 1  F0 03          beq next_page
00051Dr 1  4C rr rr       jmp loop_ram
000520r 1               next_page:
000520r 1  A5 rr          lda MEM_POINTER + 1
000522r 1  1A             inc
000523r 1  C9 40          cmp #$40
000525r 1  F0 05          beq done_ram
000527r 1  85 rr          sta MEM_POINTER + 1
000529r 1  4C rr rr       jmp loop_ram
00052Cr 1               
00052Cr 1               done_ram:
00052Cr 1               
00052Cr 1  20 rr rr       jsr beep2
00052Fr 1  A9 rr          lda #<mem_pass_msg
000531r 1  85 rr          sta MESSAGE_POINTER
000533r 1  A9 rr          lda #>mem_pass_msg
000535r 1  85 rr          sta MESSAGE_POINTER + 1
000537r 1                 ;jsr lcd_clear
000537r 1  20 rr rr       jsr print3
00053Ar 1  D7 rr          smb5 FLAGS
00053Cr 1  A9 rr          lda #<start_msg
00053Er 1  85 rr          sta MESSAGE_POINTER
000540r 1  A9 rr          lda #>start_msg
000542r 1  85 rr          sta MESSAGE_POINTER + 1
000544r 1  20 rr rr       jsr print4
000547r 1  20 rr rr       jsr lcd_2_clear
00054Ar 1  A9 rr          lda #<emt
00054Cr 1  85 rr          sta MESSAGE_POINTER
00054Er 1  A9 rr          lda #>emt
000550r 1  85 rr          sta MESSAGE_POINTER + 1
000552r 1  20 rr rr       jsr print2_2
000555r 1  4C rr rr       jmp user_ram
000558r 1               
000558r 1               mem_fail_1:
000558r 1  20 rr rr       jsr beep
00055Br 1  20 rr rr       jsr beep2
00055Er 1  20 rr rr       jsr beep
000561r 1  A9 rr          lda #<mem_fail_msg_1
000563r 1  85 rr          sta MESSAGE_POINTER
000565r 1  A9 rr          lda #>mem_fail_msg_1
000567r 1  85 rr          sta MESSAGE_POINTER + 1
000569r 1  20 rr rr       jsr print3
00056Cr 1  4C rr rr       jmp loop
00056Fr 1               
00056Fr 1               mem_fail_2:
00056Fr 1  20 rr rr       jsr beep
000572r 1  20 rr rr       jsr beep2
000575r 1  20 rr rr       jsr beep
000578r 1  A9 rr          lda #<mem_fail_msg_2
00057Ar 1  85 rr          sta MESSAGE_POINTER
00057Cr 1  A9 rr          lda #>mem_fail_msg_2
00057Er 1  85 rr          sta MESSAGE_POINTER + 1
000580r 1  20 rr rr       jsr print3
000583r 1  4C rr rr       jmp loop
000586r 1               
000586r 1               
000586r 1               
000586r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000586r 1               ;;
000586r 1               ;;  load the User RAM area $3F00 with the bytes
000586r 1               ;;  set in "userProg" - currently a small routine that
000586r 1               ;;  changed the contents of MESSAGE_POINTER (+1) to point
000586r 1               ;;  at $2000 instead. Then a string "userPrompt" is stored
000586r 1               ;;  at $2000. Running the user sub-routine (<shift>5) will now show
000586r 1               ;;  the "userPrompt" string on line4 of the main LCD
000586r 1               ;;  The user prog at $3F00 can be edited at will - it also has the
000586r 1               ;;  location of "print4" automatically inserted.
000586r 1               ;;
000586r 1               
000586r 1               ;; Put a sample program into "User Ram" at $3F00
000586r 1               user_ram:
000586r 1  A0 00          ldy #$00
000588r 1               @loop:
000588r 1  B9 rr rr       lda userProg,y
00058Br 1  F0 07          beq @exit
00058Dr 1  99 00 3F       sta $3F00,y
000590r 1  C8             iny
000591r 1  4C rr rr       jmp @loop
000594r 1               @exit:
000594r 1               
000594r 1               ;; Put a sample text string in "User Text" @ $2000
000594r 1               prompt:
000594r 1  A0 00          ldy #$00
000596r 1               @loop:
000596r 1  B9 rr rr       lda userPrompt,y
000599r 1  F0 07          beq @exit
00059Br 1  99 00 20       sta $2000,y
00059Er 1  C8             iny
00059Fr 1  4C rr rr       jmp @loop
0005A2r 1               @exit:
0005A2r 1               
0005A2r 1               
0005A2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A2r 1               ;;
0005A2r 1               ;;                 Main Loop
0005A2r 1               ;;
0005A2r 1               
0005A2r 1               
0005A2r 1               loop:
0005A2r 1               
0005A2r 1  CB             wai
0005A3r 1  20 rr rr       jsr check_flags
0005A6r 1  20 rr rr       jsr clock_via_3
0005A9r 1  4C rr rr       jmp loop
0005ACr 1               
0005ACr 1               
0005ACr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005ACr 1               ;;
0005ACr 1               ;;                  FUNCTIONS
0005ACr 1               ;;
0005ACr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005ACr 1               
0005ACr 1               
0005ACr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005ACr 1               ;;
0005ACr 1               ;;     FLAGS - for control of background tasks
0005ACr 1               ;;
0005ACr 1               ;;   bit7   | bit6   | bit5   |  bit4 | bit3 | bit2 | bit1 | bit0
0005ACr 1               ;; =========|========|========|=======|======|======|======|===========
0005ACr 1               ;;   beep   |        | clock  |       |      | kitt |      | mem block
0005ACr 1               ;;   active |        | active |       |      | leds |      | update view
0005ACr 1               
0005ACr 1               
0005ACr 1               check_flags:
0005ACr 1               
0005ACr 1               flag_zero:
0005ACr 1  0F rr 03       bbr0 FLAGS, flag_two
0005AFr 1  20 rr rr       jsr update_block_address
0005B2r 1               flag_two:
0005B2r 1  2F rr 03       bbr2 FLAGS, flag_five
0005B5r 1  20 rr rr       jsr kit_led_via_2
0005B8r 1               flag_five:
0005B8r 1  5F rr 03       bbr5 FLAGS, flag_seven
0005BBr 1  20 rr rr       jsr clock_time
0005BEr 1               flag_seven:
0005BEr 1  7F rr 03       bbr7 FLAGS, flag_three
0005C1r 1  20 rr rr       jsr check_beep
0005C4r 1               flag_three:
0005C4r 1  60             rts
0005C5r 1               
0005C5r 1               ;;;;;;;;;;
0005C5r 1               ;;;;;;;;;;
0005C5r 1               ;;;
0005C5r 1               check_beep:
0005C5r 1  38             sec
0005C6r 1  A5 rr          lda TICKS
0005C8r 1  E5 rr          sbc BEEP_ON_TIME
0005CAr 1  C5 rr          cmp BEEP_DELAY_TIME
0005CCr 1  90 03          bcc @exit
0005CEr 1  20 rr rr       jsr beep_off
0005D1r 1               @exit:
0005D1r 1  60             rts
0005D2r 1               
0005D2r 1               kit_led_via_2:
0005D2r 1               
0005D2r 1  38             sec
0005D3r 1  A5 rr          lda TICKS
0005D5r 1  E5 rr          sbc LED3_LAST
0005D7r 1  C9 0A          cmp #10
0005D9r 1  90 15          bcc exit_kit_leds
0005DBr 1  A4 rr          ldy LAST_KIT
0005DDr 1  B9 rr rr       lda kitLeds,y
0005E0r 1  8D 01 50       sta PORTA_2
0005E3r 1  88             dey
0005E4r 1  D0 04          bne @exit
0005E6r 1  A0 10          ldy #$10
0005E8r 1  84 rr          sty LAST_KIT
0005EAr 1               @exit:
0005EAr 1  84 rr          sty LAST_KIT
0005ECr 1  A5 rr          lda TICKS
0005EEr 1  85 rr          sta LED3_LAST
0005F0r 1               exit_kit_leds:
0005F0r 1  60             rts
0005F1r 1               
0005F1r 1               clock_via_3:
0005F1r 1  38             sec
0005F2r 1  A5 rr          lda TICKS
0005F4r 1  E5 rr          sbc LED2_LAST
0005F6r 1  C9 64          cmp #100
0005F8r 1  90 0F          bcc exit_clock_via_3
0005FAr 1  A5 rr          lda TEN_SECONDS
0005FCr 1  0A             asl
0005FDr 1  0A             asl
0005FEr 1  0A             asl
0005FFr 1  0A             asl
000600r 1  05 rr          ora SECONDS
000602r 1  8D 00 48       sta PORTB_3
000605r 1               
000605r 1                 ;lda TEN_MINUTES
000605r 1                 ;asl
000605r 1                 ;asl
000605r 1                 ;asl
000605r 1                 ;asl
000605r 1                 ;ora MINUTES
000605r 1                 ;sta PORTB_2
000605r 1               
000605r 1               @exit:
000605r 1  A5 rr          lda TICKS
000607r 1  85 rr          sta LED2_LAST
000609r 1               exit_clock_via_3:
000609r 1  60             rts
00060Ar 1               
00060Ar 1               
00060Ar 1               update_block_address:
00060Ar 1  20 rr rr       jsr lcd_line_2
00060Dr 1  38             sec
00060Er 1  A5 rr          lda TICKS
000610r 1  E5 rr          sbc TOGGLE_TIME
000612r 1  C9 64          cmp #$64
000614r 1  90 07          bcc @exit
000616r 1  20 rr rr       jsr block_address
000619r 1  A5 rr          lda TICKS
00061Br 1  85 rr          sta TOGGLE_TIME
00061Dr 1               @exit:
00061Dr 1  60             rts
00061Er 1               
00061Er 1               clock_time:
00061Er 1  38             sec
00061Fr 1  A5 rr          lda TICKS
000621r 1  E5 rr          sbc CLOCK_LAST
000623r 1  C9 32          cmp #50
000625r 1  90 3C          bcc @exit
000627r 1  20 rr rr       jsr lcd_2_cursor_off
00062Ar 1  20 rr rr       jsr lcd_2_line_1
00062Dr 1  A5 rr          lda HUNDRED_HRS
00062Fr 1  20 rr rr       jsr bintoascii_2
000632r 1  A5 rr          lda TEN_HRS
000634r 1  20 rr rr       jsr bintoascii_2
000637r 1  A5 rr          lda HRS
000639r 1  20 rr rr       jsr bintoascii_2
00063Cr 1  A9 3A          lda #':'
00063Er 1  20 rr rr       jsr print_2_char
000641r 1  A5 rr          lda TEN_MINUTES
000643r 1  20 rr rr       jsr bintoascii_2
000646r 1  A5 rr          lda MINUTES
000648r 1  20 rr rr       jsr bintoascii_2
00064Br 1  A9 3A          lda #':'
00064Dr 1  20 rr rr       jsr print_2_char
000650r 1  A5 rr          lda TEN_SECONDS
000652r 1  20 rr rr       jsr bintoascii_2
000655r 1  A5 rr          lda SECONDS
000657r 1  20 rr rr       jsr bintoascii_2
00065Ar 1  A9 20          lda #' '
00065Cr 1  20 rr rr       jsr print_2_char
00065Fr 1  A5 rr          lda TICKS
000661r 1  85 rr          sta CLOCK_LAST
000663r 1               @exit:
000663r 1  60             rts
000664r 1               
000664r 1               
000664r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000664r 1               ;;
000664r 1               ;;      update screen when new memory location is selected
000664r 1               ;;
000664r 1               ;;
000664r 1               new_address:
000664r 1  20 rr rr       jsr lcd_clear
000667r 1  20 rr rr       jsr lcd_cursor_on
00066Ar 1  A9 rr          lda #<new_address_msg
00066Cr 1  85 rr          sta MESSAGE_POINTER
00066Er 1  A9 rr          lda #>new_address_msg
000670r 1  85 rr          sta MESSAGE_POINTER + 1
000672r 1  20 rr rr       jsr print1
000675r 1  20 rr rr       jsr lcd_line_2
000678r 1               print_address:
000678r 1  A9 24          lda #'$'
00067Ar 1  20 rr rr       jsr print_char
00067Dr 1  A5 rr          lda DUMP_POINTER + 1
00067Fr 1  20 rr rr       jsr bintohex
000682r 1  AD rr rr       lda HI_DIGIT
000685r 1  20 rr rr       jsr print_char
000688r 1  AD rr rr       lda LO_DIGIT
00068Br 1  20 rr rr       jsr print_char
00068Er 1  A5 rr          lda DUMP_POINTER
000690r 1  20 rr rr       jsr bintohex
000693r 1  AD rr rr       lda HI_DIGIT
000696r 1  20 rr rr       jsr print_char
000699r 1  AD rr rr       lda LO_DIGIT
00069Cr 1  20 rr rr       jsr print_char
00069Fr 1  A9 20          lda #' '
0006A1r 1  20 rr rr       jsr print_char
0006A4r 1  A0 00          ldy #$00
0006A6r 1  B1 rr          lda (DUMP_POINTER),y
0006A8r 1  20 rr rr       jsr bintohex
0006ABr 1  AD rr rr       lda HI_DIGIT
0006AEr 1  20 rr rr       jsr print_char
0006B1r 1  AD rr rr       lda LO_DIGIT
0006B4r 1  20 rr rr       jsr print_char
0006B7r 1  A9 20          lda #' '
0006B9r 1  20 rr rr       jsr print_char
0006BCr 1  B1 rr          lda (DUMP_POINTER),y
0006BEr 1  20 rr rr       jsr print_char
0006C1r 1  A9 rr          lda #<splash
0006C3r 1  85 rr          sta MESSAGE_POINTER
0006C5r 1  A9 rr          lda #>splash
0006C7r 1  85 rr          sta MESSAGE_POINTER + 1
0006C9r 1  20 rr rr       jsr print3   ; add cursor after re-writing the address/data line
0006CCr 1  60             rts
0006CDr 1               
0006CDr 1               
0006CDr 1               
0006CDr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006CDr 1               ;;
0006CDr 1               ;;      display 8 bytes of data for a "block" of memory
0006CDr 1               ;;
0006CDr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006CDr 1               
0006CDr 1               block_address:
0006CDr 1               
0006CDr 1  20 rr rr       jsr lcd_clear
0006D0r 1  20 rr rr       jsr lcd_cursor_off
0006D3r 1  A9 rr          lda #<block_address_msg
0006D5r 1  85 rr          sta MESSAGE_POINTER
0006D7r 1  A9 rr          lda #>block_address_msg
0006D9r 1  85 rr          sta MESSAGE_POINTER + 1
0006DBr 1  20 rr rr       jsr print1
0006DEr 1  20 rr rr       jsr lcd_line_2
0006E1r 1  A0 00          ldy #$00
0006E3r 1  A9 24          lda #'$'
0006E5r 1  20 rr rr       jsr print_char
0006E8r 1  A5 rr          lda DUMP_POINTER + 1
0006EAr 1  20 rr rr       jsr bintohex
0006EDr 1  AD rr rr       lda HI_DIGIT
0006F0r 1  20 rr rr       jsr print_char
0006F3r 1  AD rr rr       lda LO_DIGIT
0006F6r 1  20 rr rr       jsr print_char
0006F9r 1  A5 rr          lda DUMP_POINTER
0006FBr 1  20 rr rr       jsr bintohex
0006FEr 1  AD rr rr       lda HI_DIGIT
000701r 1  20 rr rr       jsr print_char
000704r 1  AD rr rr       lda LO_DIGIT
000707r 1  20 rr rr       jsr print_char
00070Ar 1  20 rr rr       jsr lcd_line_3
00070Dr 1               loop1:
00070Dr 1  B1 rr          lda (DUMP_POINTER),y
00070Fr 1  20 rr rr       jsr bintohex
000712r 1  AD rr rr       lda HI_DIGIT
000715r 1  20 rr rr       jsr print_char
000718r 1  AD rr rr       lda LO_DIGIT
00071Br 1  20 rr rr       jsr print_char
00071Er 1  B1 rr          lda (DUMP_POINTER),y
000720r 1  C8             iny
000721r 1  C0 08          cpy #$08
000723r 1  D0 E8          bne loop1
000725r 1  A9 20          lda #' '
000727r 1  20 rr rr       jsr print_char
00072Ar 1  A9 48          lda #'H'
00072Cr 1  20 rr rr       jsr print_char
00072Fr 1  A9 65          lda #'e'
000731r 1  20 rr rr       jsr print_char
000734r 1  A9 78          lda #'x'
000736r 1  20 rr rr       jsr print_char
000739r 1  20 rr rr       jsr lcd_line_4
00073Cr 1  A0 00          ldy #$00
00073Er 1               loop2:
00073Er 1  A9 20          lda #$20
000740r 1  20 rr rr       jsr print_char
000743r 1  B1 rr          lda (DUMP_POINTER),y
000745r 1  20 rr rr       jsr print_char
000748r 1  C8             iny
000749r 1  C0 08          cpy #$08
00074Br 1  D0 F1          bne loop2
00074Dr 1  A9 20          lda #' '
00074Fr 1  20 rr rr       jsr print_char
000752r 1  A9 43          lda #'C'
000754r 1  20 rr rr       jsr print_char
000757r 1  A9 68          lda #'h'
000759r 1  20 rr rr       jsr print_char
00075Cr 1  A9 72          lda #'r'
00075Er 1  20 rr rr       jsr print_char
000761r 1  60             rts
000762r 1               
000762r 1               
000762r 1               
000762r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000762r 1               ;;
000762r 1               ;;      Monitor function - decrement the selected address
000762r 1               ;;
000762r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000762r 1               
000762r 1               decrement_address:
000762r 1               
000762r 1  38             sec
000763r 1  A5 rr          lda DUMP_POINTER
000765r 1  E9 01          sbc #$01
000767r 1  85 rr          sta DUMP_POINTER
000769r 1  8D rr rr       sta BYTE
00076Cr 1  A5 rr          lda DUMP_POINTER + 1
00076Er 1  E9 00          sbc #$00
000770r 1  85 rr          sta DUMP_POINTER + 1
000772r 1  8D rr rr       sta BYTE + 1
000775r 1  60             rts
000776r 1               
000776r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000776r 1               ;;
000776r 1               ;;      Monitor function - increment the selected address
000776r 1               ;;
000776r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000776r 1               
000776r 1               increment_address:
000776r 1               
000776r 1  18             clc
000777r 1  A5 rr          lda DUMP_POINTER
000779r 1  69 01          adc #$01
00077Br 1  85 rr          sta DUMP_POINTER
00077Dr 1  8D rr rr       sta BYTE
000780r 1  A5 rr          lda DUMP_POINTER + 1
000782r 1  69 00          adc #$00
000784r 1  85 rr          sta DUMP_POINTER + 1
000786r 1  8D rr rr       sta BYTE + 1
000789r 1  60             rts
00078Ar 1               
00078Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00078Ar 1               ;;
00078Ar 1               ;;      Monitor function - increment the selected block of  addresses by 8
00078Ar 1               ;;
00078Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00078Ar 1               
00078Ar 1               increment_block:
00078Ar 1               
00078Ar 1  18             clc
00078Br 1  A5 rr          lda DUMP_POINTER
00078Dr 1  69 08          adc #$08
00078Fr 1  85 rr          sta DUMP_POINTER
000791r 1  8D rr rr       sta BYTE
000794r 1  A5 rr          lda DUMP_POINTER + 1
000796r 1  69 00          adc #$00
000798r 1  85 rr          sta DUMP_POINTER + 1
00079Ar 1  8D rr rr       sta BYTE + 1
00079Dr 1  60             rts
00079Er 1               
00079Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00079Er 1               ;;
00079Er 1               ;;      Monitor function - decrement the selected block of  addresses by 8
00079Er 1               ;;
00079Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00079Er 1               
00079Er 1               decrement_block:
00079Er 1               
00079Er 1  38             sec
00079Fr 1  A5 rr          lda DUMP_POINTER
0007A1r 1  E9 08          sbc #$08
0007A3r 1  85 rr          sta DUMP_POINTER
0007A5r 1  8D rr rr       sta BYTE
0007A8r 1  A5 rr          lda DUMP_POINTER + 1
0007AAr 1  E9 00          sbc #$00
0007ACr 1  85 rr          sta DUMP_POINTER + 1
0007AEr 1  8D rr rr       sta BYTE + 1
0007B1r 1  60             rts
0007B2r 1               
0007B2r 1               
0007B2r 1               
0007B2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007B2r 1               ;;
0007B2r 1               ;; use last 4 key presses (as hex bytes) to fill two BYTES
0007B2r 1               ;;
0007B2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007B2r 1               
0007B2r 1               keys_byte:
0007B2r 1               
0007B2r 1  AD rr rr       lda KEY_PRESS + 1
0007B5r 1  0A             asl
0007B6r 1  0A             asl
0007B7r 1  0A             asl
0007B8r 1  0A             asl
0007B9r 1  8D rr rr       sta BYTE
0007BCr 1  AD rr rr       lda KEY_PRESS
0007BFr 1  0D rr rr       ora BYTE
0007C2r 1  8D rr rr       sta BYTE
0007C5r 1  AD rr rr       lda KEY_PRESS + 3
0007C8r 1  0A             asl
0007C9r 1  0A             asl
0007CAr 1  0A             asl
0007CBr 1  0A             asl
0007CCr 1  8D rr rr       sta BYTE + 1
0007CFr 1  AD rr rr       lda KEY_PRESS + 2
0007D2r 1  0D rr rr       ora BYTE + 1
0007D5r 1  8D rr rr       sta BYTE + 1
0007D8r 1  60             rts
0007D9r 1               
0007D9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007D9r 1               ;;
0007D9r 1               ;;    toggle the display/update of Clock on each appropriate keypress
0007D9r 1               ;;
0007D9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007D9r 1               
0007D9r 1               show_clock:
0007D9r 1               
0007D9r 1  DF rr 10       bbs5 FLAGS, reset_bit5
0007DCr 1  D7 rr          smb5 FLAGS
0007DEr 1  A9 rr          lda #<emt
0007E0r 1  85 rr          sta MESSAGE_POINTER
0007E2r 1  A9 rr          lda #>emt
0007E4r 1  85 rr          sta MESSAGE_POINTER + 1
0007E6r 1  20 rr rr       jsr print2_2
0007E9r 1  4C rr rr       jmp exit_show_clock
0007ECr 1               reset_bit5:
0007ECr 1  57 rr          rmb5 FLAGS
0007EEr 1  A9 rr          lda #<pause_msg
0007F0r 1  85 rr          sta MESSAGE_POINTER
0007F2r 1  A9 rr          lda #>pause_msg
0007F4r 1  85 rr          sta MESSAGE_POINTER + 1
0007F6r 1  20 rr rr       jsr print2_2
0007F9r 1               
0007F9r 1               exit_show_clock:
0007F9r 1  60             rts
0007FAr 1               
0007FAr 1               
0007FAr 1               
0007FAr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007FAr 1               ;;
0007FAr 1               ;;    toggle the automatic update view of the "8-byte memory block"
0007FAr 1               ;;
0007FAr 1               
0007FAr 1               show_block:
0007FAr 1               
0007FAr 1  8F rr 05       bbs0 FLAGS, reset_bit0
0007FDr 1  87 rr          smb0 FLAGS
0007FFr 1  4C rr rr       jmp exit_show_block
000802r 1               reset_bit0:
000802r 1  07 rr          rmb0 FLAGS
000804r 1               exit_show_block:
000804r 1  60             rts
000805r 1               
000805r 1               
000805r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000805r 1               ;;
000805r 1               ;;     toggle the scanning LED routine on VIA_3 Port B
000805r 1               ;;
000805r 1               
000805r 1               show_kitt:
000805r 1               
000805r 1  AF rr 05       bbs2 FLAGS, reset_bit2
000808r 1  A7 rr          smb2 FLAGS
00080Ar 1  4C rr rr       jmp exit_show_kitt
00080Dr 1               reset_bit2:
00080Dr 1  27 rr          rmb2 FLAGS
00080Fr 1               exit_show_kitt:
00080Fr 1  60             rts
000810r 1               
000810r 1               
000810r 1               
000810r 1               
000810r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000810r 1               ;;
000810r 1               ;;                     INTERRUPT HANDLERS
000810r 1               ;;
000810r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000810r 1               
000810r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000810r 1               ;;
000810r 1               ;;         reset & restart timer
000810r 1               ;;
000810r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000810r 1               
000810r 1               
000810r 1               reset_met:
000810r 1  64 rr          stz HUNDRED_HRS
000812r 1  64 rr          stz TEN_HRS
000814r 1  64 rr          stz TEN_MINUTES
000816r 1  64 rr          stz TEN_SECONDS
000818r 1  64 rr          stz HRS
00081Ar 1  64 rr          stz MINUTES
00081Cr 1  64 rr          stz SECONDS
00081Er 1  60             rts
00081Fr 1               
00081Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00081Fr 1               ;;
00081Fr 1               ;;                CB : TEST FUNCTIONS
00081Fr 1               ;;
00081Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00081Fr 1               cb1_handler:
00081Fr 1               
00081Fr 1                 ;lda #$04
00081Fr 1  A9 05          lda #$05
000821r 1  85 rr          sta BEEP_DELAY_TIME
000823r 1                 ;jsr beep_from_pointer
000823r 1               
000823r 1                 ; CONSIDER Change:
000823r 1                 ;
000823r 1                 ; jsr beep_from_pointer
000823r 1                 ; rts
000823r 1                 ;
000823r 1                 ; becomes
000823r 1                 ;
000823r 1  4C rr rr       jmp beep_from_pointer
000826r 1               
000826r 1                 ;rts
000826r 1               
000826r 1               cb2_handler:
000826r 1  A9 14          lda #$14
000828r 1  85 rr          sta BEEP_DELAY_TIME
00082Ar 1  A9 02          lda #$02 ; tone # = 100Hz
00082Cr 1                 ;jsr beep_from_list
00082Cr 1                 ; CONSIDER Change:
00082Cr 1                 ;
00082Cr 1                 ; jsr beep_from-list
00082Cr 1                 ; rts
00082Cr 1                 ;
00082Cr 1                 ; becomes
00082Cr 1                 ;
00082Cr 1  4C rr rr       jmp beep_from_list
00082Fr 1               
00082Fr 1                 ;rts
00082Fr 1               
00082Fr 1               
00082Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00082Fr 1               ;;
00082Fr 1               ;;                    MONITOR / KEYPAD
00082Fr 1               ;;
00082Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00082Fr 1               
00082Fr 1               keypad_handler:
00082Fr 1               
00082Fr 1  20 rr rr       jsr get_key     ; READs from PORTA which also re-sets VIA's Interrupt flag
000832r 1  8D rr rr       sta INKEY       ; put the byte value of input into RAM ( $00 )
000835r 1  AD 00 60       lda PORTB_1       ; check for SHIFT/INSTRUCTION button, 0=pressed, 1=not pressed
000838r 1  29 80          and #%10000000    ; zero (eq) when button pressed -> check_keypress, otherwise it's not zero, jmp to handle_new_char
00083Ar 1  F0 03          beq check_keypress ; done this way to get around the limit in size of branch jumps....
00083Cr 1  4C rr rr       jmp handle_new_char
00083Fr 1               
00083Fr 1               check_keypress:
00083Fr 1               
00083Fr 1  AD rr rr       lda INKEY
000842r 1               
000842r 1               ; choose action of "SHIFTed" key-press
000842r 1               
000842r 1               check_a:
000842r 1               
000842r 1  C9 0A          cmp #$0A
000844r 1                 ; move up one memory address and display contents
000844r 1  D0 09          bne check_b
000846r 1  20 rr rr       jsr increment_address
000849r 1  20 rr rr       jsr new_address
00084Cr 1  4C rr rr       jmp exit_key_irq
00084Fr 1               
00084Fr 1               check_b:
00084Fr 1               
00084Fr 1  C9 0B          cmp #$0B
000851r 1                 ; move down one memory address and display contents
000851r 1  D0 09          bne check_c
000853r 1  20 rr rr       jsr decrement_address
000856r 1  20 rr rr       jsr new_address
000859r 1  4C rr rr       jmp exit_key_irq
00085Cr 1               
00085Cr 1               check_c:
00085Cr 1               
00085Cr 1  C9 0C          cmp #$0C
00085Er 1                 ; return to MONITOR
00085Er 1  D0 13          bne check_d
000860r 1  07 rr          rmb0 FLAGS
000862r 1  20 rr rr       jsr lcd_clear
000865r 1  A9 rr          lda #<splash
000867r 1  85 rr          sta MESSAGE_POINTER
000869r 1  A9 rr          lda #>splash
00086Br 1  85 rr          sta MESSAGE_POINTER + 1
00086Dr 1  20 rr rr       jsr new_address
000870r 1  4C rr rr       jmp exit_key_irq
000873r 1               
000873r 1               check_d:
000873r 1               
000873r 1  C9 0D          cmp #$0D
000875r 1                 ; move monitor to entered 4-digit memory address
000875r 1  D0 10          bne check_e
000877r 1  AD rr rr       lda BYTE
00087Ar 1  85 rr          sta DUMP_POINTER
00087Cr 1  AD rr rr       lda BYTE + 1
00087Fr 1  85 rr          sta DUMP_POINTER + 1
000881r 1  20 rr rr       jsr new_address
000884r 1  4C rr rr       jmp exit_key_irq
000887r 1               
000887r 1               check_e:
000887r 1               
000887r 1  C9 0E          cmp #$0E
000889r 1                 ; insert (POKE) byte of data in to current memory address, then increment to next address
000889r 1  D0 10          bne check_f
00088Br 1  AD rr rr       lda BYTE
00088Er 1  A0 00          ldy #$00
000890r 1  91 rr          sta (DUMP_POINTER),y
000892r 1  20 rr rr       jsr new_address
000895r 1  20 rr rr       jsr beep
000898r 1  4C rr rr       jmp exit_key_irq
00089Br 1               
00089Br 1               check_f:
00089Br 1               
00089Br 1  C9 0F          cmp #$0F
00089Dr 1                 ; show 8-byte wide block of memory
00089Dr 1  D0 12          bne check_1
00089Fr 1  A0 00          ldy #$00
0008A1r 1  AD rr rr       lda BYTE
0008A4r 1  85 rr          sta DUMP_POINTER
0008A6r 1  AD rr rr       lda BYTE + 1
0008A9r 1  85 rr          sta DUMP_POINTER + 1
0008ABr 1  20 rr rr       jsr block_address
0008AEr 1  4C rr rr       jmp exit_key_irq
0008B1r 1               
0008B1r 1               check_1:
0008B1r 1               
0008B1r 1  C9 01          cmp #$01
0008B3r 1                 ; pause time display (clock still running)
0008B3r 1  D0 09          bne check_2
0008B5r 1  20 rr rr       jsr beep
0008B8r 1  20 rr rr       jsr show_clock
0008BBr 1  4C rr rr       jmp exit_key_irq
0008BEr 1               
0008BEr 1               check_2:
0008BEr 1               
0008BEr 1  C9 02          cmp #$02
0008C0r 1                 ; reset_clock
0008C0r 1  D0 09          bne check_3
0008C2r 1  20 rr rr       jsr beep
0008C5r 1  20 rr rr       jsr reset_met
0008C8r 1  4C rr rr       jmp exit_key_irq
0008CBr 1               
0008CBr 1               check_3:
0008CBr 1               
0008CBr 1  C9 03          cmp #$03
0008CDr 1  D0 0B          bne check_6
0008CFr 1  A0 00          ldy #$00
0008D1r 1  20 rr rr       jsr increment_block
0008D4r 1  20 rr rr       jsr block_address
0008D7r 1  4C rr rr       jmp exit_key_irq
0008DAr 1               
0008DAr 1               check_6:
0008DAr 1               
0008DAr 1  C9 06          cmp #$06
0008DCr 1  D0 0B          bne check_9
0008DEr 1  A0 00          ldy #$00
0008E0r 1  20 rr rr       jsr decrement_block
0008E3r 1  20 rr rr       jsr block_address
0008E6r 1  4C rr rr       jmp exit_key_irq
0008E9r 1               
0008E9r 1               check_9:
0008E9r 1               
0008E9r 1  C9 09          cmp #$09
0008EBr 1  D0 06          bne check_4
0008EDr 1  20 rr rr       jsr show_block
0008F0r 1  4C rr rr       jmp exit_key_irq
0008F3r 1               
0008F3r 1               check_4:
0008F3r 1               
0008F3r 1  C9 04          cmp #$04
0008F5r 1  D0 09          bne check_5
0008F7r 1  20 rr rr       jsr beep
0008FAr 1  20 rr rr       jsr show_kitt
0008FDr 1  4C rr rr       jmp exit_key_irq
000900r 1               
000900r 1               check_5:
000900r 1               
000900r 1  C9 05          cmp #$05
000902r 1  D0 2A          bne exit_key_irq
000904r 1  20 rr rr       jsr beep
000907r 1  20 00 3F       jsr $3F00
00090Ar 1  4C rr rr       jmp exit_key_irq
00090Dr 1               
00090Dr 1               
00090Dr 1               handle_new_char:
00090Dr 1               
00090Dr 1  AD rr rr       lda KEY_PRESS + 2
000910r 1  8D rr rr       sta KEY_PRESS + 3
000913r 1  AD rr rr       lda KEY_PRESS + 1
000916r 1  8D rr rr       sta KEY_PRESS + 2
000919r 1  AD rr rr       lda KEY_PRESS
00091Cr 1  8D rr rr       sta KEY_PRESS + 1
00091Fr 1  AD rr rr       lda INKEY       ; get the new keypress value and...
000922r 1  8D rr rr       sta KEY_PRESS
000925r 1  20 rr rr       jsr bintohex
000928r 1  20 rr rr       jsr print_char  ; and print it on LCD
00092Br 1  20 rr rr       jsr keys_byte
00092Er 1               
00092Er 1               exit_key_irq:
00092Er 1               
00092Er 1                 ;jsr scan  ; re-enable keypad
00092Er 1                 ; CONSIDER Change:
00092Er 1                 ;
00092Er 1                 ; jsr scan
00092Er 1                 ; rts
00092Er 1                 ;
00092Er 1                 ; becomes
00092Er 1                 ;
00092Er 1  4C rr rr       jmp scan
000931r 1                 ;rts
000931r 1               
000931r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000931r 1               
000931r 1               nmi:
000931r 1  48             pha
000932r 1  DA             phx
000933r 1  5A             phy
000934r 1               
000934r 1  2C 04 48       bit T1CL_3      ; reset interrupt flag
000937r 1  20 rr rr       jsr rtc
00093Ar 1  4C rr rr       jmp exit_nmi
00093Dr 1               
00093Dr 1               exit_nmi:
00093Dr 1  7A             ply
00093Er 1  FA             plx
00093Fr 1  68             pla
000940r 1  40             rti
000941r 1               
000941r 1  40             rti
000942r 1               
000942r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000942r 1               ;;
000942r 1               ;;    interrupt is triggered by HIGH edge on VIA CA1 pin
000942r 1               ;;     PORTA low nibble (keypad columns) inputs are diode ORed to CA1
000942r 1               ;;
000942r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000942r 1               
000942r 1               irq:
000942r 1               
000942r 1               ; put registers on the stack while handling the IRQ
000942r 1               
000942r 1  48             pha
000943r 1  DA             phx
000944r 1  5A             phy
000945r 1               
000945r 1               ;  find responsible hardware
000945r 1               
000945r 1               ;  Is it VIA_1?
000945r 1               
000945r 1  AD 0D 60       lda IFR_1       ; if IFR_1 has Bit7 set (ie sign=NEGATIVE) then it IS the source of the interrupt
000948r 1  10 25          bpl next_device ; if it's not set (ie sign=POSITIVE) then branch to test the next possible device
00094Ar 1               
00094Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00094Ar 1               ;;
00094Ar 1               ;; IFR Flags
00094Ar 1               ;; B7  B6  B5  B4  B3  B2  B1  B0
00094Ar 1               ;; IRQ TI1 TI2 CB1 CB2 SR CA1 CA2
00094Ar 1               ;;
00094Ar 1               ;; Interrupt source is found by sequentially shifting IFR bit left to put bit-of-interest into the CARRY place
00094Ar 1               ;; and then branching based on whether CARRY is SET or not
00094Ar 1               ;;
00094Ar 1               ;; Only add tests for IRQ sources in use, and adjust the ASLs in each test as necessary
00094Ar 1               ;;
00094Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00094Ar 1               
00094Ar 1               test_cb1:
00094Ar 1  0A             asl
00094Br 1  0A             asl
00094Cr 1  0A             asl
00094Dr 1  0A             asl
00094Er 1  90 09          bcc test_cb2
000950r 1  2C 00 60       bit PORTB_1
000953r 1  20 rr rr       jsr cb1_handler
000956r 1  4C rr rr       jmp exit_irq
000959r 1               
000959r 1               test_cb2:
000959r 1  0A             asl
00095Ar 1  90 09          bcc test_ca1
00095Cr 1  2C 00 60       bit PORTB_1
00095Fr 1  20 rr rr       jsr cb2_handler
000962r 1  4C rr rr       jmp exit_irq
000965r 1               
000965r 1               test_ca1:
000965r 1               
000965r 1  0A             asl           ; shift CA1 bit into the CARRY bit & test
000966r 1  0A             asl
000967r 1  90 06          bcc exit_irq        ; carry clear = leave
000969r 1  20 rr rr       jsr keypad_handler  ; carry not clear = handle the CA1 interrupt (keypad)
00096Cr 1  4C rr rr       jmp exit_irq
00096Fr 1               
00096Fr 1               
00096Fr 1               next_device:
00096Fr 1               
00096Fr 1               exit_irq:
00096Fr 1               
00096Fr 1  7A             ply
000970r 1  FA             plx
000971r 1  68             pla
000972r 1  40             rti
000973r 1               
000973r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000973r 1               ;;
000973r 1               ;;      String and data byte variables
000973r 1               ;;
000973r 1               ;;
000973r 1               ;;
000973r 1               
000973r 1  4D 61 72 6B  pause_msg: .asciiz "Mark Time     "
000977r 1  20 54 69 6D  
00097Br 1  65 20 20 20  
000982r 1  3C 73 68 69  start_msg: .asciiz "<shift>+C to start"
000986r 1  66 74 3E 2B  
00098Ar 1  43 20 74 6F  
000995r 1  56 69 65 77  new_address_msg: .asciiz "View/Edit Memory"
000999r 1  2F 45 64 69  
00099Dr 1  74 20 4D 65  
0009A6r 1  38 20 42 79  block_address_msg: .asciiz "8 Byte view"
0009AAr 1  74 65 20 76  
0009AEr 1  69 65 77 00  
0009B2r 1  2E 2E 2E 53  title: .asciiz "...Shed Brain v1..."
0009B6r 1  68 65 64 20  
0009BAr 1  42 72 61 69  
0009C6r 1  53 68 65 64  emt: .asciiz "Shed Time  MET"
0009CAr 1  20 54 69 6D  
0009CEr 1  65 20 20 4D  
0009D5r 1  73 68 65 64  splash: .asciiz "shed> "
0009D9r 1  3E 20 00     
0009DCr 1  42 65 67 69  mem_start_msg: .asciiz "Begin RAM Test"
0009E0r 1  6E 20 52 41  
0009E4r 1  4D 20 54 65  
0009EBr 1  52 41 4D 20  mem_pass_msg: .asciiz "RAM Test Pass"
0009EFr 1  54 65 73 74  
0009F3r 1  20 50 61 73  
0009F9r 1  52 41 4D 20  mem_fail_msg_1: .asciiz "RAM Test 1 Fail"
0009FDr 1  54 65 73 74  
000A01r 1  20 31 20 46  
000A09r 1  52 41 4D 20  mem_fail_msg_2: .asciiz "RAM Test 2 Fail"
000A0Dr 1  54 65 73 74  
000A11r 1  20 32 20 46  
000A19r 1               
000A19r 1  54 68 69 73  userPrompt: .asciiz "This is shed! "
000A1Dr 1  20 69 73 20  
000A21r 1  73 68 65 64  
000A28r 1               
000A28r 1  64 rr A9 20  userProg: .byte $64, MESSAGE_POINTER, $A9, $20, $85, MESSAGE_POINTER + 1, $20, <print4, >print4, $60, $00
000A2Cr 1  85 rr 20 rr  
000A30r 1  rr 60 00     
000A33r 1               
000A33r 1  01 03 06 0C  kitLeds: .byte $01, $03, $06, $0C, $18, $30, $60, $C0, $80, $C0, $60, $30, $18, $0C, $06, $03, $01
000A37r 1  18 30 60 C0  
000A3Br 1  80 C0 60 30  
000A44r 1               
000A44r 1               
000A44r 1               ; Reset/IRQ vectors
000A44r 1               
000A44r 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr          .word nmi
000002r 1  rr rr          .word reset
000004r 1  rr rr          .word irq
000004r 1               
