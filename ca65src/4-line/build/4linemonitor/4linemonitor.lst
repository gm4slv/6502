ca65 V2.18 - Debian 2.19-1
Main file   : 4linemonitor.s
Current file: 4linemonitor.s

000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1  xx xx        DUMP_POINTER:     .res 2
000002r 1  xx           FLAGS:            .res 1
000003r 1  xx           TOGGLE_TIME:      .res 1
000004r 1  xx           CLOCK_LAST:       .res 1
000005r 1  xx xx        MESSAGE_POINTER:  .res 2
000007r 1  xx xx xx xx  TICKS:            .res 4
00000Br 1  xx           CENTISEC:         .res 1
00000Cr 1  xx           HUNDRED_HRS:      .res 1
00000Dr 1  xx           TEN_HRS:          .res 1
00000Er 1  xx           HRS:              .res 1
00000Fr 1  xx           TEN_MINUTES:      .res 1
000010r 1  xx           MINUTES:          .res 1
000011r 1  xx           TEN_SECONDS:      .res 1
000012r 1  xx           SECONDS:          .res 1
000013r 1  xx xx        MEM_POINTER:      .res 2
000015r 1               
000015r 1               .bss
000000r 1               
000000r 1  xx           INKEY:            .res 1
000001r 1  xx xx xx xx  KEY_PRESS:        .res 4
000005r 1  xx xx        BYTE:             .res 2
000007r 1  xx           TENS:             .res 1
000008r 1  xx           HUNDREDS:         .res 1
000009r 1  xx xx        HEX:              .res 2
00000Br 1  xx xx        HEXB:             .res 2
00000Dr 1  xx           TEMP:             .res 1
00000Er 1  xx           TEMP2:            .res 1
00000Fr 1  xx           HI_DIGIT:         .res 1
000010r 1  xx           LO_DIGIT:         .res 1
000011r 1               
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               ;;
000011r 1               ;;        INCLUDES
000011r 1               ;;
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               
000011r 1               .include "../includes/ioports.inc"
000011r 2               
000011r 2                 .code
000000r 2               
000000r 2               ; VIA_1 Port addresses
000000r 2               VIA_1     = $6000
000000r 2               PORTB_1   = VIA_1
000000r 2               PORTA_1   = VIA_1 + 1
000000r 2               DDRB_1    = VIA_1 + 2
000000r 2               DDRA_1    = VIA_1 + 3
000000r 2               T1CL_1    = VIA_1 + 4
000000r 2               T1CH_1    = VIA_1 + 5
000000r 2               T1LL_1    = VIA_1 + 6
000000r 2               T1LH_1    = VIA_1 + 7
000000r 2               T2CL_1    = VIA_1 + 8
000000r 2               T2CH_1    = VIA_1 + 9
000000r 2               SR_1      = VIA_1 + 10
000000r 2               ACR_1     = VIA_1 + 11
000000r 2               PCR_1     = VIA_1 + 12
000000r 2               IFR_1     = VIA_1 + 13
000000r 2               IER_1     = VIA_1 + 14
000000r 2               PORTA_NO_HS_1 = VIA_1 + 15
000000r 2               
000000r 2               ; VIA_2 Port addresses
000000r 2               VIA_2     = $5000
000000r 2               PORTB_2   = VIA_2
000000r 2               PORTA_2   = VIA_2 + 1
000000r 2               DDRB_2    = VIA_2 + 2
000000r 2               DDRA_2    = VIA_2 + 3
000000r 2               T1CL_2    = VIA_2 + 4
000000r 2               T1CH_2    = VIA_2 + 5
000000r 2               T1LL_2    = VIA_2 + 6
000000r 2               T1LH_2    = VIA_2 + 7
000000r 2               T2CL_2    = VIA_2 + 8
000000r 2               T2CH_2    = VIA_2 + 9
000000r 2               SR_2      = VIA_2 + 10
000000r 2               ACR_2     = VIA_2 + 11
000000r 2               PCR_2     = VIA_2 + 12
000000r 2               IFR_2     = VIA_2 + 13
000000r 2               IER_2     = VIA_2 + 14
000000r 2               PORTA_NO_HS_2 = VIA_2 + 15
000000r 2               
000000r 2               ; VIA_3 Port addresses
000000r 2               VIA_3     = $4800
000000r 2               PORTB_3   = VIA_3
000000r 2               PORTA_3   = VIA_3 + 1
000000r 2               DDRB_3    = VIA_3 + 2
000000r 2               DDRA_3    = VIA_3 + 3
000000r 2               T1CL_3    = VIA_3 + 4
000000r 2               T1CH_3    = VIA_3 + 5
000000r 2               T1LL_3    = VIA_3 + 6
000000r 2               T1LH_3    = VIA_3 + 7
000000r 2               T2CL_3    = VIA_3 + 8
000000r 2               T2CH_3    = VIA_3 + 9
000000r 2               SR_3      = VIA_3 + 10
000000r 2               ACR_3     = VIA_3 + 11
000000r 2               PCR_3     = VIA_3 + 12
000000r 2               IFR_3     = VIA_3 + 13
000000r 2               IER_3     = VIA_3 + 14
000000r 2               PORTA_NO_HS_3 = VIA_3 + 15
000000r 2               
000000r 2               ; ACIA_1 Port Addresses
000000r 2               ACIA_1    = $4400
000000r 2               S_TXRX_1  = ACIA_1      ; TXD / RXD
000000r 2               S_STA_1   = ACIA_1 + 1  ; Status
000000r 2               S_COM_1   = ACIA_1 + 2  ; Command
000000r 2               S_CON_1   = ACIA_1 + 3  ; Control
000000r 2               
000000r 2               
000000r 2               via_1_init:
000000r 2               
000000r 2  A9 40          lda #%01000000
000002r 2  8D 0B 60       sta ACR_1
000005r 2  A9 0E          lda #$0E
000007r 2  8D 04 60       sta T1CL_1
00000Ar 2  A9 27          lda #$27
00000Cr 2  8D 05 60       sta T1CH_1
00000Fr 2               
00000Fr 2  A9 DA          lda #%11011010  ; T1, CA1 active
000011r 2  8D 0E 60       sta IER_1
000014r 2               
000014r 2  A9 01          lda #$01  ;  CA1 active high-transition
000016r 2  8D 0C 60       sta PCR_1
000019r 2               
000019r 2  A9 7F          lda #%01111111 ; Set all pins on port B to output except BIT 7 which is used for "SHIFT/INSTRUCTION"  button
00001Br 2  8D 02 60       sta DDRB_1
00001Er 2  A9 F0          lda #%11110000 ; Set low-nibble pins on port A to input and high-nibble pins to output, for keypad
000020r 2  8D 03 60       sta DDRA_1
000023r 2               
000023r 2  60             rts
000024r 2               
000024r 2               
000024r 1               .include "../includes/lcd.inc"
000024r 2               
000024r 2               
000024r 2                 .code
000024r 2               
000024r 2               ; LCD Command masks
000024r 2               E  = %01000000
000024r 2               RW = %00100000
000024r 2               RS = %00010000
000024r 2               
000024r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000024r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000024r 2               ;;
000024r 2               ;;
000024r 2               ;;                              LCD Functions
000024r 2               ;;
000024r 2               ;;
000024r 2               ;;
000024r 2               
000024r 2               lcd_start:
000024r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000026r 2  20 rr rr       jsr lcd_instruction
000029r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
00002Br 2  20 rr rr       jsr lcd_instruction
00002Er 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000030r 2  20 rr rr       jsr lcd_instruction
000033r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000035r 2  20 rr rr       jsr lcd_instruction
000038r 2  20 rr rr       jsr lcd_entry_mode
00003Br 2  20 rr rr       jsr lcd_cursor_off
00003Er 2  20 rr rr       jsr lcd_clear
000041r 2                 ;jsr lcd_add0
000041r 2  60             rts
000042r 2               
000042r 2               lcd_entry_mode:
000042r 2  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
000044r 2  20 rr rr       jsr lcd_instruction
000047r 2  60             rts
000048r 2               
000048r 2               lcd_home:
000048r 2  A9 02          lda #%00000010 ; cursor HOME
00004Ar 2  20 rr rr       jsr lcd_instruction
00004Dr 2  60             rts
00004Er 2               
00004Er 2               lcd_add0:
00004Er 2  A9 80          lda #%10000000 ; back to zero position
000050r 2  20 rr rr       jsr lcd_instruction
000053r 2  60             rts
000054r 2               
000054r 2               lcd_clear:
000054r 2  A9 01          lda #%00000001 ; Clear display
000056r 2  20 rr rr       jsr lcd_instruction
000059r 2  60             rts
00005Ar 2               
00005Ar 2               lcd_cursor_off:
00005Ar 2  A9 0C          lda #%00001100 ; Display on; cursor off; blink off
00005Cr 2  20 rr rr       jsr lcd_instruction
00005Fr 2  60             rts
000060r 2               
000060r 2               lcd_cursor_on:
000060r 2  A9 0F          lda #%00001111 ; Display on; cursor on; blink on
000062r 2  20 rr rr       jsr lcd_instruction
000065r 2  60             rts
000066r 2               
000066r 2               lcd_line_1:
000066r 2  A9 80          lda #($80)
000068r 2  20 rr rr       jsr lcd_instruction
00006Br 2  60             rts
00006Cr 2               
00006Cr 2               lcd_line_2:
00006Cr 2  A9 C0          lda #($80 + $40)
00006Er 2  20 rr rr       jsr lcd_instruction
000071r 2  60             rts
000072r 2               
000072r 2               lcd_line_3:
000072r 2  A9 94          lda #($80 + $14)
000074r 2  20 rr rr       jsr lcd_instruction
000077r 2  60             rts
000078r 2               
000078r 2               lcd_line_4:
000078r 2  A9 D4          lda #($80 + $54)
00007Ar 2  20 rr rr       jsr lcd_instruction
00007Dr 2  60             rts
00007Er 2               
00007Er 2               lcd_wait:
00007Er 2  48             pha
00007Fr 2  A9 70          lda #%01110000  ; LCD data is input (don't change MSB BIT7, it has to stay ZERO for SHIFT Button input)
000081r 2  8D 02 60       sta DDRB_1
000084r 2               lcdbusy:
000084r 2  A9 20          lda #RW
000086r 2  8D 00 60       sta PORTB_1
000089r 2  A9 60          lda #(RW | E)
00008Br 2  8D 00 60       sta PORTB_1
00008Er 2  AD 00 60       lda PORTB_1     ; Read high nibble
000091r 2  48             pha             ; and put on stack since it has the busy flag
000092r 2  A9 20          lda #RW
000094r 2  8D 00 60       sta PORTB_1
000097r 2  A9 60          lda #(RW | E)
000099r 2  8D 00 60       sta PORTB_1
00009Cr 2  AD 00 60       lda PORTB_1       ; Read low nibble
00009Fr 2  68             pla             ; Get high nibble off stack
0000A0r 2  29 08          and #%00001000
0000A2r 2  D0 E0          bne lcdbusy
0000A4r 2               
0000A4r 2  A9 20          lda #RW
0000A6r 2  8D 00 60       sta PORTB_1
0000A9r 2  A9 7F          lda #%01111111  ; LCD data is output (don't change MSB BIT7, it has to stay ZERO for SHIFT Buttion input)
0000ABr 2  8D 02 60       sta DDRB_1
0000AEr 2  68             pla
0000AFr 2  60             rts
0000B0r 2               
0000B0r 2               lcd_init:
0000B0r 2  A9 02          lda #%00000010 ; Set 4-bit mode : DO ONCE AT POWER UP
0000B2r 2  8D 00 60       sta PORTB_1
0000B5r 2  09 40          ora #E
0000B7r 2  8D 00 60       sta PORTB_1
0000BAr 2  29 0F          and #%00001111
0000BCr 2  8D 00 60       sta PORTB_1
0000BFr 2  60             rts
0000C0r 2               
0000C0r 2               lcd_instruction:
0000C0r 2  20 rr rr       jsr lcd_wait
0000C3r 2  48             pha
0000C4r 2  4A             lsr
0000C5r 2  4A             lsr
0000C6r 2  4A             lsr
0000C7r 2  4A             lsr            ; Send high 4 bits
0000C8r 2  8D 00 60       sta PORTB_1
0000CBr 2  09 40          ora #E         ; Set E bit to send instruction
0000CDr 2  8D 00 60       sta PORTB_1
0000D0r 2  49 40          eor #E         ; Clear E bit
0000D2r 2  8D 00 60       sta PORTB_1
0000D5r 2  68             pla
0000D6r 2  29 0F          and #%00001111 ; Send low 4 bits
0000D8r 2  8D 00 60       sta PORTB_1
0000DBr 2  09 40          ora #E         ; Set E bit to send instruction
0000DDr 2  8D 00 60       sta PORTB_1
0000E0r 2  49 40          eor #E         ; Clear E bit
0000E2r 2  8D 00 60       sta PORTB_1
0000E5r 2  60             rts
0000E6r 2               
0000E6r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000E6r 2               ;;
0000E6r 2               ;;        PRINT Characters on LCD - an ASCII value in Accumulator
0000E6r 2               ;;        is printed on the display
0000E6r 2               ;;
0000E6r 2               
0000E6r 2               print_char:
0000E6r 2  20 rr rr       jsr lcd_wait
0000E9r 2  48             pha
0000EAr 2  4A             lsr
0000EBr 2  4A             lsr
0000ECr 2  4A             lsr
0000EDr 2  4A             lsr             ; Send high 4 bits
0000EEr 2  09 10          ora #RS         ; Set RS
0000F0r 2  8D 00 60       sta PORTB_1
0000F3r 2  09 40          ora #E          ; Set E bit to send instruction
0000F5r 2  8D 00 60       sta PORTB_1
0000F8r 2  49 40          eor #E          ; Clear E bit
0000FAr 2  8D 00 60       sta PORTB_1
0000FDr 2  68             pla
0000FEr 2  29 0F          and #%00001111  ; Send low 4 bits
000100r 2  09 10          ora #RS         ; Set RS
000102r 2  8D 00 60       sta PORTB_1
000105r 2  09 40          ora #E          ; Set E bit to send instruction
000107r 2  8D 00 60       sta PORTB_1
00010Ar 2  49 40          eor #E          ; Clear E bit
00010Cr 2  8D 00 60       sta PORTB_1
00010Fr 2  60             rts
000110r 2               
000110r 2               
000110r 1               .include "../includes/getkey.inc"
000110r 2               
000110r 2                 .code
000110r 2               
000110r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000110r 2               ;;
000110r 2               ;;
000110r 2               ;;      READ THE 4x4 keypad using  VIA_1 PORTA
000110r 2               ;;
000110r 2               ;;      Accumulator holds the ASCII value of the pressed key when it returns
000110r 2               ;;
000110r 2               
000110r 2               get_key:
000110r 2               readKeypad:
000110r 2  A2 04          ldx #$04        ; Row 4 - counting down
000112r 2  A0 80          ldy #%10000000  ;
000114r 2               ScanRow:
000114r 2  8C 01 60       sty PORTA_1
000117r 2  AD 01 60       lda PORTA_1
00011Ar 2  29 0F          and #%00001111  ; mask off keypad input - only low 4 (keypad column) bits are read
00011Cr 2  C9 00          cmp #$00
00011Er 2  D0 0B          bne Row_Found   ; non-zero means a row output has been connected via a switch to a column input
000120r 2  CA             dex             ; zero means it hasn't been found, so check next row down
000121r 2  98             tya
000122r 2  4A             lsr
000123r 2  A8             tay
000124r 2  C9 08          cmp #%00001000
000126r 2  D0 EC          bne ScanRow
000128r 2  A9 FF          lda #$ff
00012Ar 2  60             rts
00012Br 2               Row_Found:
00012Br 2  8E rr rr       stx TEMP ; store row
00012Er 2  A0 FF          ldy #$ff
000130r 2               FindCol:
000130r 2  C8             iny
000131r 2  4A             lsr
000132r 2  90 FC          bcc FindCol
000134r 2  98             tya
000135r 2  0A             asl
000136r 2  0A             asl  ; col * 4
000137r 2  18             clc
000138r 2  6D rr rr       adc TEMP ; add row
00013Br 2  AA             tax
00013Cr 2  BD rr rr       lda keypad_array,x
00013Fr 2  60             rts
000140r 2               
000140r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000140r 2               ;;
000140r 2               ;;       key = <INDEX> ; pressing a key returns a 4-bit number
000140r 2               ;;       calculated as (Column * 4 ) + Row, in the range
000140r 2               ;;       1 - 16 which acts as an index to a lookup-table.
000140r 2               ;;       The lookup table returns a byte value equal to the key's
000140r 2               ;;       numerical value
000140r 2               ;;       e.g.
000140r 2               ;;       button 1 returns byte $01 / 00000001
000140r 2               ;;       button F returns byte $0f / 00001111
000140r 2               ;;    ____________________________________________________
000140r 2               ;;   |     1 = <16> | 2 = <12> |    3 = <8> | A(10) = <4> |
000140r 2               ;;   |______________|__________|____________|_____________|
000140r 2               ;;   |     4 = <15> | 5 = <11> |    6 = <7> | B(11) = <3> |
000140r 2               ;;   |______________|__________|____________|_____________|
000140r 2               ;;   |     7 = <14> | 8 = <10> |    9 = <6> | C(12) = <2> |
000140r 2               ;;   |______________|__________|____________|_____________|
000140r 2               ;;   | E(14) = <13> | 0 = <9>  | F(15)= <5> | D(13) = <1> |
000140r 2               ;;   |______________|__________|____________|_____________|
000140r 2               ;;
000140r 2               ;;            Button  ..   D    C    B    A    F    9    6    3    0    8    5    2    E    7    4    1
000140r 2               ;;            <INDEX> 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16
000140r 2  00 0D 0C 0B  keypad_array: .byte $00, $0D, $0C, $0B, $0A, $0F, $09, $06, $03, $00, $08, $05, $02, $0E, $07, $04, $01
000144r 2  0A 0F 09 06  
000148r 2  03 00 08 05  
000151r 2               
000151r 2               
000151r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000151r 2               ;;
000151r 2               ;;  set ROW keypad outputs high as a source for triggering interrupt when a key is pressed
000151r 2               ;;
000151r 2               ;;
000151r 2               scan:
000151r 2  A0 F0          ldy #%11110000
000153r 2  8C 01 60       sty PORTA_1
000156r 2  60             rts
000157r 2               
000157r 2               
000157r 1               .include "../includes/functions.inc"
000157r 2               
000157r 2               
000157r 2                 .code
000157r 2               
000157r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000157r 2               ;;
000157r 2               ;;          convert an 8-bit binary number from Accumulator, in range 00000000 -> 11111111 ($00 to $FF)
000157r 2               ;;          to its HEX number encode as ASCII -  using a simple lookup table. Store each digit in RAM. Accumulator
000157r 2               ;;          holds the last/low digit on return.
000157r 2               ;;
000157r 2               
000157r 2               
000157r 2               bintohex:
000157r 2  48             pha
000158r 2  4A             lsr
000159r 2  4A             lsr
00015Ar 2  4A             lsr
00015Br 2  4A             lsr
00015Cr 2  AA             tax
00015Dr 2  BD rr rr       lda hexascii,x
000160r 2  8D rr rr       sta HI_DIGIT
000163r 2  68             pla
000164r 2  29 0F          and #$0f
000166r 2  AA             tax
000167r 2  BD rr rr       lda hexascii,x
00016Ar 2  8D rr rr       sta LO_DIGIT
00016Dr 2  60             rts
00016Er 2               
00016Er 2  30 31 32 33  hexascii: .byte "0123456789ABCDEF"
000172r 2  34 35 36 37  
000176r 2  38 39 41 42  
00017Er 2               
00017Er 2               
00017Er 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00017Er 2               ;;
00017Er 2               ;;    convert a binary (hex) value in Accumulator into
00017Er 2               ;;    its ASCII equivalent character in decimal 0-99 and print it
00017Er 2               ;;    this converts hex/binary numbers from the RTC into human readable
00017Er 2               ;;    decimal for display on clock
00017Er 2               
00017Er 2               
00017Er 2               bintoascii:
00017Er 2               
00017Er 2  C9 0A          cmp #10
000180r 2  30 10          bmi single_figure
000182r 2  0A             asl
000183r 2  AA             tax
000184r 2  BD rr rr       lda binascii,x
000187r 2  20 rr rr       jsr print_char
00018Ar 2               
00018Ar 2  E8             inx
00018Br 2               
00018Br 2  BD rr rr       lda binascii,x
00018Er 2  20 rr rr       jsr print_char
000191r 2  60             rts
000192r 2               
000192r 2               single_figure:
000192r 2  0A             asl
000193r 2  AA             tax
000194r 2  E8             inx
000195r 2  BD rr rr       lda binascii,x
000198r 2  20 rr rr       jsr print_char
00019Br 2  60             rts
00019Cr 2               
00019Cr 2               
00019Cr 2  30 30 30 31  binascii: .byte "00010203040506070809"
0001A0r 2  30 32 30 33  
0001A4r 2  30 34 30 35  
0001B0r 2  31 30 31 31            .byte "10111213141516171819"
0001B4r 2  31 32 31 33  
0001B8r 2  31 34 31 35  
0001C4r 2  32 30 32 31            .byte "20212223242526272829"
0001C8r 2  32 32 32 33  
0001CCr 2  32 34 32 35  
0001D8r 2  33 30 33 31            .byte "30313233343536373839"
0001DCr 2  33 32 33 33  
0001E0r 2  33 34 33 35  
0001ECr 2  34 30 34 31            .byte "40414243444546474849"
0001F0r 2  34 32 34 33  
0001F4r 2  34 34 34 35  
000200r 2  35 30 35 31            .byte "50515253545556575859"
000204r 2  35 32 35 33  
000208r 2  35 34 35 35  
000214r 2  36 30 36 31            .byte "60616263646566676869"
000218r 2  36 32 36 33  
00021Cr 2  36 34 36 35  
000228r 2  37 30 37 31            .byte "70717273747576777879"
00022Cr 2  37 32 37 33  
000230r 2  37 34 37 35  
00023Cr 2  38 30 38 31            .byte "80818283848586878889"
000240r 2  38 32 38 33  
000244r 2  38 34 38 35  
000250r 2  39 30 39 31            .byte "90919293949596979899"
000254r 2  39 32 39 33  
000258r 2  39 34 39 35  
000264r 2               
000264r 2               
000264r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000264r 2               ;;
000264r 2               ;;      Convert a decimal number entered at keypad into its
000264r 2               ;;      HEX equivalent and display
000264r 2               ;;
000264r 2               
000264r 2               ;byte_to_hex:
000264r 2               ;
000264r 2               ;  jsr lcd_clear
000264r 2               ;  lda HEXB + 1
000264r 2               ;  and #$0f
000264r 2               ;  jsr bintohex
000264r 2               ;  lda HI_DIGIT
000264r 2               ;  jsr print_char
000264r 2               ;  lda LO_DIGIT
000264r 2               ;  jsr print_char
000264r 2               ;  lda HEXB
000264r 2               ;  jsr bintohex
000264r 2               ;  lda HI_DIGIT
000264r 2               ; jsr print_char
000264r 2               ; lda LO_DIGIT
000264r 2               ; jsr print_char
000264r 2               ;  lda #'d'
000264r 2               ;  jsr print_char
000264r 2               ;  lda #'='
000264r 2               ;  jsr print_char
000264r 2               ;  lda #'$'
000264r 2               ;  jsr print_char
000264r 2               ;
000264r 2               ;  lda HEXB ; lo byte
000264r 2               ;  pha
000264r 2               ;  lsr
000264r 2               ;  lsr
000264r 2               ;  lsr
000264r 2               ;  lsr
000264r 2               ;  cmp #10
000264r 2               ;  bpl error
000264r 2               ;  jsr mult10
000264r 2               ;  sta TENS
000264r 2               ;  pla
000264r 2               ;  and #%00001111 ; UNITS
000264r 2               ;  cmp #10
000264r 2               ;  bpl print_error
000264r 2               ;;  jsr mult10
000264r 2               ;  clc
000264r 2               ;  adc TENS
000264r 2               ;  sta HEX
000264r 2               ;
000264r 2               ;  lda HEXB + 1 ; hi byte
000264r 2               ;  and #%00001111
000264r 2               ;  cmp #10
000264r 2               ;  bpl print_error
000264r 2               ;  jsr mult10
000264r 2               ;  jsr mult10 ; hundreds
000264r 2               ;  adc HEX
000264r 2               ;
000264r 2               ;  jsr bintohex
000264r 2               ;  lda HI_DIGIT
000264r 2               ;  jsr print_char
000264r 2               ;  lda LO_DIGIT
000264r 2               ;  jsr print_char
000264r 2               ;  jmp exit_byte_to_hex
000264r 2               ;
000264r 2               ;error:
000264r 2               ;  pla
000264r 2               ;print_error:
000264r 2               ;  lda #<error_message
000264r 2               ;  sta MESSAGE_POINTER
000264r 2               ;  lda #>error_message
000264r 2               ;  sta MESSAGE_POINTER + 1
000264r 2               ;  jsr print3
000264r 2               ;  ;jsr lcd_cursor_off
000264r 2               ;  rts
000264r 2               ;
000264r 2               ;exit_byte_to_hex:
000264r 2               ;  jsr lcd_line_2
000264r 2               ;
000264r 2               ;  rts
000264r 2               
000264r 2               
000264r 2               
000264r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000264r 2               ;;
000264r 2               ;;  (A * 8) + (A * 2) = A * 10
000264r 2               
000264r 2               mult10:
000264r 2  48             pha
000265r 2  0A             asl
000266r 2  0A             asl
000267r 2  0A             asl
000268r 2  8D rr rr       sta TEMP2 ; A*8
00026Br 2  68             pla
00026Cr 2  0A             asl      ; A*2
00026Dr 2  6D rr rr       adc TEMP2 ; A*10
000270r 2  60             rts
000271r 2               
000271r 2               
000271r 2               
000271r 2               
000271r 2               
000271r 1               .include "../includes/rtc.inc"
000271r 2               
000271r 2               
000271r 2               
000271r 2               
000271r 2                 .code
000271r 2               
000271r 2               
000271r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000271r 2               ;;
000271r 2               ;;                          RTC / Jiffy Tick
000271r 2               ;;
000271r 2               
000271r 2               
000271r 2               
000271r 2               rtc:
000271r 2               
000271r 2               
000271r 2               ;;  RTC stores ticks at 10ms intervals into a 4-byte (32 bit) value
000271r 2               ;;
000271r 2               ;;  as each byte rolls over the next one is incremented
000271r 2               ;;  on a tick that doesn't roll over the TIME OF DAY
000271r 2               ;;  is updated
000271r 2               
000271r 2  E6 rr          inc TICKS
000273r 2  D0 0A          bne inc_MET
000275r 2  E6 rr          inc TICKS + 1
000277r 2  D0 06          bne inc_MET
000279r 2  E6 rr          inc TICKS + 2
00027Br 2  D0 02          bne inc_MET
00027Dr 2  E6 rr          inc TICKS + 3
00027Fr 2               
00027Fr 2               ;;
00027Fr 2               ;;  Every time it's called we increment the "hundredths of a second" byte
00027Fr 2               ;;
00027Fr 2               ;;  When there's been 100 x 10ms (i.e. 1 second) we increment the seconds
00027Fr 2               ;;
00027Fr 2               ;; We keep the times in single digits, SECONDS, TEN_SECONDS, MINUTES,
00027Fr 2               ;; TEN_MINUTES etc.... to make it easy to display
00027Fr 2               ;; The values are stored in RAM as binary values, and need to be converted to
00027Fr 2               ;; ASCII characters when they are displayed on LCD
00027Fr 2               ;;
00027Fr 2               ;;  The bulk of this routine comes from http://wilsonminesco.com/6502interrupts/#2.1
00027Fr 2               ;;
00027Fr 2               inc_MET:
00027Fr 2  E6 rr          inc CENTISEC
000281r 2  A5 rr          lda CENTISEC
000283r 2  C9 64          cmp #100
000285r 2  30 40          bmi end_MET
000287r 2  64 rr          stz CENTISEC
000289r 2               
000289r 2  E6 rr          inc SECONDS
00028Br 2  A5 rr          lda SECONDS
00028Dr 2  C9 0A          cmp #10
00028Fr 2  30 36          bmi end_MET
000291r 2  64 rr          stz SECONDS
000293r 2  E6 rr          inc TEN_SECONDS
000295r 2               
000295r 2  A5 rr          lda TEN_SECONDS
000297r 2  C9 06          cmp #6
000299r 2  30 2C          bmi end_MET
00029Br 2  64 rr          stz TEN_SECONDS
00029Dr 2               
00029Dr 2  E6 rr          inc MINUTES
00029Fr 2  A5 rr          lda MINUTES
0002A1r 2  C9 0A          cmp #10
0002A3r 2  30 22          bmi end_MET
0002A5r 2  64 rr          stz MINUTES
0002A7r 2               
0002A7r 2  E6 rr          inc TEN_MINUTES
0002A9r 2  A5 rr          lda TEN_MINUTES
0002ABr 2  C9 06          cmp #6
0002ADr 2  30 18          bmi end_MET
0002AFr 2  64 rr          stz TEN_MINUTES
0002B1r 2               
0002B1r 2  E6 rr          inc HRS
0002B3r 2  A5 rr          lda HRS
0002B5r 2  C9 0A          cmp #10
0002B7r 2  30 0E          bmi end_MET
0002B9r 2  64 rr          stz HRS
0002BBr 2               
0002BBr 2  E6 rr          inc TEN_HRS
0002BDr 2  A5 rr          lda TEN_HRS
0002BFr 2  C9 0A          cmp #10
0002C1r 2  30 04          bmi end_MET
0002C3r 2  64 rr          stz TEN_HRS
0002C5r 2               
0002C5r 2  E6 rr          inc HUNDRED_HRS
0002C7r 2               
0002C7r 2               end_MET:
0002C7r 2  60             rts
0002C8r 2               
0002C8r 2               
0002C8r 1               
0002C8r 1               
0002C8r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002C8r 1               ;;
0002C8r 1               ;;         START HERE
0002C8r 1               ;;
0002C8r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002C8r 1               
0002C8r 1               .code
0002C8r 1               
0002C8r 1               reset:
0002C8r 1               
0002C8r 1  A2 FF          ldx #$ff
0002CAr 1  9A             txs
0002CBr 1  58             cli      ; interrupts ON
0002CCr 1  20 rr rr       jsr via_1_init ; set-up VIA_1 for LCD/Keypad
0002CFr 1                 ;jsr lcd_init ; set-up 4-bit mode
0002CFr 1  20 rr rr       jsr lcd_start ; set-up various features of lcd
0002D2r 1               
0002D2r 1               init_variables:
0002D2r 1               
0002D2r 1  64 rr          stz TICKS
0002D4r 1  64 rr          stz TICKS + 1
0002D6r 1  64 rr          stz TICKS + 2
0002D8r 1  64 rr          stz TICKS + 3
0002DAr 1  64 rr          stz DUMP_POINTER
0002DCr 1  64 rr          stz DUMP_POINTER + 1
0002DEr 1  64 rr          stz MESSAGE_POINTER
0002E0r 1  64 rr          stz MESSAGE_POINTER + 1
0002E2r 1  64 rr          stz TOGGLE_TIME
0002E4r 1  64 rr          stz CLOCK_LAST
0002E6r 1  64 rr          stz CENTISEC
0002E8r 1  64 rr          stz FLAGS
0002EAr 1  64 rr          stz SECONDS
0002ECr 1  64 rr          stz TEN_SECONDS
0002EEr 1  64 rr          stz MINUTES
0002F0r 1  64 rr          stz HRS
0002F2r 1  64 rr          stz TEN_HRS
0002F4r 1  64 rr          stz TEN_MINUTES
0002F6r 1  64 rr          stz HUNDRED_HRS
0002F8r 1  9C rr rr       stz TEMP
0002FBr 1  9C rr rr       stz TEMP2
0002FEr 1  9C rr rr       stz TENS
000301r 1  64 rr          stz MEM_POINTER
000303r 1  64 rr          stz MEM_POINTER + 1
000305r 1  9C rr rr       stz HI_DIGIT
000308r 1  9C rr rr       stz LO_DIGIT
00030Br 1               
00030Br 1  A9 rr          lda #<title
00030Dr 1  85 rr          sta MESSAGE_POINTER
00030Fr 1  A9 rr          lda #>title
000311r 1  85 rr          sta MESSAGE_POINTER + 1
000313r 1  20 rr rr       jsr print1
000316r 1               
000316r 1               memory_test:
000316r 1               
000316r 1  A9 rr          lda #<mem_start_msg
000318r 1  85 rr          sta MESSAGE_POINTER
00031Ar 1  A9 rr          lda #>mem_start_msg
00031Cr 1  85 rr          sta MESSAGE_POINTER + 1
00031Er 1  20 rr rr       jsr print2
000321r 1               
000321r 1               ;; test then clear RAM between
000321r 1               ;; $0200 - $3FFF - avoids the ZP and STACK areas
000321r 1               
000321r 1  A9 02          lda #$02            ; start at $0200
000323r 1  85 rr          sta MEM_POINTER + 1
000325r 1  A0 00          ldy #$00
000327r 1               loop_ram:
000327r 1  A9 AA          lda #$AA              ; test with 10101010
000329r 1  91 rr          sta (MEM_POINTER),y   ; write test value to RAM
00032Br 1  A9 FF          lda #$FF              ; remove test value from A
00032Dr 1  B1 rr          lda (MEM_POINTER),y   ; read RAM contents into A
00032Fr 1  C9 AA          cmp #$AA              ; compare to expected value
000331r 1  D0 3B          bne mem_fail_1
000333r 1  A9 55          lda #$55              ; repeat test with 01010101
000335r 1  91 rr          sta (MEM_POINTER),y
000337r 1  A9 FF          lda #$FF
000339r 1  B1 rr          lda (MEM_POINTER),y
00033Br 1  C9 55          cmp #$55
00033Dr 1  D0 3D          bne mem_fail_2
00033Fr 1  A9 00          lda #$00              ; clear RAM to all zeros
000341r 1  91 rr          sta (MEM_POINTER),y
000343r 1  C8             iny
000344r 1  F0 03          beq next_page
000346r 1  4C rr rr       jmp loop_ram
000349r 1               next_page:
000349r 1  A5 rr          lda MEM_POINTER + 1
00034Br 1  1A             inc
00034Cr 1  C9 40          cmp #$40
00034Er 1  F0 05          beq done_ram
000350r 1  85 rr          sta MEM_POINTER + 1
000352r 1  4C rr rr       jmp loop_ram
000355r 1               
000355r 1               done_ram:
000355r 1               
000355r 1  A9 rr          lda #<mem_pass_msg
000357r 1  85 rr          sta MESSAGE_POINTER
000359r 1  A9 rr          lda #>mem_pass_msg
00035Br 1  85 rr          sta MESSAGE_POINTER + 1
00035Dr 1                 ;jsr lcd_clear
00035Dr 1  20 rr rr       jsr print3
000360r 1                 ;smb5 FLAGS
000360r 1  A9 rr          lda #<start_msg
000362r 1  85 rr          sta MESSAGE_POINTER
000364r 1  A9 rr          lda #>start_msg
000366r 1  85 rr          sta MESSAGE_POINTER + 1
000368r 1  20 rr rr       jsr print4
00036Br 1  4C rr rr       jmp loop
00036Er 1               
00036Er 1               mem_fail_1:
00036Er 1               
00036Er 1  A9 rr          lda #<mem_fail_msg_1
000370r 1  85 rr          sta MESSAGE_POINTER
000372r 1  A9 rr          lda #>mem_fail_msg_1
000374r 1  85 rr          sta MESSAGE_POINTER + 1
000376r 1  20 rr rr       jsr print3
000379r 1  4C rr rr       jmp loop
00037Cr 1               
00037Cr 1               mem_fail_2:
00037Cr 1               
00037Cr 1  A9 rr          lda #<mem_fail_msg_2
00037Er 1  85 rr          sta MESSAGE_POINTER
000380r 1  A9 rr          lda #>mem_fail_msg_2
000382r 1  85 rr          sta MESSAGE_POINTER + 1
000384r 1  20 rr rr       jsr print3
000387r 1  4C rr rr       jmp loop
00038Ar 1               
00038Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00038Ar 1               ;;
00038Ar 1               ;;                 Main Loop
00038Ar 1               ;;
00038Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00038Ar 1               
00038Ar 1               loop:
00038Ar 1               
00038Ar 1  CB             wai
00038Br 1  20 rr rr       jsr check_flags
00038Er 1  4C rr rr       jmp loop
000391r 1               
000391r 1               
000391r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000391r 1               ;;
000391r 1               ;;                  FUNCTIONS
000391r 1               ;;
000391r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000391r 1               
000391r 1               check_flags:
000391r 1               
000391r 1  8F rr 04       bbs0 FLAGS, update_block_address
000394r 1  DF rr 15       bbs5 FLAGS, clock_time
000397r 1                 ; check other flags... other actions....
000397r 1  60             rts
000398r 1               
000398r 1               update_block_address:
000398r 1  20 rr rr       jsr lcd_line_2
00039Br 1  38             sec
00039Cr 1  A5 rr          lda TICKS
00039Er 1  E5 rr          sbc TOGGLE_TIME
0003A0r 1  C9 32          cmp #$32
0003A2r 1  90 07          bcc @exit
0003A4r 1  20 rr rr       jsr block_address
0003A7r 1  A5 rr          lda TICKS
0003A9r 1  85 rr          sta TOGGLE_TIME
0003ABr 1               @exit:
0003ABr 1  60             rts
0003ACr 1               
0003ACr 1               clock_time:
0003ACr 1  38             sec
0003ADr 1  A5 rr          lda TICKS
0003AFr 1  E5 rr          sbc CLOCK_LAST
0003B1r 1  C9 32          cmp #$32
0003B3r 1  90 3C          bcc @exit
0003B5r 1  20 rr rr       jsr lcd_cursor_off
0003B8r 1  20 rr rr       jsr lcd_line_3
0003BBr 1  A5 rr          lda HUNDRED_HRS
0003BDr 1  20 rr rr       jsr bintoascii
0003C0r 1  A5 rr          lda TEN_HRS
0003C2r 1  20 rr rr       jsr bintoascii
0003C5r 1  A5 rr          lda HRS
0003C7r 1  20 rr rr       jsr bintoascii
0003CAr 1  A9 3A          lda #':'
0003CCr 1  20 rr rr       jsr print_char
0003CFr 1  A5 rr          lda TEN_MINUTES
0003D1r 1  20 rr rr       jsr bintoascii
0003D4r 1  A5 rr          lda MINUTES
0003D6r 1  20 rr rr       jsr bintoascii
0003D9r 1  A9 3A          lda #':'
0003DBr 1  20 rr rr       jsr print_char
0003DEr 1  A5 rr          lda TEN_SECONDS
0003E0r 1  20 rr rr       jsr bintoascii
0003E3r 1  A5 rr          lda SECONDS
0003E5r 1  20 rr rr       jsr bintoascii
0003E8r 1  A9 20          lda #' '
0003EAr 1  20 rr rr       jsr print_char
0003EDr 1  A5 rr          lda TICKS
0003EFr 1  85 rr          sta CLOCK_LAST
0003F1r 1               @exit:
0003F1r 1  60             rts
0003F2r 1               
0003F2r 1               
0003F2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003F2r 1               ;;
0003F2r 1               ;;      update screen when new memory location is selected
0003F2r 1               ;;
0003F2r 1               ;;
0003F2r 1               new_address:
0003F2r 1  20 rr rr       jsr lcd_clear
0003F5r 1  20 rr rr       jsr lcd_cursor_on
0003F8r 1  A9 rr          lda #<new_address_msg
0003FAr 1  85 rr          sta MESSAGE_POINTER
0003FCr 1  A9 rr          lda #>new_address_msg
0003FEr 1  85 rr          sta MESSAGE_POINTER + 1
000400r 1  20 rr rr       jsr print1
000403r 1  20 rr rr       jsr lcd_line_2
000406r 1               print_address:
000406r 1  A9 24          lda #'$'
000408r 1  20 rr rr       jsr print_char
00040Br 1  A5 rr          lda DUMP_POINTER + 1
00040Dr 1  20 rr rr       jsr bintohex
000410r 1  AD rr rr       lda HI_DIGIT
000413r 1  20 rr rr       jsr print_char
000416r 1  AD rr rr       lda LO_DIGIT
000419r 1  20 rr rr       jsr print_char
00041Cr 1  A5 rr          lda DUMP_POINTER
00041Er 1  20 rr rr       jsr bintohex
000421r 1  AD rr rr       lda HI_DIGIT
000424r 1  20 rr rr       jsr print_char
000427r 1  AD rr rr       lda LO_DIGIT
00042Ar 1  20 rr rr       jsr print_char
00042Dr 1  A9 20          lda #' '
00042Fr 1  20 rr rr       jsr print_char
000432r 1  A0 00          ldy #$00
000434r 1  B1 rr          lda (DUMP_POINTER),y
000436r 1  20 rr rr       jsr bintohex
000439r 1  AD rr rr       lda HI_DIGIT
00043Cr 1  20 rr rr       jsr print_char
00043Fr 1  AD rr rr       lda LO_DIGIT
000442r 1  20 rr rr       jsr print_char
000445r 1  A9 20          lda #' '
000447r 1  20 rr rr       jsr print_char
00044Ar 1  B1 rr          lda (DUMP_POINTER),y
00044Cr 1  20 rr rr       jsr print_char
00044Fr 1  A9 rr          lda #<splash
000451r 1  85 rr          sta MESSAGE_POINTER
000453r 1  A9 rr          lda #>splash
000455r 1  85 rr          sta MESSAGE_POINTER + 1
000457r 1  20 rr rr       jsr print3   ; add second line (cursor) after re-writing the top line
00045Ar 1  60             rts
00045Br 1               
00045Br 1               
00045Br 1               
00045Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00045Br 1               ;;
00045Br 1               ;;      display 8 bytes of data for a "block" of memory
00045Br 1               ;;
00045Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00045Br 1               
00045Br 1               block_address:
00045Br 1               
00045Br 1  20 rr rr       jsr lcd_clear
00045Er 1  20 rr rr       jsr lcd_cursor_off
000461r 1  A9 rr          lda #<block_address_msg
000463r 1  85 rr          sta MESSAGE_POINTER
000465r 1  A9 rr          lda #>block_address_msg
000467r 1  85 rr          sta MESSAGE_POINTER + 1
000469r 1  20 rr rr       jsr print1
00046Cr 1  20 rr rr       jsr lcd_line_2
00046Fr 1  A0 00          ldy #$00
000471r 1  A9 24          lda #'$'
000473r 1  20 rr rr       jsr print_char
000476r 1  A5 rr          lda DUMP_POINTER + 1
000478r 1  20 rr rr       jsr bintohex
00047Br 1  AD rr rr       lda HI_DIGIT
00047Er 1  20 rr rr       jsr print_char
000481r 1  AD rr rr       lda LO_DIGIT
000484r 1  20 rr rr       jsr print_char
000487r 1  A5 rr          lda DUMP_POINTER
000489r 1  20 rr rr       jsr bintohex
00048Cr 1  AD rr rr       lda HI_DIGIT
00048Fr 1  20 rr rr       jsr print_char
000492r 1  AD rr rr       lda LO_DIGIT
000495r 1  20 rr rr       jsr print_char
000498r 1  20 rr rr       jsr lcd_line_3
00049Br 1               loop1:
00049Br 1  B1 rr          lda (DUMP_POINTER),y
00049Dr 1  20 rr rr       jsr bintohex
0004A0r 1  AD rr rr       lda HI_DIGIT
0004A3r 1  20 rr rr       jsr print_char
0004A6r 1  AD rr rr       lda LO_DIGIT
0004A9r 1  20 rr rr       jsr print_char
0004ACr 1  B1 rr          lda (DUMP_POINTER),y
0004AEr 1  C8             iny
0004AFr 1  C0 08          cpy #$08
0004B1r 1  D0 E8          bne loop1
0004B3r 1  A9 20          lda #' '
0004B5r 1  20 rr rr       jsr print_char
0004B8r 1  A9 48          lda #'H'
0004BAr 1  20 rr rr       jsr print_char
0004BDr 1  A9 65          lda #'e'
0004BFr 1  20 rr rr       jsr print_char
0004C2r 1  A9 78          lda #'x'
0004C4r 1  20 rr rr       jsr print_char
0004C7r 1  20 rr rr       jsr lcd_line_4
0004CAr 1  A0 00          ldy #$00
0004CCr 1               loop2:
0004CCr 1  A9 20          lda #$20
0004CEr 1  20 rr rr       jsr print_char
0004D1r 1  B1 rr          lda (DUMP_POINTER),y
0004D3r 1                 ;jsr bintohex
0004D3r 1                 ;lda HI_DIGIT
0004D3r 1  20 rr rr       jsr print_char
0004D6r 1                 ;lda LO_DIGIT
0004D6r 1                 ;jsr print_char
0004D6r 1                 ;lda (DUMP_POINTER),y
0004D6r 1  C8             iny
0004D7r 1  C0 08          cpy #$08
0004D9r 1  D0 F1          bne loop2
0004DBr 1  A9 20          lda #' '
0004DDr 1  20 rr rr       jsr print_char
0004E0r 1  A9 43          lda #'C'
0004E2r 1  20 rr rr       jsr print_char
0004E5r 1  A9 68          lda #'h'
0004E7r 1  20 rr rr       jsr print_char
0004EAr 1  A9 72          lda #'r'
0004ECr 1  20 rr rr       jsr print_char
0004EFr 1  60             rts
0004F0r 1               
0004F0r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004F0r 1               ;;
0004F0r 1               ;;            print on line 1 or line 2
0004F0r 1               ;;
0004F0r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004F0r 1               
0004F0r 1               
0004F0r 1               
0004F0r 1               print1:
0004F0r 1  20 rr rr       jsr lcd_line_1
0004F3r 1  A0 00          ldy #0
0004F5r 1  4C rr rr       jmp line
0004F8r 1               print2:
0004F8r 1  20 rr rr       jsr lcd_line_2
0004FBr 1  A0 00          ldy #0
0004FDr 1  4C rr rr       jmp line
000500r 1               print3:
000500r 1  20 rr rr       jsr lcd_line_3
000503r 1  A0 00          ldy #0
000505r 1  4C rr rr       jmp line
000508r 1               print4:
000508r 1  20 rr rr       jsr lcd_line_4
00050Br 1  A0 00          ldy #0
00050Dr 1  4C rr rr       jmp line
000510r 1               
000510r 1               line:
000510r 1  B1 rr          lda (MESSAGE_POINTER),y
000512r 1  F0 07          beq @exit
000514r 1  20 rr rr       jsr print_char
000517r 1  C8             iny
000518r 1  4C rr rr       jmp line
00051Br 1               @exit:
00051Br 1  60             rts
00051Cr 1               
00051Cr 1               
00051Cr 1               
00051Cr 1               
00051Cr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00051Cr 1               ;;
00051Cr 1               ;;      Monitor function - decrement the selected address
00051Cr 1               ;;
00051Cr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00051Cr 1               
00051Cr 1               decrement_address:
00051Cr 1               
00051Cr 1  38             sec
00051Dr 1  A5 rr          lda DUMP_POINTER
00051Fr 1  E9 01          sbc #$01
000521r 1  85 rr          sta DUMP_POINTER
000523r 1  8D rr rr       sta BYTE
000526r 1  A5 rr          lda DUMP_POINTER + 1
000528r 1  E9 00          sbc #$00
00052Ar 1  85 rr          sta DUMP_POINTER + 1
00052Cr 1  8D rr rr       sta BYTE + 1
00052Fr 1  60             rts
000530r 1               
000530r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000530r 1               ;;
000530r 1               ;;      Monitor function - increment the selected address
000530r 1               ;;
000530r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000530r 1               
000530r 1               increment_address:
000530r 1               
000530r 1  18             clc
000531r 1  A5 rr          lda DUMP_POINTER
000533r 1  69 01          adc #$01
000535r 1  85 rr          sta DUMP_POINTER
000537r 1  8D rr rr       sta BYTE
00053Ar 1  A5 rr          lda DUMP_POINTER + 1
00053Cr 1  69 00          adc #$00
00053Er 1  85 rr          sta DUMP_POINTER + 1
000540r 1  8D rr rr       sta BYTE + 1
000543r 1  60             rts
000544r 1               
000544r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000544r 1               ;;
000544r 1               ;;      Monitor function - increment the selected block of  addresses by 8
000544r 1               ;;
000544r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000544r 1               
000544r 1               increment_block:
000544r 1               
000544r 1  18             clc
000545r 1  A5 rr          lda DUMP_POINTER
000547r 1  69 08          adc #$08
000549r 1  85 rr          sta DUMP_POINTER
00054Br 1  8D rr rr       sta BYTE
00054Er 1  A5 rr          lda DUMP_POINTER + 1
000550r 1  69 00          adc #$00
000552r 1  85 rr          sta DUMP_POINTER + 1
000554r 1  8D rr rr       sta BYTE + 1
000557r 1  60             rts
000558r 1               
000558r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000558r 1               ;;
000558r 1               ;;      Monitor function - decrement the selected block of  addresses by 8
000558r 1               ;;
000558r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000558r 1               
000558r 1               decrement_block:
000558r 1               
000558r 1  38             sec
000559r 1  A5 rr          lda DUMP_POINTER
00055Br 1  E9 08          sbc #$08
00055Dr 1  85 rr          sta DUMP_POINTER
00055Fr 1  8D rr rr       sta BYTE
000562r 1  A5 rr          lda DUMP_POINTER + 1
000564r 1  E9 00          sbc #$00
000566r 1  85 rr          sta DUMP_POINTER + 1
000568r 1  8D rr rr       sta BYTE + 1
00056Br 1  60             rts
00056Cr 1               
00056Cr 1               
00056Cr 1               
00056Cr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00056Cr 1               ;;
00056Cr 1               ;; use last 4 key presses (as hex bytes) to fill two BYTES
00056Cr 1               ;;
00056Cr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00056Cr 1               
00056Cr 1               keys_byte:
00056Cr 1               
00056Cr 1  AD rr rr       lda KEY_PRESS + 1
00056Fr 1  0A             asl
000570r 1  0A             asl
000571r 1  0A             asl
000572r 1  0A             asl
000573r 1  8D rr rr       sta BYTE
000576r 1  AD rr rr       lda KEY_PRESS
000579r 1  0D rr rr       ora BYTE
00057Cr 1  8D rr rr       sta BYTE
00057Fr 1  AD rr rr       lda KEY_PRESS + 3
000582r 1  0A             asl
000583r 1  0A             asl
000584r 1  0A             asl
000585r 1  0A             asl
000586r 1  8D rr rr       sta BYTE + 1
000589r 1  AD rr rr       lda KEY_PRESS + 2
00058Cr 1  0D rr rr       ora BYTE + 1
00058Fr 1  8D rr rr       sta BYTE + 1
000592r 1  60             rts
000593r 1               
000593r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000593r 1               ;;
000593r 1               ;;    toggle the display/update of Clock on each appropriate keypress
000593r 1               ;;
000593r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000593r 1               
000593r 1               show_clock:
000593r 1               
000593r 1  DF rr 05       bbs5 FLAGS, reset_bit5
000596r 1  D7 rr          smb5 FLAGS
000598r 1  4C rr rr       jmp exit_show_clock
00059Br 1               reset_bit5:
00059Br 1  57 rr          rmb5 FLAGS
00059Dr 1               exit_show_clock:
00059Dr 1  60             rts
00059Er 1               
00059Er 1               
00059Er 1               
00059Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00059Er 1               ;;
00059Er 1               ;;    toggle the automatic update view of the "8-byte memory block"
00059Er 1               ;;
00059Er 1               
00059Er 1               show_block:
00059Er 1               
00059Er 1  8F rr 05       bbs0 FLAGS, reset_bit0
0005A1r 1  87 rr          smb0 FLAGS
0005A3r 1  4C rr rr       jmp exit_show_block
0005A6r 1               reset_bit0:
0005A6r 1  07 rr          rmb0 FLAGS
0005A8r 1               exit_show_block:
0005A8r 1  60             rts
0005A9r 1               
0005A9r 1               
0005A9r 1               
0005A9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A9r 1               ;;
0005A9r 1               ;;                     INTERRUPT HANDLERS
0005A9r 1               ;;
0005A9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A9r 1               
0005A9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A9r 1               ;;
0005A9r 1               ;;                 CB1 : reset & restart timer
0005A9r 1               ;;
0005A9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005A9r 1               
0005A9r 1               cb1_handler:
0005A9r 1               
0005A9r 1  64 rr          stz HUNDRED_HRS
0005ABr 1  64 rr          stz TEN_HRS
0005ADr 1  64 rr          stz TEN_MINUTES
0005AFr 1  64 rr          stz TEN_SECONDS
0005B1r 1  64 rr          stz HRS
0005B3r 1  64 rr          stz MINUTES
0005B5r 1  64 rr          stz SECONDS
0005B7r 1  60             rts
0005B8r 1               
0005B8r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005B8r 1               ;;
0005B8r 1               ;;                CB2 : lap-time pause timer
0005B8r 1               ;;
0005B8r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005B8r 1               
0005B8r 1               cb2_handler:
0005B8r 1               
0005B8r 1  20 rr rr       jsr show_clock
0005BBr 1  60             rts
0005BCr 1               
0005BCr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005BCr 1               ;;
0005BCr 1               ;;                    MONITOR / KEYPAD
0005BCr 1               ;;
0005BCr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0005BCr 1               
0005BCr 1               keypad_handler:
0005BCr 1               
0005BCr 1  20 rr rr       jsr get_key     ; READs from PORTA which also re-sets VIA's Interrupt flag
0005BFr 1  8D rr rr       sta INKEY       ; put the byte value of input into RAM ( $00 )
0005C2r 1  AD 00 60       lda PORTB_1       ; check for SHIFT/INSTRUCTION button
0005C5r 1  29 80          and #%10000000
0005C7r 1  F0 03          beq check_keypress ; done this way to get around the limit in size of branch jumps....
0005C9r 1  4C rr rr       jmp handle_new_char
0005CCr 1               
0005CCr 1               check_keypress:
0005CCr 1               
0005CCr 1  AD rr rr       lda INKEY
0005CFr 1  20 rr rr       jsr bintohex  ; convert BYTE value of keypress to its ASCII HEX equivalent "0" -> "A"
0005D2r 1               
0005D2r 1               ; choose action of "SHIFTed" key-press
0005D2r 1               
0005D2r 1               check_a:
0005D2r 1               
0005D2r 1  C9 41          cmp #'A'
0005D4r 1                 ; move up one memory address and display contents
0005D4r 1  D0 09          bne check_b
0005D6r 1  20 rr rr       jsr increment_address
0005D9r 1  20 rr rr       jsr new_address
0005DCr 1  4C rr rr       jmp exit_key_irq
0005DFr 1               
0005DFr 1               check_b:
0005DFr 1               
0005DFr 1  C9 42          cmp #'B'
0005E1r 1                 ; move down one memory address and display contents
0005E1r 1  D0 09          bne check_c
0005E3r 1  20 rr rr       jsr decrement_address
0005E6r 1  20 rr rr       jsr new_address
0005E9r 1  4C rr rr       jmp exit_key_irq
0005ECr 1               
0005ECr 1               check_c:
0005ECr 1               
0005ECr 1  C9 43          cmp #'C'
0005EEr 1                 ; return to MONITOR
0005EEr 1  D0 15          bne check_d
0005F0r 1  57 rr          rmb5 FLAGS
0005F2r 1  07 rr          rmb0 FLAGS
0005F4r 1  20 rr rr       jsr lcd_clear
0005F7r 1  A9 rr          lda #<splash
0005F9r 1  85 rr          sta MESSAGE_POINTER
0005FBr 1  A9 rr          lda #>splash
0005FDr 1  85 rr          sta MESSAGE_POINTER + 1
0005FFr 1  20 rr rr       jsr new_address
000602r 1  4C rr rr       jmp exit_key_irq
000605r 1               
000605r 1               check_d:
000605r 1               
000605r 1  C9 44          cmp #'D'
000607r 1                 ; move monitor to entered 4-digit memory address
000607r 1  D0 10          bne check_e
000609r 1  AD rr rr       lda BYTE
00060Cr 1  85 rr          sta DUMP_POINTER
00060Er 1  AD rr rr       lda BYTE + 1
000611r 1  85 rr          sta DUMP_POINTER + 1
000613r 1  20 rr rr       jsr new_address
000616r 1                 ;jsr print2
000616r 1  4C rr rr       jmp exit_key_irq
000619r 1               
000619r 1               check_e:
000619r 1               
000619r 1  C9 45          cmp #'E'
00061Br 1                 ; insert (POKE) byte of data in to current memory address, then increment to next address
00061Br 1  D0 10          bne check_f
00061Dr 1  AD rr rr       lda BYTE
000620r 1  A0 00          ldy #$00
000622r 1  91 rr          sta (DUMP_POINTER),y
000624r 1  20 rr rr       jsr increment_address
000627r 1  20 rr rr       jsr new_address
00062Ar 1                 ;jsr print2
00062Ar 1  4C rr rr       jmp exit_key_irq
00062Dr 1               
00062Dr 1               check_f:
00062Dr 1               
00062Dr 1  C9 46          cmp #'F'
00062Fr 1                 ; show 8-byte wide block of memory
00062Fr 1  D0 12          bne check_1
000631r 1  A0 00          ldy #$00
000633r 1  AD rr rr       lda BYTE
000636r 1  85 rr          sta DUMP_POINTER
000638r 1  AD rr rr       lda BYTE + 1
00063Br 1  85 rr          sta DUMP_POINTER + 1
00063Dr 1  20 rr rr       jsr block_address
000640r 1  4C rr rr       jmp exit_key_irq
000643r 1               
000643r 1               check_1:
000643r 1               
000643r 1  C9 31          cmp #'1'
000645r 1                 ; show/auto-update clock
000645r 1  D0 13          bne check_3
000647r 1  20 rr rr       jsr lcd_clear
00064Ar 1  A9 rr          lda #<emt
00064Cr 1  85 rr          sta MESSAGE_POINTER
00064Er 1  A9 rr          lda #>emt
000650r 1  85 rr          sta MESSAGE_POINTER + 1
000652r 1  20 rr rr       jsr print4
000655r 1  D7 rr          smb5 FLAGS
000657r 1  4C rr rr       jmp exit_key_irq
00065Ar 1               
00065Ar 1               check_3:
00065Ar 1               
00065Ar 1  C9 33          cmp #'3'
00065Cr 1  D0 0B          bne check_6
00065Er 1  A0 00          ldy #$00
000660r 1  20 rr rr       jsr increment_block
000663r 1  20 rr rr       jsr block_address
000666r 1  4C rr rr       jmp exit_key_irq
000669r 1               
000669r 1               check_6:
000669r 1               
000669r 1  C9 36          cmp #'6'
00066Br 1  D0 0B          bne check_9
00066Dr 1  A0 00          ldy #$00
00066Fr 1  20 rr rr       jsr decrement_block
000672r 1  20 rr rr       jsr block_address
000675r 1  4C rr rr       jmp exit_key_irq
000678r 1               
000678r 1               check_9:
000678r 1               
000678r 1  C9 39          cmp #'9'
00067Ar 1  D0 06          bne check_4
00067Cr 1  20 rr rr       jsr show_block
00067Fr 1  4C rr rr       jmp exit_key_irq
000682r 1               
000682r 1               check_4:
000682r 1               
000682r 1  C9 34          cmp #'4'
000684r 1  D0 03          bne check_5
000686r 1                 ;lda BYTE
000686r 1                 ;sta HEXB
000686r 1                 ;lda BYTE + 1
000686r 1                 ;sta HEXB + 1
000686r 1                 ;jsr byte_to_hex
000686r 1  4C rr rr       jmp exit_key_irq
000689r 1               
000689r 1               check_5:
000689r 1               
000689r 1  C9 35          cmp #'5'
00068Br 1  D0 27          bne exit_key_irq
00068Dr 1  20 00 3F       jsr $3F00
000690r 1  4C rr rr       jmp exit_key_irq
000693r 1               
000693r 1               
000693r 1               handle_new_char:
000693r 1               
000693r 1  AD rr rr       lda KEY_PRESS + 2
000696r 1  8D rr rr       sta KEY_PRESS + 3
000699r 1  AD rr rr       lda KEY_PRESS + 1
00069Cr 1  8D rr rr       sta KEY_PRESS + 2
00069Fr 1  AD rr rr       lda KEY_PRESS
0006A2r 1  8D rr rr       sta KEY_PRESS + 1
0006A5r 1  AD rr rr       lda INKEY       ; get the new keypress value and...
0006A8r 1  8D rr rr       sta KEY_PRESS
0006ABr 1  20 rr rr       jsr bintohex
0006AEr 1  20 rr rr       jsr print_char  ; and print it on LCD
0006B1r 1  20 rr rr       jsr keys_byte
0006B4r 1               
0006B4r 1               exit_key_irq:
0006B4r 1               
0006B4r 1  20 rr rr       jsr scan  ; re-enable keypad
0006B7r 1  60             rts
0006B8r 1               
0006B8r 1               
0006B8r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006B8r 1               
0006B8r 1               nmi:
0006B8r 1               
0006B8r 1  40             rti
0006B9r 1               
0006B9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006B9r 1               ;;
0006B9r 1               ;;    interrupt is triggered by HIGH edge on VIA CA1 pin
0006B9r 1               ;;     PORTA low nibble (keypad columns) inputs are diode ORed to CA1
0006B9r 1               ;;
0006B9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006B9r 1               
0006B9r 1               irq:
0006B9r 1               
0006B9r 1               ; put registers on the stack while handling the IRQ
0006B9r 1  48             pha
0006BAr 1  DA             phx
0006BBr 1  5A             phy
0006BCr 1               
0006BCr 1               ;  find responsible hardware
0006BCr 1               
0006BCr 1               ;  Is it VIA_1?
0006BCr 1               
0006BCr 1  AD 0D 60       lda IFR_1   ; if IFR_1 has Bit7 set (ie sign=NEGATIVE) then it IS the source of the interrupt
0006BFr 1  10 30          bpl next_device ; if it's not set (ie sign=POSITIVE) then branch to test the next possible device
0006C1r 1               
0006C1r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006C1r 1               ;;
0006C1r 1               ;; IFR Flags
0006C1r 1               ;; B7  B6  B5  B4  B3  B2  B1  B0
0006C1r 1               ;; IRQ TI1 TI2 CB1 CB2 SR CA1 CA2
0006C1r 1               ;;
0006C1r 1               ;; Interrupt source is found by sequentially shifting IFR bit left to put bit-of-interest into the CARRY place
0006C1r 1               ;; and then branching based on whether CARRY is SET or not
0006C1r 1               ;;
0006C1r 1               ;; Only add tests for IRQ sources in use, and adjust the ASLs in each test as necessary
0006C1r 1               ;;
0006C1r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006C1r 1               
0006C1r 1               test_timer1:
0006C1r 1               
0006C1r 1  0A             asl           ; shift IFR left twice puts the TI1 bit into CARRY....
0006C2r 1  0A             asl
0006C3r 1  90 09          bcc test_cb1  ; carry clear = next test
0006C5r 1  2C 04 60       bit T1CL_1      ; clear not clear = handle the TIMER interrupt
0006C8r 1  20 rr rr       jsr rtc
0006CBr 1  4C rr rr       jmp exit_irq
0006CEr 1               
0006CEr 1               test_cb1:
0006CEr 1               
0006CEr 1  0A             asl
0006CFr 1  0A             asl
0006D0r 1  90 09          bcc test_cb2
0006D2r 1  2C 00 60       bit PORTB_1
0006D5r 1  20 rr rr       jsr cb1_handler
0006D8r 1  4C rr rr       jmp exit_irq
0006DBr 1               
0006DBr 1               test_cb2:
0006DBr 1               
0006DBr 1  0A             asl
0006DCr 1  90 09          bcc test_ca1
0006DEr 1  2C 00 60       bit PORTB_1
0006E1r 1  20 rr rr       jsr cb2_handler
0006E4r 1  4C rr rr       jmp exit_irq
0006E7r 1               
0006E7r 1               test_ca1:
0006E7r 1               
0006E7r 1  0A             asl           ; shift CA1 bit into the CARRY bit & test
0006E8r 1  0A             asl
0006E9r 1  90 06          bcc exit_irq        ; carry clear = leave
0006EBr 1  20 rr rr       jsr keypad_handler  ; carry not clear = handle the CA1 interrupt (keypad)
0006EEr 1  4C rr rr       jmp exit_irq
0006F1r 1               
0006F1r 1               
0006F1r 1               next_device:
0006F1r 1               
0006F1r 1               exit_irq:
0006F1r 1               
0006F1r 1  7A             ply
0006F2r 1  FA             plx
0006F3r 1  68             pla
0006F4r 1  40             rti
0006F5r 1               
0006F5r 1  3C 73 68 69  start_msg: .asciiz "<shift>+C to start"
0006F9r 1  66 74 3E 2B  
0006FDr 1  43 20 74 6F  
000708r 1  56 69 65 77  new_address_msg: .asciiz "View/Edit Memory"
00070Cr 1  2F 45 64 69  
000710r 1  74 20 4D 65  
000719r 1  38 20 42 79  block_address_msg: .asciiz "8 Byte view"
00071Dr 1  74 65 20 76  
000721r 1  69 65 77 00  
000725r 1  2E 2E 2E 53  title: .asciiz "...Shed Brain v1..."
000729r 1  68 65 64 20  
00072Dr 1  42 72 61 69  
000739r 1  53 68 65 64  emt: .asciiz "Shed Time  MET"
00073Dr 1  20 54 69 6D  
000741r 1  65 20 20 4D  
000748r 1  73 68 65 64  splash: .asciiz "shed> "
00074Cr 1  3E 20 00     
00074Fr 1               ;error_message: .asciiz "Not Decimal"
00074Fr 1  42 65 67 69  mem_start_msg: .asciiz "Begin RAM Test"
000753r 1  6E 20 52 41  
000757r 1  4D 20 54 65  
00075Er 1  52 41 4D 20  mem_pass_msg: .asciiz "RAM Test Pass"
000762r 1  54 65 73 74  
000766r 1  20 50 61 73  
00076Cr 1  52 41 4D 20  mem_fail_msg_1: .asciiz "RAM Test 1 Fail"
000770r 1  54 65 73 74  
000774r 1  20 31 20 46  
00077Cr 1  52 41 4D 20  mem_fail_msg_2: .asciiz "RAM Test 2 Fail"
000780r 1  54 65 73 74  
000784r 1  20 32 20 46  
00078Cr 1               
00078Cr 1               ; Reset/IRQ vectors
00078Cr 1               
00078Cr 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr          .word nmi
000002r 1  rr rr          .word reset
000004r 1  rr rr          .word irq
000004r 1               
