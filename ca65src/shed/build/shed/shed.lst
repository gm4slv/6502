ca65 V2.18 - Debian 2.19-1
Main file   : shed.s
Current file: shed.s

000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1  xx xx        DUMP_POINTER:     .res 2
000002r 1  xx           FLAGS:            .res 1
000003r 1  xx           TOGGLE_TIME:      .res 1
000004r 1  xx           CLOCK_LAST:       .res 1
000005r 1  xx xx        MESSAGE_POINTER:  .res 2
000007r 1  xx xx xx xx  TICKS:            .res 4
00000Br 1  xx           CENTISEC:         .res 1
00000Cr 1  xx           HUNDRED_HRS:      .res 1
00000Dr 1  xx           TEN_HRS:          .res 1
00000Er 1  xx           HRS:              .res 1
00000Fr 1  xx           TEN_MINUTES:      .res 1
000010r 1  xx           MINUTES:          .res 1
000011r 1  xx           TEN_SECONDS:      .res 1
000012r 1  xx           SECONDS:          .res 1
000013r 1  xx xx        MEM_POINTER:      .res 2
000015r 1               
000015r 1               .bss
000000r 1               
000000r 1  xx           INKEY:            .res 1
000001r 1  xx xx xx xx  KEY_PRESS:        .res 4
000005r 1  xx xx        BYTE:             .res 2
000007r 1  xx           TENS:             .res 1
000008r 1  xx           HUNDREDS:         .res 1
000009r 1  xx xx        HEX:              .res 2
00000Br 1  xx xx        HEXB:             .res 2
00000Dr 1  xx           TEMP:             .res 1
00000Er 1  xx           TEMP2:            .res 1
00000Fr 1  xx           HI_DIGIT:         .res 1
000010r 1  xx           LO_DIGIT:         .res 1
000011r 1               
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               ;;
000011r 1               ;;        INCLUDES
000011r 1               ;;
000011r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000011r 1               
000011r 1               .include "../includes/ioports.inc"
000011r 2               
000011r 2                 .code
000000r 2               
000000r 2               ; VIA_1 Port addresses
000000r 2               VIA_1     = $6000
000000r 2               PORTB_1   = VIA_1
000000r 2               PORTA_1   = VIA_1 + 1
000000r 2               DDRB_1    = VIA_1 + 2
000000r 2               DDRA_1    = VIA_1 + 3
000000r 2               T1CL_1    = VIA_1 + 4
000000r 2               T1CH_1    = VIA_1 + 5
000000r 2               T1LL_1    = VIA_1 + 6
000000r 2               T1LH_1    = VIA_1 + 7
000000r 2               T2CL_1    = VIA_1 + 8
000000r 2               T2CH_1    = VIA_1 + 9
000000r 2               SR_1      = VIA_1 + 10
000000r 2               ACR_1     = VIA_1 + 11
000000r 2               PCR_1     = VIA_1 + 12
000000r 2               IFR_1     = VIA_1 + 13
000000r 2               IER_1     = VIA_1 + 14
000000r 2               PORTA_NO_HS_1 = VIA_1 + 15
000000r 2               
000000r 2               ; VIA_2 Port addresses
000000r 2               VIA_2     = $5000
000000r 2               PORTB_2   = VIA_2
000000r 2               PORTA_2   = VIA_2 + 1
000000r 2               DDRB_2    = VIA_2 + 2
000000r 2               DDRA_2    = VIA_2 + 3
000000r 2               T1CL_2    = VIA_2 + 4
000000r 2               T1CH_2    = VIA_2 + 5
000000r 2               T1LL_2    = VIA_2 + 6
000000r 2               T1LH_2    = VIA_2 + 7
000000r 2               T2CL_2    = VIA_2 + 8
000000r 2               T2CH_2    = VIA_2 + 9
000000r 2               SR_2      = VIA_2 + 10
000000r 2               ACR_2     = VIA_2 + 11
000000r 2               PCR_2     = VIA_2 + 12
000000r 2               IFR_2     = VIA_2 + 13
000000r 2               IER_2     = VIA_2 + 14
000000r 2               PORTA_NO_HS_2 = VIA_2 + 15
000000r 2               
000000r 2               ; VIA_3 Port addresses
000000r 2               VIA_3     = $4800
000000r 2               PORTB_3   = VIA_3
000000r 2               PORTA_3   = VIA_3 + 1
000000r 2               DDRB_3    = VIA_3 + 2
000000r 2               DDRA_3    = VIA_3 + 3
000000r 2               T1CL_3    = VIA_3 + 4
000000r 2               T1CH_3    = VIA_3 + 5
000000r 2               T1LL_3    = VIA_3 + 6
000000r 2               T1LH_3    = VIA_3 + 7
000000r 2               T2CL_3    = VIA_3 + 8
000000r 2               T2CH_3    = VIA_3 + 9
000000r 2               SR_3      = VIA_3 + 10
000000r 2               ACR_3     = VIA_3 + 11
000000r 2               PCR_3     = VIA_3 + 12
000000r 2               IFR_3     = VIA_3 + 13
000000r 2               IER_3     = VIA_3 + 14
000000r 2               PORTA_NO_HS_3 = VIA_3 + 15
000000r 2               
000000r 2               ; ACIA_1 Port Addresses
000000r 2               ACIA_1    = $4400
000000r 2               S_TXRX_1  = ACIA_1      ; TXD / RXD
000000r 2               S_STA_1   = ACIA_1 + 1  ; Status
000000r 2               S_COM_1   = ACIA_1 + 2  ; Command
000000r 2               S_CON_1   = ACIA_1 + 3  ; Control
000000r 2               
000000r 2               
000000r 2               via_1_init:
000000r 2               
000000r 2  A9 40          lda #%01000000
000002r 2  8D 0B 60       sta ACR_1
000005r 2  A9 0E          lda #$0E
000007r 2  8D 04 60       sta T1CL_1
00000Ar 2  A9 27          lda #$27
00000Cr 2  8D 05 60       sta T1CH_1
00000Fr 2               
00000Fr 2  A9 DA          lda #%11011010  ; T1, CA1 active
000011r 2  8D 0E 60       sta IER_1
000014r 2               
000014r 2  A9 01          lda #$01  ;  CA1 active high-transition
000016r 2  8D 0C 60       sta PCR_1
000019r 2               
000019r 2  A9 7F          lda #%01111111 ; Set all pins on port B to output except BIT 7 which is used for "SHIFT/INSTRUCTION"  button
00001Br 2  8D 02 60       sta DDRB_1
00001Er 2  A9 F0          lda #%11110000 ; Set low-nibble pins on port A to input and high-nibble pins to output, for keypad
000020r 2  8D 03 60       sta DDRA_1
000023r 2               
000023r 2  60             rts
000024r 2               
000024r 2               
000024r 1               .include "../includes/lcd.inc"
000024r 2               
000024r 2               
000024r 2                 .code
000024r 2               
000024r 2               ; LCD Command masks
000024r 2               E  = %01000000
000024r 2               RW = %00100000
000024r 2               RS = %00010000
000024r 2               
000024r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000024r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000024r 2               ;;
000024r 2               ;;
000024r 2               ;;                              LCD Functions
000024r 2               ;;
000024r 2               ;;
000024r 2               ;;
000024r 2               
000024r 2               lcd_start:
000024r 2  A9 28          lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
000026r 2  20 rr rr       jsr lcd_instruction
000029r 2  20 rr rr       jsr lcd_entry_mode
00002Cr 2  20 rr rr       jsr lcd_cursor_off
00002Fr 2  20 rr rr       jsr lcd_clear
000032r 2  60             rts
000033r 2               
000033r 2               lcd_entry_mode:
000033r 2  A9 06          lda #%00000110 ; Increment and shift cursor; don't shift display
000035r 2  20 rr rr       jsr lcd_instruction
000038r 2  60             rts
000039r 2               
000039r 2               lcd_home:
000039r 2  A9 02          lda #%00000010 ; cursor HOME
00003Br 2  20 rr rr       jsr lcd_instruction
00003Er 2  60             rts
00003Fr 2               
00003Fr 2               lcd_clear:
00003Fr 2  A9 01          lda #%00000001 ; Clear display
000041r 2  20 rr rr       jsr lcd_instruction
000044r 2  60             rts
000045r 2               
000045r 2               lcd_cursor_off:
000045r 2  A9 0C          lda #%00001100 ; Display on; cursor off; blink off
000047r 2  20 rr rr       jsr lcd_instruction
00004Ar 2  60             rts
00004Br 2               
00004Br 2               lcd_cursor_on:
00004Br 2  A9 0F          lda #%00001111 ; Display on; cursor on; blink on
00004Dr 2  20 rr rr       jsr lcd_instruction
000050r 2  60             rts
000051r 2               
000051r 2               lcd_line_2:
000051r 2  A9 A9          lda #%10101001
000053r 2  20 rr rr       jsr lcd_instruction
000056r 2  60             rts
000057r 2               
000057r 2               lcd_wait:
000057r 2  48             pha
000058r 2  A9 70          lda #%01110000  ; LCD data is input (don't change MSB BIT7, it has to stay ZERO for SHIFT Button input)
00005Ar 2  8D 02 60       sta DDRB_1
00005Dr 2               lcdbusy:
00005Dr 2  A9 20          lda #RW
00005Fr 2  8D 00 60       sta PORTB_1
000062r 2  A9 60          lda #(RW | E)
000064r 2  8D 00 60       sta PORTB_1
000067r 2  AD 00 60       lda PORTB_1     ; Read high nibble
00006Ar 2  48             pha             ; and put on stack since it has the busy flag
00006Br 2  A9 20          lda #RW
00006Dr 2  8D 00 60       sta PORTB_1
000070r 2  A9 60          lda #(RW | E)
000072r 2  8D 00 60       sta PORTB_1
000075r 2  AD 00 60       lda PORTB_1       ; Read low nibble
000078r 2  68             pla             ; Get high nibble off stack
000079r 2  29 08          and #%00001000
00007Br 2  D0 E0          bne lcdbusy
00007Dr 2               
00007Dr 2  A9 20          lda #RW
00007Fr 2  8D 00 60       sta PORTB_1
000082r 2  A9 7F          lda #%01111111  ; LCD data is output (don't change MSB BIT7, it has to stay ZERO for SHIFT Buttion input)
000084r 2  8D 02 60       sta DDRB_1
000087r 2  68             pla
000088r 2  60             rts
000089r 2               
000089r 2               lcd_init:
000089r 2  A9 02          lda #%00000010 ; Set 4-bit mode : DO ONCE AT POWER UP
00008Br 2  8D 00 60       sta PORTB_1
00008Er 2  09 40          ora #E
000090r 2  8D 00 60       sta PORTB_1
000093r 2  29 0F          and #%00001111
000095r 2  8D 00 60       sta PORTB_1
000098r 2  60             rts
000099r 2               
000099r 2               lcd_instruction:
000099r 2  20 rr rr       jsr lcd_wait
00009Cr 2  48             pha
00009Dr 2  4A             lsr
00009Er 2  4A             lsr
00009Fr 2  4A             lsr
0000A0r 2  4A             lsr            ; Send high 4 bits
0000A1r 2  8D 00 60       sta PORTB_1
0000A4r 2  09 40          ora #E         ; Set E bit to send instruction
0000A6r 2  8D 00 60       sta PORTB_1
0000A9r 2  49 40          eor #E         ; Clear E bit
0000ABr 2  8D 00 60       sta PORTB_1
0000AEr 2  68             pla
0000AFr 2  29 0F          and #%00001111 ; Send low 4 bits
0000B1r 2  8D 00 60       sta PORTB_1
0000B4r 2  09 40          ora #E         ; Set E bit to send instruction
0000B6r 2  8D 00 60       sta PORTB_1
0000B9r 2  49 40          eor #E         ; Clear E bit
0000BBr 2  8D 00 60       sta PORTB_1
0000BEr 2  60             rts
0000BFr 2               
0000BFr 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000BFr 2               ;;
0000BFr 2               ;;        PRINT Characters on LCD - an ASCII value in Accumulator
0000BFr 2               ;;        is printed on the display
0000BFr 2               ;;
0000BFr 2               
0000BFr 2               print_char:
0000BFr 2  20 rr rr       jsr lcd_wait
0000C2r 2  48             pha
0000C3r 2  4A             lsr
0000C4r 2  4A             lsr
0000C5r 2  4A             lsr
0000C6r 2  4A             lsr             ; Send high 4 bits
0000C7r 2  09 10          ora #RS         ; Set RS
0000C9r 2  8D 00 60       sta PORTB_1
0000CCr 2  09 40          ora #E          ; Set E bit to send instruction
0000CEr 2  8D 00 60       sta PORTB_1
0000D1r 2  49 40          eor #E          ; Clear E bit
0000D3r 2  8D 00 60       sta PORTB_1
0000D6r 2  68             pla
0000D7r 2  29 0F          and #%00001111  ; Send low 4 bits
0000D9r 2  09 10          ora #RS         ; Set RS
0000DBr 2  8D 00 60       sta PORTB_1
0000DEr 2  09 40          ora #E          ; Set E bit to send instruction
0000E0r 2  8D 00 60       sta PORTB_1
0000E3r 2  49 40          eor #E          ; Clear E bit
0000E5r 2  8D 00 60       sta PORTB_1
0000E8r 2  60             rts
0000E9r 2               
0000E9r 2               
0000E9r 1               .include "../includes/getkey.inc"
0000E9r 2               
0000E9r 2                 .code
0000E9r 2               
0000E9r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0000E9r 2               ;;
0000E9r 2               ;;
0000E9r 2               ;;      READ THE 4x4 keypad using  VIA_1 PORTA
0000E9r 2               ;;
0000E9r 2               ;;      Accumulator holds the ASCII value of the pressed key when it returns
0000E9r 2               ;;
0000E9r 2               
0000E9r 2               get_key:
0000E9r 2               readKeypad:
0000E9r 2  A2 04          ldx #$04        ; Row 4 - counting down
0000EBr 2  A0 80          ldy #%10000000  ;
0000EDr 2               ScanRow:
0000EDr 2  8C 01 60       sty PORTA_1
0000F0r 2  AD 01 60       lda PORTA_1
0000F3r 2  29 0F          and #%00001111  ; mask off keypad input - only low 4 (keypad column) bits are read
0000F5r 2  C9 00          cmp #$00
0000F7r 2  D0 0B          bne Row_Found   ; non-zero means a row output has been connected via a switch to a column input
0000F9r 2  CA             dex             ; zero means it hasn't been found, so check next row down
0000FAr 2  98             tya
0000FBr 2  4A             lsr
0000FCr 2  A8             tay
0000FDr 2  C9 08          cmp #%00001000
0000FFr 2  D0 EC          bne ScanRow
000101r 2  A9 FF          lda #$ff
000103r 2  60             rts
000104r 2               Row_Found:
000104r 2  8E rr rr       stx TEMP ; store row
000107r 2  A0 FF          ldy #$ff
000109r 2               FindCol:
000109r 2  C8             iny
00010Ar 2  4A             lsr
00010Br 2  90 FC          bcc FindCol
00010Dr 2  98             tya
00010Er 2  0A             asl
00010Fr 2  0A             asl  ; col * 4
000110r 2  18             clc
000111r 2  6D rr rr       adc TEMP ; add row
000114r 2  AA             tax
000115r 2  BD rr rr       lda keypad_array,x
000118r 2  60             rts
000119r 2               
000119r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000119r 2               ;;
000119r 2               ;;       key = <INDEX> ; pressing a key returns a 4-bit number
000119r 2               ;;       calculated as (Column * 4 ) + Row, in the range
000119r 2               ;;       1 - 16 which acts as an index to a lookup-table.
000119r 2               ;;       The lookup table returns a byte value equal to the key's
000119r 2               ;;       numerical value
000119r 2               ;;       e.g.
000119r 2               ;;       button 1 returns byte $01 / 00000001
000119r 2               ;;       button F returns byte $0f / 00001111
000119r 2               ;;    ____________________________________________________
000119r 2               ;;   |     1 = <16> | 2 = <12> |    3 = <8> | A(10) = <4> |
000119r 2               ;;   |______________|__________|____________|_____________|
000119r 2               ;;   |     4 = <15> | 5 = <11> |    6 = <7> | B(11) = <3> |
000119r 2               ;;   |______________|__________|____________|_____________|
000119r 2               ;;   |     7 = <14> | 8 = <10> |    9 = <6> | C(12) = <2> |
000119r 2               ;;   |______________|__________|____________|_____________|
000119r 2               ;;   | E(14) = <13> | 0 = <9>  | F(15)= <5> | D(13) = <1> |
000119r 2               ;;   |______________|__________|____________|_____________|
000119r 2               ;;
000119r 2               ;;            Button  ..   D    C    B    A    F    9    6    3    0    8    5    2    E    7    4    1
000119r 2               ;;            <INDEX> 0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16
000119r 2  00 0D 0C 0B  keypad_array: .byte $00, $0D, $0C, $0B, $0A, $0F, $09, $06, $03, $00, $08, $05, $02, $0E, $07, $04, $01
00011Dr 2  0A 0F 09 06  
000121r 2  03 00 08 05  
00012Ar 2               
00012Ar 2               
00012Ar 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00012Ar 2               ;;
00012Ar 2               ;;  set ROW keypad outputs high as a source for triggering interrupt when a key is pressed
00012Ar 2               ;;
00012Ar 2               ;;
00012Ar 2               scan:
00012Ar 2  A0 F0          ldy #%11110000
00012Cr 2  8C 01 60       sty PORTA_1
00012Fr 2  60             rts
000130r 2               
000130r 2               
000130r 1               .include "../includes/functions.inc"
000130r 2               
000130r 2               
000130r 2                 .code
000130r 2               
000130r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000130r 2               ;;
000130r 2               ;;          convert an 8-bit binary number from Accumulator, in range 00000000 -> 11111111 ($00 to $FF)
000130r 2               ;;          to its HEX number encode as ASCII -  using a simple lookup table. Store each digit in RAM. Accumulator
000130r 2               ;;          holds the last/low digit on return.
000130r 2               ;;
000130r 2               
000130r 2               
000130r 2               bintohex:
000130r 2  48             pha
000131r 2  4A             lsr
000132r 2  4A             lsr
000133r 2  4A             lsr
000134r 2  4A             lsr
000135r 2  AA             tax
000136r 2  BD rr rr       lda hexascii,x
000139r 2  8D rr rr       sta HI_DIGIT
00013Cr 2  68             pla
00013Dr 2  29 0F          and #$0f
00013Fr 2  AA             tax
000140r 2  BD rr rr       lda hexascii,x
000143r 2  8D rr rr       sta LO_DIGIT
000146r 2  60             rts
000147r 2               
000147r 2  30 31 32 33  hexascii: .byte "0123456789ABCDEF"
00014Br 2  34 35 36 37  
00014Fr 2  38 39 41 42  
000157r 2               
000157r 2               
000157r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000157r 2               ;;
000157r 2               ;;    convert a binary (hex) value in Accumulator into
000157r 2               ;;    its ASCII equivalent character in decimal 0-99 and print it
000157r 2               ;;    this converts hex/binary numbers from the RTC into human readable
000157r 2               ;;    decimal for display on clock
000157r 2               
000157r 2               
000157r 2               bintoascii:
000157r 2               
000157r 2  C9 0A          cmp #10
000159r 2  30 10          bmi single_figure
00015Br 2  0A             asl
00015Cr 2  AA             tax
00015Dr 2  BD rr rr       lda binascii,x
000160r 2  20 rr rr       jsr print_char
000163r 2               
000163r 2  E8             inx
000164r 2               
000164r 2  BD rr rr       lda binascii,x
000167r 2  20 rr rr       jsr print_char
00016Ar 2  60             rts
00016Br 2               
00016Br 2               single_figure:
00016Br 2  0A             asl
00016Cr 2  AA             tax
00016Dr 2  E8             inx
00016Er 2  BD rr rr       lda binascii,x
000171r 2  20 rr rr       jsr print_char
000174r 2  60             rts
000175r 2               
000175r 2               
000175r 2  30 30 30 31  binascii: .byte "00010203040506070809"
000179r 2  30 32 30 33  
00017Dr 2  30 34 30 35  
000189r 2  31 30 31 31            .byte "10111213141516171819"
00018Dr 2  31 32 31 33  
000191r 2  31 34 31 35  
00019Dr 2  32 30 32 31            .byte "20212223242526272829"
0001A1r 2  32 32 32 33  
0001A5r 2  32 34 32 35  
0001B1r 2  33 30 33 31            .byte "30313233343536373839"
0001B5r 2  33 32 33 33  
0001B9r 2  33 34 33 35  
0001C5r 2  34 30 34 31            .byte "40414243444546474849"
0001C9r 2  34 32 34 33  
0001CDr 2  34 34 34 35  
0001D9r 2  35 30 35 31            .byte "50515253545556575859"
0001DDr 2  35 32 35 33  
0001E1r 2  35 34 35 35  
0001EDr 2  36 30 36 31            .byte "60616263646566676869"
0001F1r 2  36 32 36 33  
0001F5r 2  36 34 36 35  
000201r 2  37 30 37 31            .byte "70717273747576777879"
000205r 2  37 32 37 33  
000209r 2  37 34 37 35  
000215r 2  38 30 38 31            .byte "80818283848586878889"
000219r 2  38 32 38 33  
00021Dr 2  38 34 38 35  
000229r 2  39 30 39 31            .byte "90919293949596979899"
00022Dr 2  39 32 39 33  
000231r 2  39 34 39 35  
00023Dr 2               
00023Dr 2               
00023Dr 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00023Dr 2               ;;
00023Dr 2               ;;      Convert a decimal number entered at keypad into its
00023Dr 2               ;;      HEX equivalent and display
00023Dr 2               ;;
00023Dr 2               
00023Dr 2               byte_to_hex:
00023Dr 2               
00023Dr 2  20 rr rr       jsr lcd_clear
000240r 2  AD rr rr       lda HEXB + 1
000243r 2  29 0F          and #$0f
000245r 2  20 rr rr       jsr bintohex
000248r 2  AD rr rr       lda HI_DIGIT
00024Br 2  20 rr rr       jsr print_char
00024Er 2  AD rr rr       lda LO_DIGIT
000251r 2  20 rr rr       jsr print_char
000254r 2  AD rr rr       lda HEXB
000257r 2  20 rr rr       jsr bintohex
00025Ar 2  AD rr rr       lda HI_DIGIT
00025Dr 2  20 rr rr       jsr print_char
000260r 2  AD rr rr       lda LO_DIGIT
000263r 2  20 rr rr       jsr print_char
000266r 2  A9 64          lda #'d'
000268r 2  20 rr rr       jsr print_char
00026Br 2  A9 3D          lda #'='
00026Dr 2  20 rr rr       jsr print_char
000270r 2  A9 24          lda #'$'
000272r 2  20 rr rr       jsr print_char
000275r 2               
000275r 2  AD rr rr       lda HEXB ; lo byte
000278r 2  48             pha
000279r 2  4A             lsr
00027Ar 2  4A             lsr
00027Br 2  4A             lsr
00027Cr 2  4A             lsr
00027Dr 2  C9 0A          cmp #10
00027Fr 2  10 38          bpl error
000281r 2  20 rr rr       jsr mult10
000284r 2  8D rr rr       sta TENS
000287r 2  68             pla
000288r 2  29 0F          and #%00001111 ; UNITS
00028Ar 2  C9 0A          cmp #10
00028Cr 2  10 2C          bpl print_error
00028Er 2               ;  jsr mult10
00028Er 2  18             clc
00028Fr 2  6D rr rr       adc TENS
000292r 2  8D rr rr       sta HEX
000295r 2               
000295r 2  AD rr rr       lda HEXB + 1 ; hi byte
000298r 2  29 0F          and #%00001111
00029Ar 2  C9 0A          cmp #10
00029Cr 2  10 1C          bpl print_error
00029Er 2  20 rr rr       jsr mult10
0002A1r 2  20 rr rr       jsr mult10 ; hundreds
0002A4r 2  6D rr rr       adc HEX
0002A7r 2               
0002A7r 2  20 rr rr       jsr bintohex
0002AAr 2  AD rr rr       lda HI_DIGIT
0002ADr 2  20 rr rr       jsr print_char
0002B0r 2  AD rr rr       lda LO_DIGIT
0002B3r 2  20 rr rr       jsr print_char
0002B6r 2  4C rr rr       jmp exit_byte_to_hex
0002B9r 2               
0002B9r 2               error:
0002B9r 2  68             pla
0002BAr 2               print_error:
0002BAr 2  A9 rr          lda #<error_message
0002BCr 2  85 rr          sta MESSAGE_POINTER
0002BEr 2  A9 rr          lda #>error_message
0002C0r 2  85 rr          sta MESSAGE_POINTER + 1
0002C2r 2  20 rr rr       jsr print
0002C5r 2                 ;jsr lcd_cursor_off
0002C5r 2  60             rts
0002C6r 2               
0002C6r 2               exit_byte_to_hex:
0002C6r 2  20 rr rr       jsr lcd_line_2
0002C9r 2               
0002C9r 2  60             rts
0002CAr 2               
0002CAr 2               
0002CAr 2               
0002CAr 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002CAr 2               ;;
0002CAr 2               ;;  (A * 8) + (A * 2) = A * 10
0002CAr 2               
0002CAr 2               mult10:
0002CAr 2  48             pha
0002CBr 2  0A             asl
0002CCr 2  0A             asl
0002CDr 2  0A             asl
0002CEr 2  8D rr rr       sta TEMP2 ; A*8
0002D1r 2  68             pla
0002D2r 2  0A             asl      ; A*2
0002D3r 2  6D rr rr       adc TEMP2 ; A*10
0002D6r 2  60             rts
0002D7r 2               
0002D7r 2               
0002D7r 2               
0002D7r 2               
0002D7r 2               
0002D7r 1               .include "../includes/rtc.inc"
0002D7r 2               
0002D7r 2               
0002D7r 2               
0002D7r 2               
0002D7r 2                 .code
0002D7r 2               
0002D7r 2               
0002D7r 2               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002D7r 2               ;;
0002D7r 2               ;;                          RTC / Jiffy Tick
0002D7r 2               ;;
0002D7r 2               
0002D7r 2               
0002D7r 2               
0002D7r 2               rtc:
0002D7r 2               
0002D7r 2               
0002D7r 2               ;;  RTC stores ticks at 10ms intervals into a 4-byte (32 bit) value
0002D7r 2               ;;
0002D7r 2               ;;  as each byte rolls over the next one is incremented
0002D7r 2               ;;  on a tick that doesn't roll over the TIME OF DAY
0002D7r 2               ;;  is updated
0002D7r 2               
0002D7r 2  E6 rr          inc TICKS
0002D9r 2  D0 0A          bne inc_MET
0002DBr 2  E6 rr          inc TICKS + 1
0002DDr 2  D0 06          bne inc_MET
0002DFr 2  E6 rr          inc TICKS + 2
0002E1r 2  D0 02          bne inc_MET
0002E3r 2  E6 rr          inc TICKS + 3
0002E5r 2               
0002E5r 2               ;;
0002E5r 2               ;;  Every time it's called we increment the "hundredths of a second" byte
0002E5r 2               ;;
0002E5r 2               ;;  When there's been 100 x 10ms (i.e. 1 second) we increment the seconds
0002E5r 2               ;;
0002E5r 2               ;; We keep the times in single digits, SECONDS, TEN_SECONDS, MINUTES,
0002E5r 2               ;; TEN_MINUTES etc.... to make it easy to display
0002E5r 2               ;; The values are stored in RAM as binary values, and need to be converted to
0002E5r 2               ;; ASCII characters when they are displayed on LCD
0002E5r 2               ;;
0002E5r 2               ;;  The bulk of this routine comes from http://wilsonminesco.com/6502interrupts/#2.1
0002E5r 2               ;;
0002E5r 2               inc_MET:
0002E5r 2  E6 rr          inc CENTISEC
0002E7r 2  A5 rr          lda CENTISEC
0002E9r 2  C9 64          cmp #100
0002EBr 2  30 40          bmi end_MET
0002EDr 2  64 rr          stz CENTISEC
0002EFr 2               
0002EFr 2  E6 rr          inc SECONDS
0002F1r 2  A5 rr          lda SECONDS
0002F3r 2  C9 0A          cmp #10
0002F5r 2  30 36          bmi end_MET
0002F7r 2  64 rr          stz SECONDS
0002F9r 2  E6 rr          inc TEN_SECONDS
0002FBr 2               
0002FBr 2  A5 rr          lda TEN_SECONDS
0002FDr 2  C9 06          cmp #6
0002FFr 2  30 2C          bmi end_MET
000301r 2  64 rr          stz TEN_SECONDS
000303r 2               
000303r 2  E6 rr          inc MINUTES
000305r 2  A5 rr          lda MINUTES
000307r 2  C9 0A          cmp #10
000309r 2  30 22          bmi end_MET
00030Br 2  64 rr          stz MINUTES
00030Dr 2               
00030Dr 2  E6 rr          inc TEN_MINUTES
00030Fr 2  A5 rr          lda TEN_MINUTES
000311r 2  C9 06          cmp #6
000313r 2  30 18          bmi end_MET
000315r 2  64 rr          stz TEN_MINUTES
000317r 2               
000317r 2  E6 rr          inc HRS
000319r 2  A5 rr          lda HRS
00031Br 2  C9 0A          cmp #10
00031Dr 2  30 0E          bmi end_MET
00031Fr 2  64 rr          stz HRS
000321r 2               
000321r 2  E6 rr          inc TEN_HRS
000323r 2  A5 rr          lda TEN_HRS
000325r 2  C9 0A          cmp #10
000327r 2  30 04          bmi end_MET
000329r 2  64 rr          stz TEN_HRS
00032Br 2               
00032Br 2  E6 rr          inc HUNDRED_HRS
00032Dr 2               
00032Dr 2               end_MET:
00032Dr 2  60             rts
00032Er 2               
00032Er 2               
00032Er 1               
00032Er 1               
00032Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00032Er 1               ;;
00032Er 1               ;;         START HERE
00032Er 1               ;;
00032Er 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00032Er 1               
00032Er 1               .code
00032Er 1               
00032Er 1               reset:
00032Er 1               
00032Er 1  A2 FF          ldx #$ff
000330r 1  9A             txs
000331r 1  58             cli      ; interrupts ON
000332r 1  20 rr rr       jsr via_1_init ; set-up VIA_1 for LCD/Keypad
000335r 1  20 rr rr       jsr lcd_init ; set-up 4-bit mode
000338r 1  20 rr rr       jsr lcd_start ; set-up various features of lcd
00033Br 1               
00033Br 1               init_variables:
00033Br 1               
00033Br 1  64 rr          stz TICKS
00033Dr 1  64 rr          stz TICKS + 1
00033Fr 1  64 rr          stz TICKS + 2
000341r 1  64 rr          stz TICKS + 3
000343r 1  64 rr          stz DUMP_POINTER
000345r 1  64 rr          stz DUMP_POINTER + 1
000347r 1  64 rr          stz MESSAGE_POINTER
000349r 1  64 rr          stz MESSAGE_POINTER + 1
00034Br 1  64 rr          stz TOGGLE_TIME
00034Dr 1  64 rr          stz CLOCK_LAST
00034Fr 1  64 rr          stz CENTISEC
000351r 1  64 rr          stz FLAGS
000353r 1  64 rr          stz SECONDS
000355r 1  64 rr          stz TEN_SECONDS
000357r 1  64 rr          stz MINUTES
000359r 1  64 rr          stz HRS
00035Br 1  64 rr          stz TEN_HRS
00035Dr 1  64 rr          stz TEN_MINUTES
00035Fr 1  64 rr          stz HUNDRED_HRS
000361r 1  9C rr rr       stz TEMP
000364r 1  9C rr rr       stz TEMP2
000367r 1  9C rr rr       stz TENS
00036Ar 1  64 rr          stz MEM_POINTER
00036Cr 1  64 rr          stz MEM_POINTER + 1
00036Er 1  9C rr rr       stz HI_DIGIT
000371r 1  9C rr rr       stz LO_DIGIT
000374r 1               
000374r 1               memory_test:
000374r 1               
000374r 1  A9 rr          lda #<mem_start_msg
000376r 1  85 rr          sta MESSAGE_POINTER
000378r 1  A9 rr          lda #>mem_start_msg
00037Ar 1  85 rr          sta MESSAGE_POINTER + 1
00037Cr 1  20 rr rr       jsr print1
00037Fr 1               
00037Fr 1               ;; test then clear RAM between
00037Fr 1               ;; $0200 - $3FFF - avoids the ZP and STACK areas
00037Fr 1               
00037Fr 1  A9 02          lda #$02            ; start at $0200
000381r 1  85 rr          sta MEM_POINTER + 1
000383r 1  A0 00          ldy #$00
000385r 1               loop_ram:
000385r 1  A9 AA          lda #$AA              ; test with 10101010
000387r 1  91 rr          sta (MEM_POINTER),y   ; write test value to RAM
000389r 1  A9 FF          lda #$FF              ; remove test value from A
00038Br 1  B1 rr          lda (MEM_POINTER),y   ; read RAM contents into A
00038Dr 1  C9 AA          cmp #$AA              ; compare to expected value
00038Fr 1  D0 35          bne mem_fail_1
000391r 1  A9 55          lda #$55              ; repeat test with 01010101
000393r 1  91 rr          sta (MEM_POINTER),y
000395r 1  A9 FF          lda #$FF
000397r 1  B1 rr          lda (MEM_POINTER),y
000399r 1  C9 55          cmp #$55
00039Br 1  D0 37          bne mem_fail_2
00039Dr 1  A9 00          lda #$00              ; clear RAM to all zeros
00039Fr 1  91 rr          sta (MEM_POINTER),y
0003A1r 1  C8             iny
0003A2r 1  F0 03          beq next_page
0003A4r 1  4C rr rr       jmp loop_ram
0003A7r 1               next_page:
0003A7r 1  A5 rr          lda MEM_POINTER + 1
0003A9r 1  1A             inc
0003AAr 1  C9 40          cmp #$40
0003ACr 1  F0 05          beq done_ram
0003AEr 1  85 rr          sta MEM_POINTER + 1
0003B0r 1  4C rr rr       jmp loop_ram
0003B3r 1               
0003B3r 1               done_ram:
0003B3r 1               
0003B3r 1  A9 rr          lda #<mem_pass_msg
0003B5r 1  85 rr          sta MESSAGE_POINTER
0003B7r 1  A9 rr          lda #>mem_pass_msg
0003B9r 1  85 rr          sta MESSAGE_POINTER + 1
0003BBr 1  20 rr rr       jsr lcd_clear
0003BEr 1  20 rr rr       jsr print
0003C1r 1  D7 rr          smb5 FLAGS
0003C3r 1  4C rr rr       jmp loop
0003C6r 1               
0003C6r 1               mem_fail_1:
0003C6r 1               
0003C6r 1  A9 rr          lda #<mem_fail_msg_1
0003C8r 1  85 rr          sta MESSAGE_POINTER
0003CAr 1  A9 rr          lda #>mem_fail_msg_1
0003CCr 1  85 rr          sta MESSAGE_POINTER + 1
0003CEr 1  20 rr rr       jsr print
0003D1r 1  4C rr rr       jmp loop
0003D4r 1               
0003D4r 1               mem_fail_2:
0003D4r 1               
0003D4r 1  A9 rr          lda #<mem_fail_msg_2
0003D6r 1  85 rr          sta MESSAGE_POINTER
0003D8r 1  A9 rr          lda #>mem_fail_msg_2
0003DAr 1  85 rr          sta MESSAGE_POINTER + 1
0003DCr 1  20 rr rr       jsr print
0003DFr 1  4C rr rr       jmp loop
0003E2r 1               
0003E2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003E2r 1               ;;
0003E2r 1               ;;                 Main Loop
0003E2r 1               ;;
0003E2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003E2r 1               
0003E2r 1               loop:
0003E2r 1               
0003E2r 1  CB             wai
0003E3r 1  20 rr rr       jsr check_flags
0003E6r 1  4C rr rr       jmp loop
0003E9r 1               
0003E9r 1               
0003E9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003E9r 1               ;;
0003E9r 1               ;;                  FUNCTIONS
0003E9r 1               ;;
0003E9r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0003E9r 1               
0003E9r 1               check_flags:
0003E9r 1               
0003E9r 1  8F rr 04       bbs0 FLAGS, update_block_address
0003ECr 1  DF rr 12       bbs5 FLAGS, clock_time
0003EFr 1                 ; check other flags... other actions....
0003EFr 1  60             rts
0003F0r 1               
0003F0r 1               update_block_address:
0003F0r 1               
0003F0r 1  38             sec
0003F1r 1  A5 rr          lda TICKS
0003F3r 1  E5 rr          sbc TOGGLE_TIME
0003F5r 1  C9 32          cmp #$32
0003F7r 1  90 07          bcc @exit
0003F9r 1  20 rr rr       jsr block_address
0003FCr 1  A5 rr          lda TICKS
0003FEr 1  85 rr          sta TOGGLE_TIME
000400r 1               @exit:
000400r 1  60             rts
000401r 1               
000401r 1               clock_time:
000401r 1               
000401r 1  38             sec
000402r 1  A5 rr          lda TICKS
000404r 1  E5 rr          sbc CLOCK_LAST
000406r 1  C9 32          cmp #$32
000408r 1  90 3C          bcc @exit
00040Ar 1  20 rr rr       jsr lcd_cursor_off
00040Dr 1  20 rr rr       jsr lcd_home
000410r 1  A5 rr          lda HUNDRED_HRS
000412r 1  20 rr rr       jsr bintoascii
000415r 1  A5 rr          lda TEN_HRS
000417r 1  20 rr rr       jsr bintoascii
00041Ar 1  A5 rr          lda HRS
00041Cr 1  20 rr rr       jsr bintoascii
00041Fr 1  A9 3A          lda #':'
000421r 1  20 rr rr       jsr print_char
000424r 1  A5 rr          lda TEN_MINUTES
000426r 1  20 rr rr       jsr bintoascii
000429r 1  A5 rr          lda MINUTES
00042Br 1  20 rr rr       jsr bintoascii
00042Er 1  A9 3A          lda #':'
000430r 1  20 rr rr       jsr print_char
000433r 1  A5 rr          lda TEN_SECONDS
000435r 1  20 rr rr       jsr bintoascii
000438r 1  A5 rr          lda SECONDS
00043Ar 1  20 rr rr       jsr bintoascii
00043Dr 1  A9 20          lda #' '
00043Fr 1  20 rr rr       jsr print_char
000442r 1  A5 rr          lda TICKS
000444r 1  85 rr          sta CLOCK_LAST
000446r 1               @exit:
000446r 1  60             rts
000447r 1               
000447r 1               
000447r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000447r 1               ;;
000447r 1               ;;      update screen when new memory location is selected
000447r 1               ;;
000447r 1               ;;
000447r 1               new_address:
000447r 1  20 rr rr       jsr lcd_clear
00044Ar 1  20 rr rr       jsr lcd_cursor_on
00044Dr 1               print_address:
00044Dr 1  A9 24          lda #'$'
00044Fr 1  20 rr rr       jsr print_char
000452r 1  A5 rr          lda DUMP_POINTER + 1
000454r 1  20 rr rr       jsr bintohex
000457r 1  AD rr rr       lda HI_DIGIT
00045Ar 1  20 rr rr       jsr print_char
00045Dr 1  AD rr rr       lda LO_DIGIT
000460r 1  20 rr rr       jsr print_char
000463r 1  A5 rr          lda DUMP_POINTER
000465r 1  20 rr rr       jsr bintohex
000468r 1  AD rr rr       lda HI_DIGIT
00046Br 1  20 rr rr       jsr print_char
00046Er 1  AD rr rr       lda LO_DIGIT
000471r 1  20 rr rr       jsr print_char
000474r 1  A9 20          lda #' '
000476r 1  20 rr rr       jsr print_char
000479r 1  A0 00          ldy #$00
00047Br 1  B1 rr          lda (DUMP_POINTER),y
00047Dr 1  20 rr rr       jsr bintohex
000480r 1  AD rr rr       lda HI_DIGIT
000483r 1  20 rr rr       jsr print_char
000486r 1  AD rr rr       lda LO_DIGIT
000489r 1  20 rr rr       jsr print_char
00048Cr 1  A9 20          lda #' '
00048Er 1  20 rr rr       jsr print_char
000491r 1  B1 rr          lda (DUMP_POINTER),y
000493r 1  20 rr rr       jsr print_char
000496r 1  20 rr rr       jsr print   ; add second line (cursor) after re-writing the top line
000499r 1  60             rts
00049Ar 1               
00049Ar 1               
00049Ar 1               
00049Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00049Ar 1               ;;
00049Ar 1               ;;      display 8 bytes of data for a "block" of memory
00049Ar 1               ;;
00049Ar 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00049Ar 1               
00049Ar 1               block_address:
00049Ar 1               
00049Ar 1  20 rr rr       jsr lcd_clear
00049Dr 1  A0 00          ldy #$00
00049Fr 1  A9 24          lda #'$'
0004A1r 1  20 rr rr       jsr print_char
0004A4r 1  A5 rr          lda DUMP_POINTER + 1
0004A6r 1  20 rr rr       jsr bintohex
0004A9r 1  AD rr rr       lda HI_DIGIT
0004ACr 1  20 rr rr       jsr print_char
0004AFr 1  AD rr rr       lda LO_DIGIT
0004B2r 1  20 rr rr       jsr print_char
0004B5r 1  A5 rr          lda DUMP_POINTER
0004B7r 1  20 rr rr       jsr bintohex
0004BAr 1  AD rr rr       lda HI_DIGIT
0004BDr 1  20 rr rr       jsr print_char
0004C0r 1  AD rr rr       lda LO_DIGIT
0004C3r 1  20 rr rr       jsr print_char
0004C6r 1  20 rr rr       jsr lcd_line_2
0004C9r 1               @loop:
0004C9r 1  B1 rr          lda (DUMP_POINTER),y
0004CBr 1  20 rr rr       jsr bintohex
0004CEr 1  AD rr rr       lda HI_DIGIT
0004D1r 1  20 rr rr       jsr print_char
0004D4r 1  AD rr rr       lda LO_DIGIT
0004D7r 1  20 rr rr       jsr print_char
0004DAr 1  B1 rr          lda (DUMP_POINTER),y
0004DCr 1  C8             iny
0004DDr 1  C0 08          cpy #$08
0004DFr 1  D0 E8          bne @loop
0004E1r 1  60             rts
0004E2r 1               
0004E2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004E2r 1               ;;
0004E2r 1               ;;            print on line 1 or line 2
0004E2r 1               ;;
0004E2r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004E2r 1               
0004E2r 1               print1:
0004E2r 1               
0004E2r 1  20 rr rr       jsr lcd_clear
0004E5r 1  A0 00          ldy #0
0004E7r 1  4C rr rr       jmp line1
0004EAr 1               print:
0004EAr 1  20 rr rr       jsr lcd_line_2
0004EDr 1  A0 00          ldy #0
0004EFr 1               line1:
0004EFr 1  B1 rr          lda (MESSAGE_POINTER),y
0004F1r 1  F0 07          beq @exit
0004F3r 1  20 rr rr       jsr print_char
0004F6r 1  C8             iny
0004F7r 1  4C rr rr       jmp line1
0004FAr 1               @exit:
0004FAr 1  60             rts
0004FBr 1               
0004FBr 1               
0004FBr 1               
0004FBr 1               
0004FBr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004FBr 1               ;;
0004FBr 1               ;;      Monitor function - decrement the selected address
0004FBr 1               ;;
0004FBr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004FBr 1               
0004FBr 1               decrement_address:
0004FBr 1               
0004FBr 1  38             sec
0004FCr 1  A5 rr          lda DUMP_POINTER
0004FEr 1  E9 01          sbc #$01
000500r 1  85 rr          sta DUMP_POINTER
000502r 1  8D rr rr       sta BYTE
000505r 1  A5 rr          lda DUMP_POINTER + 1
000507r 1  E9 00          sbc #$00
000509r 1  85 rr          sta DUMP_POINTER + 1
00050Br 1  8D rr rr       sta BYTE + 1
00050Er 1  60             rts
00050Fr 1               
00050Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00050Fr 1               ;;
00050Fr 1               ;;      Monitor function - increment the selected address
00050Fr 1               ;;
00050Fr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00050Fr 1               
00050Fr 1               increment_address:
00050Fr 1               
00050Fr 1  18             clc
000510r 1  A5 rr          lda DUMP_POINTER
000512r 1  69 01          adc #$01
000514r 1  85 rr          sta DUMP_POINTER
000516r 1  8D rr rr       sta BYTE
000519r 1  A5 rr          lda DUMP_POINTER + 1
00051Br 1  69 00          adc #$00
00051Dr 1  85 rr          sta DUMP_POINTER + 1
00051Fr 1  8D rr rr       sta BYTE + 1
000522r 1  60             rts
000523r 1               
000523r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000523r 1               ;;
000523r 1               ;;      Monitor function - increment the selected block of  addresses by 8
000523r 1               ;;
000523r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000523r 1               
000523r 1               increment_block:
000523r 1               
000523r 1  18             clc
000524r 1  A5 rr          lda DUMP_POINTER
000526r 1  69 08          adc #$08
000528r 1  85 rr          sta DUMP_POINTER
00052Ar 1  8D rr rr       sta BYTE
00052Dr 1  A5 rr          lda DUMP_POINTER + 1
00052Fr 1  69 00          adc #$00
000531r 1  85 rr          sta DUMP_POINTER + 1
000533r 1  8D rr rr       sta BYTE + 1
000536r 1  60             rts
000537r 1               
000537r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000537r 1               ;;
000537r 1               ;;      Monitor function - decrement the selected block of  addresses by 8
000537r 1               ;;
000537r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000537r 1               
000537r 1               decrement_block:
000537r 1               
000537r 1  38             sec
000538r 1  A5 rr          lda DUMP_POINTER
00053Ar 1  E9 08          sbc #$08
00053Cr 1  85 rr          sta DUMP_POINTER
00053Er 1  8D rr rr       sta BYTE
000541r 1  A5 rr          lda DUMP_POINTER + 1
000543r 1  E9 00          sbc #$00
000545r 1  85 rr          sta DUMP_POINTER + 1
000547r 1  8D rr rr       sta BYTE + 1
00054Ar 1  60             rts
00054Br 1               
00054Br 1               
00054Br 1               
00054Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00054Br 1               ;;
00054Br 1               ;; use last 4 key presses (as hex bytes) to fill two BYTES
00054Br 1               ;;
00054Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00054Br 1               
00054Br 1               keys_byte:
00054Br 1               
00054Br 1  AD rr rr       lda KEY_PRESS + 1
00054Er 1  0A             asl
00054Fr 1  0A             asl
000550r 1  0A             asl
000551r 1  0A             asl
000552r 1  8D rr rr       sta BYTE
000555r 1  AD rr rr       lda KEY_PRESS
000558r 1  0D rr rr       ora BYTE
00055Br 1  8D rr rr       sta BYTE
00055Er 1  AD rr rr       lda KEY_PRESS + 3
000561r 1  0A             asl
000562r 1  0A             asl
000563r 1  0A             asl
000564r 1  0A             asl
000565r 1  8D rr rr       sta BYTE + 1
000568r 1  AD rr rr       lda KEY_PRESS + 2
00056Br 1  0D rr rr       ora BYTE + 1
00056Er 1  8D rr rr       sta BYTE + 1
000571r 1  60             rts
000572r 1               
000572r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000572r 1               ;;
000572r 1               ;;    toggle the display/update of Clock on each appropriate keypress
000572r 1               ;;
000572r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000572r 1               
000572r 1               show_clock:
000572r 1               
000572r 1  DF rr 05       bbs5 FLAGS, reset_bit5
000575r 1  D7 rr          smb5 FLAGS
000577r 1  4C rr rr       jmp exit_show_clock
00057Ar 1               reset_bit5:
00057Ar 1  57 rr          rmb5 FLAGS
00057Cr 1               exit_show_clock:
00057Cr 1  60             rts
00057Dr 1               
00057Dr 1               
00057Dr 1               
00057Dr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00057Dr 1               ;;
00057Dr 1               ;;    toggle the automatic update view of the "8-byte memory block"
00057Dr 1               ;;
00057Dr 1               
00057Dr 1               show_block:
00057Dr 1               
00057Dr 1  8F rr 05       bbs0 FLAGS, reset_bit0
000580r 1  87 rr          smb0 FLAGS
000582r 1  4C rr rr       jmp exit_show_block
000585r 1               reset_bit0:
000585r 1  07 rr          rmb0 FLAGS
000587r 1               exit_show_block:
000587r 1  60             rts
000588r 1               
000588r 1               
000588r 1               
000588r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000588r 1               ;;
000588r 1               ;;                     INTERRUPT HANDLERS
000588r 1               ;;
000588r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000588r 1               
000588r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000588r 1               ;;
000588r 1               ;;                 CB1 : reset & restart timer
000588r 1               ;;
000588r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000588r 1               
000588r 1               cb1_handler:
000588r 1               
000588r 1  64 rr          stz HUNDRED_HRS
00058Ar 1  64 rr          stz TEN_HRS
00058Cr 1  64 rr          stz TEN_MINUTES
00058Er 1  64 rr          stz TEN_SECONDS
000590r 1  64 rr          stz HRS
000592r 1  64 rr          stz MINUTES
000594r 1  64 rr          stz SECONDS
000596r 1  60             rts
000597r 1               
000597r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000597r 1               ;;
000597r 1               ;;                CB2 : lap-time pause timer
000597r 1               ;;
000597r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000597r 1               
000597r 1               cb2_handler:
000597r 1               
000597r 1  20 rr rr       jsr show_clock
00059Ar 1  60             rts
00059Br 1               
00059Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00059Br 1               ;;
00059Br 1               ;;                    MONITOR / KEYPAD
00059Br 1               ;;
00059Br 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00059Br 1               
00059Br 1               keypad_handler:
00059Br 1               
00059Br 1  20 rr rr       jsr get_key     ; READs from PORTA which also re-sets VIA's Interrupt flag
00059Er 1  8D rr rr       sta INKEY       ; put the byte value of input into RAM ( $00 )
0005A1r 1  AD 00 60       lda PORTB_1       ; check for SHIFT/INSTRUCTION button
0005A4r 1  29 80          and #%10000000
0005A6r 1  F0 03          beq check_keypress ; done this way to get around the limit in size of branch jumps....
0005A8r 1  4C rr rr       jmp handle_new_char
0005ABr 1               
0005ABr 1               check_keypress:
0005ABr 1               
0005ABr 1  AD rr rr       lda INKEY
0005AEr 1  20 rr rr       jsr bintohex  ; convert BYTE value of keypress to its ASCII HEX equivalent "0" -> "A"
0005B1r 1               
0005B1r 1               ; choose action of "SHIFTed" key-press
0005B1r 1               
0005B1r 1               check_a:
0005B1r 1               
0005B1r 1  C9 41          cmp #'A'
0005B3r 1                 ; move up one memory address and display contents
0005B3r 1  D0 09          bne check_b
0005B5r 1  20 rr rr       jsr increment_address
0005B8r 1  20 rr rr       jsr new_address
0005BBr 1  4C rr rr       jmp exit_key_irq
0005BEr 1               
0005BEr 1               check_b:
0005BEr 1               
0005BEr 1  C9 42          cmp #'B'
0005C0r 1                 ; move down one memory address and display contents
0005C0r 1  D0 09          bne check_c
0005C2r 1  20 rr rr       jsr decrement_address
0005C5r 1  20 rr rr       jsr new_address
0005C8r 1  4C rr rr       jmp exit_key_irq
0005CBr 1               
0005CBr 1               check_c:
0005CBr 1               
0005CBr 1  C9 43          cmp #'C'
0005CDr 1                 ; return to MONITOR
0005CDr 1  D0 13          bne check_d
0005CFr 1  57 rr          rmb5 FLAGS
0005D1r 1  20 rr rr       jsr lcd_clear
0005D4r 1  A9 rr          lda #<splash
0005D6r 1  85 rr          sta MESSAGE_POINTER
0005D8r 1  A9 rr          lda #>splash
0005DAr 1  85 rr          sta MESSAGE_POINTER + 1
0005DCr 1  20 rr rr       jsr new_address
0005DFr 1  4C rr rr       jmp exit_key_irq
0005E2r 1               
0005E2r 1               check_d:
0005E2r 1               
0005E2r 1  C9 44          cmp #'D'
0005E4r 1                 ; move monitor to entered 4-digit memory address
0005E4r 1  D0 13          bne check_e
0005E6r 1  AD rr rr       lda BYTE
0005E9r 1  85 rr          sta DUMP_POINTER
0005EBr 1  AD rr rr       lda BYTE + 1
0005EEr 1  85 rr          sta DUMP_POINTER + 1
0005F0r 1  20 rr rr       jsr new_address
0005F3r 1  20 rr rr       jsr print
0005F6r 1  4C rr rr       jmp exit_key_irq
0005F9r 1               
0005F9r 1               check_e:
0005F9r 1               
0005F9r 1  C9 45          cmp #'E'
0005FBr 1                 ; insert (POKE) byte of data in to current memory address, then increment to next address
0005FBr 1  D0 13          bne check_f
0005FDr 1  AD rr rr       lda BYTE
000600r 1  A0 00          ldy #$00
000602r 1  91 rr          sta (DUMP_POINTER),y
000604r 1  20 rr rr       jsr increment_address
000607r 1  20 rr rr       jsr new_address
00060Ar 1  20 rr rr       jsr print
00060Dr 1  4C rr rr       jmp exit_key_irq
000610r 1               
000610r 1               check_f:
000610r 1               
000610r 1  C9 46          cmp #'F'
000612r 1                 ; show 8-byte wide block of memory
000612r 1  D0 12          bne check_1
000614r 1  A0 00          ldy #$00
000616r 1  AD rr rr       lda BYTE
000619r 1  85 rr          sta DUMP_POINTER
00061Br 1  AD rr rr       lda BYTE + 1
00061Er 1  85 rr          sta DUMP_POINTER + 1
000620r 1  20 rr rr       jsr block_address
000623r 1  4C rr rr       jmp exit_key_irq
000626r 1               
000626r 1               check_1:
000626r 1               
000626r 1  C9 31          cmp #'1'
000628r 1                 ; show/auto-update clock
000628r 1  D0 13          bne check_3
00062Ar 1  20 rr rr       jsr lcd_clear
00062Dr 1  A9 rr          lda #<emt
00062Fr 1  85 rr          sta MESSAGE_POINTER
000631r 1  A9 rr          lda #>emt
000633r 1  85 rr          sta MESSAGE_POINTER + 1
000635r 1  20 rr rr       jsr print
000638r 1  D7 rr          smb5 FLAGS
00063Ar 1  4C rr rr       jmp exit_key_irq
00063Dr 1               
00063Dr 1               check_3:
00063Dr 1               
00063Dr 1  C9 33          cmp #'3'
00063Fr 1  D0 0B          bne check_6
000641r 1  A0 00          ldy #$00
000643r 1  20 rr rr       jsr increment_block
000646r 1  20 rr rr       jsr block_address
000649r 1  4C rr rr       jmp exit_key_irq
00064Cr 1               
00064Cr 1               check_6:
00064Cr 1               
00064Cr 1  C9 36          cmp #'6'
00064Er 1  D0 0B          bne check_9
000650r 1  A0 00          ldy #$00
000652r 1  20 rr rr       jsr decrement_block
000655r 1  20 rr rr       jsr block_address
000658r 1  4C rr rr       jmp exit_key_irq
00065Br 1               
00065Br 1               check_9:
00065Br 1               
00065Br 1  C9 39          cmp #'9'
00065Dr 1  D0 06          bne check_4
00065Fr 1  20 rr rr       jsr show_block
000662r 1  4C rr rr       jmp exit_key_irq
000665r 1               
000665r 1               check_4:
000665r 1               
000665r 1  C9 34          cmp #'4'
000667r 1  D0 12          bne check_5
000669r 1  AD rr rr       lda BYTE
00066Cr 1  8D rr rr       sta HEXB
00066Fr 1  AD rr rr       lda BYTE + 1
000672r 1  8D rr rr       sta HEXB + 1
000675r 1  20 rr rr       jsr byte_to_hex
000678r 1  4C rr rr       jmp exit_key_irq
00067Br 1               
00067Br 1               check_5:
00067Br 1               
00067Br 1  C9 35          cmp #'5'
00067Dr 1  D0 27          bne exit_key_irq
00067Fr 1  20 00 3F       jsr $3F00
000682r 1  4C rr rr       jmp exit_key_irq
000685r 1               
000685r 1               
000685r 1               handle_new_char:
000685r 1               
000685r 1  AD rr rr       lda KEY_PRESS + 2
000688r 1  8D rr rr       sta KEY_PRESS + 3
00068Br 1  AD rr rr       lda KEY_PRESS + 1
00068Er 1  8D rr rr       sta KEY_PRESS + 2
000691r 1  AD rr rr       lda KEY_PRESS
000694r 1  8D rr rr       sta KEY_PRESS + 1
000697r 1  AD rr rr       lda INKEY       ; get the new keypress value and...
00069Ar 1  8D rr rr       sta KEY_PRESS
00069Dr 1  20 rr rr       jsr bintohex
0006A0r 1  20 rr rr       jsr print_char  ; and print it on LCD
0006A3r 1  20 rr rr       jsr keys_byte
0006A6r 1               
0006A6r 1               exit_key_irq:
0006A6r 1               
0006A6r 1  20 rr rr       jsr scan  ; re-enable keypad
0006A9r 1  60             rts
0006AAr 1               
0006AAr 1               
0006AAr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006AAr 1               
0006AAr 1               nmi:
0006AAr 1               
0006AAr 1  40             rti
0006ABr 1               
0006ABr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006ABr 1               ;;
0006ABr 1               ;;    interrupt is triggered by HIGH edge on VIA CA1 pin
0006ABr 1               ;;     PORTA low nibble (keypad columns) inputs are diode ORed to CA1
0006ABr 1               ;;
0006ABr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006ABr 1               
0006ABr 1               irq:
0006ABr 1               
0006ABr 1               ; put registers on the stack while handling the IRQ
0006ABr 1  48             pha
0006ACr 1  DA             phx
0006ADr 1  5A             phy
0006AEr 1               
0006AEr 1               ;  find responsible hardware
0006AEr 1               
0006AEr 1               ;  Is it VIA_1?
0006AEr 1               
0006AEr 1  AD 0D 60       lda IFR_1   ; if IFR_1 has Bit7 set (ie sign=NEGATIVE) then it IS the source of the interrupt
0006B1r 1  10 30          bpl next_device ; if it's not set (ie sign=POSITIVE) then branch to test the next possible device
0006B3r 1               
0006B3r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006B3r 1               ;;
0006B3r 1               ;; IFR Flags
0006B3r 1               ;; B7  B6  B5  B4  B3  B2  B1  B0
0006B3r 1               ;; IRQ TI1 TI2 CB1 CB2 SR CA1 CA2
0006B3r 1               ;;
0006B3r 1               ;; Interrupt source is found by sequentially shifting IFR bit left to put bit-of-interest into the CARRY place
0006B3r 1               ;; and then branching based on whether CARRY is SET or not
0006B3r 1               ;;
0006B3r 1               ;; Only add tests for IRQ sources in use, and adjust the ASLs in each test as necessary
0006B3r 1               ;;
0006B3r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006B3r 1               
0006B3r 1               test_timer1:
0006B3r 1               
0006B3r 1  0A             asl           ; shift IFR left twice puts the TI1 bit into CARRY....
0006B4r 1  0A             asl
0006B5r 1  90 09          bcc test_cb1  ; carry clear = next test
0006B7r 1  2C 04 60       bit T1CL_1      ; clear not clear = handle the TIMER interrupt
0006BAr 1  20 rr rr       jsr rtc
0006BDr 1  4C rr rr       jmp exit_irq
0006C0r 1               
0006C0r 1               test_cb1:
0006C0r 1               
0006C0r 1  0A             asl
0006C1r 1  0A             asl
0006C2r 1  90 09          bcc test_cb2
0006C4r 1  2C 00 60       bit PORTB_1
0006C7r 1  20 rr rr       jsr cb1_handler
0006CAr 1  4C rr rr       jmp exit_irq
0006CDr 1               
0006CDr 1               test_cb2:
0006CDr 1               
0006CDr 1  0A             asl
0006CEr 1  90 09          bcc test_ca1
0006D0r 1  2C 00 60       bit PORTB_1
0006D3r 1  20 rr rr       jsr cb2_handler
0006D6r 1  4C rr rr       jmp exit_irq
0006D9r 1               
0006D9r 1               test_ca1:
0006D9r 1               
0006D9r 1  0A             asl           ; shift CA1 bit into the CARRY bit & test
0006DAr 1  0A             asl
0006DBr 1  90 06          bcc exit_irq        ; carry clear = leave
0006DDr 1  20 rr rr       jsr keypad_handler  ; carry not clear = handle the CA1 interrupt (keypad)
0006E0r 1  4C rr rr       jmp exit_irq
0006E3r 1               
0006E3r 1               
0006E3r 1               next_device:
0006E3r 1               
0006E3r 1               exit_irq:
0006E3r 1               
0006E3r 1  7A             ply
0006E4r 1  FA             plx
0006E5r 1  68             pla
0006E6r 1  40             rti
0006E7r 1               
0006E7r 1  53 68 65 64  emt: .asciiz "Shed Time  MET"
0006EBr 1  20 54 69 6D  
0006EFr 1  65 20 20 4D  
0006F6r 1  73 68 65 64  splash: .asciiz "shed> "
0006FAr 1  3E 20 00     
0006FDr 1  4E 6F 74 20  error_message: .asciiz "Not Decimal"
000701r 1  44 65 63 69  
000705r 1  6D 61 6C 00  
000709r 1  42 65 67 69  mem_start_msg: .asciiz "Begin RAM Test"
00070Dr 1  6E 20 52 41  
000711r 1  4D 20 54 65  
000718r 1  52 41 4D 20  mem_pass_msg: .asciiz "RAM Test Pass"
00071Cr 1  54 65 73 74  
000720r 1  20 50 61 73  
000726r 1  52 41 4D 20  mem_fail_msg_1: .asciiz "RAM Test 1 Fail"
00072Ar 1  54 65 73 74  
00072Er 1  20 31 20 46  
000736r 1  52 41 4D 20  mem_fail_msg_2: .asciiz "RAM Test 2 Fail"
00073Ar 1  54 65 73 74  
00073Er 1  20 32 20 46  
000746r 1               
000746r 1               ; Reset/IRQ vectors
000746r 1               
000746r 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr          .word nmi
000002r 1  rr rr          .word reset
000004r 1  rr rr          .word irq
000004r 1               
